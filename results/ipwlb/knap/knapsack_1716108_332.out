solving instance knapsack 100 4 cubic
The latest version of Julia in the `1.10` channel is 1.10.6+0.x64.linux.gnu. You currently have `1.10.5+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.10.6+0.x64.linux.gnu and update the `1.10` channel to that version.
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter FeasibilityTol to value 1e-09
Set parameter MIPGap to value 1e-09
Set parameter Threads to value 1
Set parameter OptimalityTol to value 1e-09
Set parameter IntFeasTol to value 1e-09
Set parameter TimeLimit to value 3528.700293077
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
Iteration 1	LB = -1.0e20	UB = 1.0e20	CPU = 72.299706923, #pieces = 400
Iteration 2	LB = -3603.6423164584976	UB = -3276.2063010393986	CPU = 72.67776624400001, #pieces = 403
Iteration 3	LB = -3306.707983617751	UB = -3276.2063010393986	CPU = 72.98205057, #pieces = 432
Iteration 4	LB = -3294.0076378060776	UB = -3277.623197008509	CPU = 73.53339545600001, #pieces = 500
Iteration 5	LB = -3282.842080335457	UB = -3278.039937399804	CPU = 73.89173813900001, #pieces = 528
Iteration 6	LB = -3279.2411226363256	UB = -3278.294234532068	CPU = 74.179284949, #pieces = 569
Iteration 7	LB = -3278.748764284055	UB = -3278.3577430323166	CPU = 74.256792742, #pieces = 578
Iteration 8	LB = -3278.6520252775977	UB = -3278.3577430323166	CPU = 74.33642558000001, #pieces = 583
Iteration 9	LB = -3278.6375672438758	UB = -3278.4032333608825	CPU = 75.746603655, #pieces = 789
Iteration 10	LB = -3278.5146372857103	UB = -3278.4032333608825	CPU = 75.827477453, #pieces = 795
Iteration 11	LB = -3278.513094192547	UB = -3278.4189245820676	CPU = 76.949124963, #pieces = 935
Iteration 12	LB = -3278.459802178503	UB = -3278.4189245820676	CPU = 77.85247475, #pieces = 1034
Iteration 13	LB = -3278.438082370963	UB = -3278.4189245820676	CPU = 78.04921432500001, #pieces = 1050
Iteration 14	LB = -3278.43477535575	UB = -3278.4189245820676	CPU = 78.137371318, #pieces = 1052
Iteration 15	LB = -3278.434667469814	UB = -3278.4201912607928	CPU = 78.811016757, #pieces = 1105
Iteration 16	LB = -3278.4278105506583	UB = -3278.4205743710513	CPU = 79.232219469, #pieces = 1147
Iteration 17	LB = -3278.4255032883966	UB = -3278.420797775042	CPU = 79.485765449, #pieces = 1170
Iteration 18	LB = -3278.42491605313	UB = -3278.421131671491	CPU = 79.84260758100001, #pieces = 1208
WRITING LOG...
(-3603.6423164584976, -3276.2063010393986, 0.0, 0.0, 9.994364985966168, 9.994364985966168, 400, 1, 0.091666305, 72.398150649)
(-3306.707983617751, -3276.2063010393986, 0.0, 0.0, 0.9667153457322879, 0.9310061630940468, 403, 2, 0.177507239, 72.763863418)
(-3294.0076378060776, -3277.623197008509, 0.0, 0.0, 0.4998878703483231, 0.4998878703483231, 432, 3, 0.19937390700000002, 73.004171242)
(-3282.842080335457, -3278.039937399804, 0.0, 0.0, 0.14649433891468316, 0.14649433891468316, 500, 4, 0.21943113400000003, 73.553698979)
(-3279.2411226363256, -3278.294234532068, 0.0, 0.0, 0.028883560672605436, 0.028883560672605436, 528, 5, 0.24550029300000004, 73.918024634)
(-3278.748764284055, -3278.3577430323166, 0.0, 0.0, 0.011927351509137572, 0.011927351509137572, 569, 6, 0.26906664300000005, 74.203061516)
(-3278.6520252775977, -3278.3577430323166, 0.0, 0.0, 0.009829871571546089, 0.008976514106993528, 578, 7, 0.30525857100000003, 74.29322275700001)
(-3278.6375672438758, -3278.4032333608825, 0.0, 0.0, 0.007147805389181481, 0.007147805389181481, 583, 8, 0.33963187400000006, 74.371015916)
(-3278.5146372857103, -3278.4032333608825, 0.0, 0.0, 0.003497783297602475, 0.0033981153902641896, 789, 9, 0.38036194300000004, 75.78756289)
(-3278.513094192547, -3278.4189245820676, 0.0, 0.0, 0.0028724093121090056, 0.0028724093121090056, 795, 10, 0.43833603200000004, 75.88570098800001)
(-3278.459802178503, -3278.4189245820676, 0.0, 0.0, 0.0012568572944044382, 0.0012468692188516454, 935, 11, 0.4957964140000001, 77.00679654800001)
(-3278.438082370963, -3278.4189245820676, 0.0, 0.0, 0.00058882361282647, 0.0005843606121163819, 1034, 12, 0.5925210360000001, 77.94944387400001)
(-3278.43477535575, -3278.4189245820676, 0.0, 0.0, 0.0007539833960656245, 0.00048348835359349586, 1050, 13, 0.664909296, 78.12182937700001)
(-3278.434667469814, -3278.4201912607928, 0.0, 0.0, 0.00044156051319647476, 0.00044156051319647476, 1052, 14, 0.7707192310000001, 78.243415059)
(-3278.4278105506583, -3278.4205743710513, 0.0, 0.0, 0.00022072151643700203, 0.00022072151643700203, 1105, 15, 0.8918807030000001, 78.932415354)
(-3278.4255032883966, -3278.420797775042, 0.0, 0.0, 0.00014352987748732443, 0.00014352987748732443, 1147, 16, 1.0181092100000002, 79.358692379)
(-3278.42491605313, -3278.421131671491, 0.0, 0.0, 0.00011543305411315739, 0.00011543305411315739, 1170, 17, 1.1299059130000002, 79.597823078)
(-3278.424172398948, -3278.421131671491, 0.0, 0.0, 9.36052297208138e-5, 9.274975163329964e-5, 1208, 18, 1.2278972590000001, 79.940834847)
