solving instance knapsack 200 10 cubic
The latest version of Julia in the `1.10` channel is 1.10.6+0.x64.linux.gnu. You currently have `1.10.5+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.10.6+0.x64.linux.gnu and update the `1.10` channel to that version.
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter FeasibilityTol to value 1e-09
Set parameter MIPGap to value 1e-09
Set parameter Threads to value 1
Set parameter OptimalityTol to value 1e-09
Set parameter IntFeasTol to value 1e-09
Set parameter TimeLimit to value 3458.086650289
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
Iteration 1	LB = -1.0e20	UB = 1.0e20	CPU = 142.913349711, #pieces = 800
Iteration 2	LB = -7356.882244727139	UB = -6688.074218480156	CPU = 143.611711574, #pieces = 803
Iteration 3	LB = -6754.21963714966	UB = -6688.074218480156	CPU = 143.98105326200002, #pieces = 835
Iteration 4	LB = -6729.844629645661	UB = -6688.074218480156	CPU = 144.06763602, #pieces = 837
Iteration 5	LB = -6728.803820547252	UB = -6688.511977524255	CPU = 145.392164134, #pieces = 1014
Iteration 6	LB = -6702.0448870536575	UB = -6688.649044568479	CPU = 146.081368354, #pieces = 1041
Iteration 7	LB = -6692.778271730282	UB = -6689.254878871309	CPU = 146.274439191, #pieces = 1048
Iteration 8	LB = -6692.640856494755	UB = -6689.356817957339	CPU = 146.512967255, #pieces = 1067
Iteration 9	LB = -6691.740564583823	UB = -6689.633856096964	CPU = 147.07802563, #pieces = 1143
Iteration 10	LB = -6690.46270048787	UB = -6689.654363513252	CPU = 147.27703086300002, #pieces = 1150
Iteration 11	LB = -6690.340698832381	UB = -6689.654363513252	CPU = 147.561947526, #pieces = 1174
Iteration 12	LB = -6690.2111031052655	UB = -6689.697659876558	CPU = 148.109731055, #pieces = 1240
Iteration 13	LB = -6690.023213695562	UB = -6689.699397490022	CPU = 148.272613927, #pieces = 1250
Iteration 14	LB = -6689.989614556291	UB = -6689.699397490022	CPU = 148.41808081000002, #pieces = 1253
Iteration 15	LB = -6689.9809522150335	UB = -6689.699397490022	CPU = 149.002994271, #pieces = 1310
Iteration 16	LB = -6689.950957981538	UB = -6689.699397490022	CPU = 152.82467293000002, #pieces = 1850
Iteration 17	LB = -6689.829393389166	UB = -6689.7038189799005	CPU = 154.26131629300002, #pieces = 1966
Iteration 18	LB = -6689.764094328354	UB = -6689.707379895527	CPU = 156.072485956, #pieces = 2147
Iteration 19	LB = -6689.735811315837	UB = -6689.707558388012	CPU = 156.63914596, #pieces = 2178
Iteration 20	LB = -6689.733303750056	UB = -6689.710734200565	CPU = 157.909700855, #pieces = 2264
Iteration 21	LB = -6689.723900604459	UB = -6689.711504616778	CPU = 158.370191554, #pieces = 2271
Iteration 22	LB = -6689.723274567357	UB = -6689.711504616778	CPU = 158.94681320200002, #pieces = 2290
Iteration 23	LB = -6689.721866702279	UB = -6689.711504616778	CPU = 159.875254188, #pieces = 2366
Iteration 24	LB = -6689.719348578803	UB = -6689.711606960341	CPU = 160.816042065, #pieces = 2447
WRITING LOG...
(-7356.882244727139, -6688.074218480156, 0.0, 0.0, 10.000009036965615, 10.000009036965615, 800, 1, 0.21170994, 143.132729368)
(-6754.21963714966, -6688.074218480156, 0.0, 0.0, 1.0262097942608552, 0.9890054522232249, 803, 2, 0.320689959, 143.721128947)
(-6729.844629645661, -6688.074218480156, 0.0, 0.0, 0.698947696701606, 0.624550652414828, 835, 3, 0.38506881600000004, 144.04589589100001)
(-6728.803820547252, -6688.511977524255, 0.0, 0.0, 0.6024036909613405, 0.6024036909613405, 837, 4, 0.48624249300000005, 144.16927840900001)
(-6702.0448870536575, -6688.649044568479, 0.0, 0.0, 0.20027725174272876, 0.20027725174272876, 1014, 5, 0.6040489080000001, 145.51045481)
(-6692.778271730282, -6689.254878871309, 0.0, 0.0, 0.05267242649254288, 0.05267242649254288, 1041, 6, 0.7455772620000001, 146.22332505400001)
(-6692.640856494755, -6689.356817957339, 0.0, 0.0, 0.04909348726322641, 0.04909348726322641, 1048, 7, 0.839645594, 146.36902591100002)
(-6691.740564583823, -6689.633856096964, 0.0, 0.0, 0.03149213443031953, 0.03149213443031953, 1067, 8, 0.9235268360000001, 146.597270624)
(-6690.46270048787, -6689.654363513252, 0.0, 0.0, 0.012083389226012185, 0.012083389226012185, 1143, 9, 1.057596608, 147.212509065)
(-6690.340698832381, -6689.654363513252, 0.0, 0.0, 0.011567723685291582, 0.010259652918283764, 1150, 10, 1.1933059990000001, 147.413177198)
(-6690.2111031052655, -6689.697659876558, 0.0, 0.0, 0.007675133538354904, 0.007675133538354904, 1174, 11, 1.3497280210000002, 147.71882751200002)
(-6690.023213695562, -6689.699397490022, 0.0, 0.0, 0.004840519525600971, 0.004840519525600971, 1240, 12, 1.4510235010000003, 148.211473559)
(-6689.989614556291, -6689.699397490022, 0.0, 0.0, 0.0063278922859870594, 0.004338267671297141, 1250, 13, 1.5595506310000002, 148.381674787)
(-6689.9809522150335, -6689.699397490022, 0.0, 0.0, 0.004490679351621793, 0.004208779920914815, 1253, 14, 1.7370453640000003, 148.59611078700001)
(-6689.950957981538, -6689.699397490022, 0.0, 0.0, 0.0037724962527425085, 0.0037604154771076577, 1310, 15, 1.9420738420000003, 149.20844170700002)
(-6689.829393389166, -6689.7038189799005, 0.0, 0.0, 0.0018771295809787523, 0.0018771295809787523, 1850, 16, 2.2236447870000005, 153.106673852)
(-6689.764094328354, -6689.707379895527, 0.0, 0.0, 0.000847786451727863, 0.000847786451727863, 1966, 17, 2.5353091180000007, 154.573396588)
(-6689.735811315837, -6689.707558388012, 0.0, 0.0, 0.00042233427363051816, 0.00042233427363051816, 2147, 18, 2.928496988000001, 156.466120773)
(-6689.733303750056, -6689.710734200565, 0.0, 0.0, 0.0003373770613966398, 0.0003373770613966398, 2178, 19, 3.319804012000001, 157.030928124)
(-6689.723900604459, -6689.711504616778, 0.0, 0.0, 0.00018529928641048397, 0.00018529928641048397, 2264, 20, 3.725256416000001, 158.31561555300001)
(-6689.723274567357, -6689.711504616778, 0.0, 0.0, 0.00018302569861250957, 0.00017594107863865504, 2271, 21, 4.139796243000001, 158.785206003)
(-6689.721866702279, -6689.711504616778, 0.0, 0.0, 0.0001553588698507033, 0.00015489585004559105, 2290, 22, 4.553094258000001, 159.360552756)
(-6689.719348578803, -6689.711606960341, 0.0, 0.0, 0.00011572424817462119, 0.00011572424817462119, 2366, 23, 5.0092846710000005, 160.33195080200002)
(-6689.717854719058, -6689.71167039953, 0.0, 0.0, 9.244523281083451e-5, 9.244523281083451e-5, 2447, 24, 5.470371478000001, 161.27762388000002)
