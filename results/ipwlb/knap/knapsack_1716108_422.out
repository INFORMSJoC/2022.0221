solving instance knapsack 200 3 cubic
The latest version of Julia in the `1.10` channel is 1.10.6+0.x64.linux.gnu. You currently have `1.10.5+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.10.6+0.x64.linux.gnu and update the `1.10` channel to that version.
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter FeasibilityTol to value 1e-09
Set parameter MIPGap to value 1e-09
Set parameter Threads to value 1
Set parameter OptimalityTol to value 1e-09
Set parameter IntFeasTol to value 1e-09
Set parameter TimeLimit to value 3447.028162452
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
Iteration 1	LB = -1.0e20	UB = 1.0e20	CPU = 153.971837548, #pieces = 800
Iteration 2	LB = -7996.9890058305855	UB = -7270.958771852331	CPU = 154.715752619, #pieces = 802
Iteration 3	LB = -7334.315530506748	UB = -7270.958771852331	CPU = 155.16445579900002, #pieces = 840
Iteration 4	LB = -7313.974096450723	UB = -7270.958771852331	CPU = 155.226953712, #pieces = 843
Iteration 5	LB = -7311.705070513544	UB = -7271.32421422714	CPU = 156.625278414, #pieces = 1013
Iteration 6	LB = -7284.9865514748735	UB = -7272.3643276975545	CPU = 157.269406827, #pieces = 1046
Iteration 7	LB = -7275.308644856821	UB = -7272.3643276975545	CPU = 157.355932137, #pieces = 1053
Iteration 8	LB = -7275.060259114145	UB = -7272.3643276975545	CPU = 157.476561908, #pieces = 1058
Iteration 9	LB = -7274.888175412747	UB = -7272.717653837191	CPU = 158.06222741800002, #pieces = 1139
Iteration 10	LB = -7273.5224423647	UB = -7272.801593017422	CPU = 158.512961262, #pieces = 1205
Iteration 11	LB = -7273.210637144408	UB = -7272.853893909559	CPU = 161.975033298, #pieces = 1699
Iteration 12	LB = -7273.049977841759	UB = -7272.853893909559	CPU = 162.095140614, #pieces = 1702
Iteration 13	LB = -7273.040979299937	UB = -7272.857639569702	CPU = 163.797731623, #pieces = 1875
Iteration 14	LB = -7272.947882410812	UB = -7272.857639569702	CPU = 165.35938816700002, #pieces = 2031
Iteration 15	LB = -7272.910125182064	UB = -7272.863450341474	CPU = 166.739194416, #pieces = 2166
Iteration 16	LB = -7272.891354414051	UB = -7272.863450341474	CPU = 167.03538232300002, #pieces = 2177
Iteration 17	LB = -7272.887315935569	UB = -7272.863450341474	CPU = 167.327325296, #pieces = 2188
Iteration 18	LB = -7272.886077938997	UB = -7272.864699816407	CPU = 168.662430785, #pieces = 2286
Iteration 19	LB = -7272.876737400095	UB = -7272.864699816407	CPU = 168.99177960900002, #pieces = 2295
Iteration 20	LB = -7272.876281173654	UB = -7272.864699816407	CPU = 169.273306945, #pieces = 2298
Iteration 21	LB = -7272.876013637221	UB = -7272.864699816407	CPU = 169.585657518, #pieces = 2303
Iteration 22	LB = -7272.875723249168	UB = -7272.865691522548	CPU = 170.379752034, #pieces = 2382
Iteration 23	LB = -7272.873271850764	UB = -7272.86569841976	CPU = 171.127188515, #pieces = 2463
WRITING LOG...
(-7996.9890058305855, -7270.958771852331, 0.0, 0.0, 9.98534384198266, 9.98534384198266, 800, 1, 0.165365265, 154.146143548)
(-7334.315530506748, -7270.958771852331, 0.0, 0.0, 0.9198004604353345, 0.8713673209052759, 802, 2, 0.29560758200000004, 154.84639061000001)
(-7313.974096450723, -7270.958771852331, 0.0, 0.0, 0.6430559442449157, 0.5916045730435839, 840, 3, 0.327739135, 155.19696879100002)
(-7311.705070513544, -7271.32421422714, 0.0, 0.0, 0.5553439111873824, 0.5553439111873824, 843, 4, 0.39325996900000004, 155.29287906300002)
(-7284.9865514748735, -7272.3643276975545, 0.0, 0.0, 0.17356423865132828, 0.17356423865132828, 1013, 5, 0.41827487500000005, 156.650724526)
(-7275.308644856821, -7272.3643276975545, 0.0, 0.0, 0.041014584494036395, 0.04048638141041473, 1046, 6, 0.46041502600000006, 157.311933022)
(-7275.060259114145, -7272.3643276975545, 0.0, 0.0, 0.03722674850684344, 0.03707090699956926, 1053, 7, 0.5301440590000001, 157.426093642)
(-7274.888175412747, -7272.717653837191, 0.0, 0.0, 0.029844711136425617, 0.029844711136425617, 1058, 8, 0.5932312120000001, 157.54002438400002)
(-7273.5224423647, -7272.801593017422, 0.0, 0.0, 0.009911577238258008, 0.009911577238258008, 1139, 9, 0.645923762, 158.115291721)
(-7273.210637144408, -7272.853893909559, 0.0, 0.0, 0.004905134078767008, 0.004905134078767008, 1205, 10, 0.7630441, 158.63047295200002)
(-7273.049977841759, -7272.853893909559, 0.0, 0.0, 0.0033793869799149568, 0.0026961071274133343, 1699, 11, 0.858731486, 162.07111014100002)
(-7273.040979299937, -7272.857639569702, 0.0, 0.0, 0.0025208761029195995, 0.0025208761029195995, 1702, 12, 1.0497129090000001, 162.286535794)
(-7272.947882410812, -7272.857639569702, 0.0, 0.0, 0.0012532552432827151, 0.0012408168230741143, 1875, 13, 1.2917490560000002, 164.040193004)
(-7272.910125182064, -7272.863450341474, 0.0, 0.0, 0.0006417670413919172, 0.0006417670413919172, 2031, 14, 1.4979214420000002, 165.565987971)
(-7272.891354414051, -7272.863450341474, 0.0, 0.0, 0.00040300449961563526, 0.00038367381386690715, 2166, 15, 1.7190508380000002, 166.96076558200002)
(-7272.887315935569, -7272.863450341474, 0.0, 0.0, 0.00034723642054932427, 0.0003281457744633714, 2177, 16, 1.9489640820000003, 167.265750596)
(-7272.886077938997, -7272.864699816407, 0.0, 0.0, 0.00029394363119100876, 0.00029394363119100876, 2188, 17, 2.1797657520000002, 167.558574561)
(-7272.876737400095, -7272.864699816407, 0.0, 0.0, 0.00017290958736068416, 0.00016551364813587483, 2286, 18, 2.438237592, 168.92134612)
(-7272.876281173654, -7272.864699816407, 0.0, 0.0, 0.0001872208714048634, 0.00015924065310527708, 2295, 19, 2.69507689, 169.249054172)
(-7272.876013637221, -7272.864699816407, 0.0, 0.0, 0.00016536863263919894, 0.00015556209666157128, 2298, 20, 2.9677638020000003, 169.54648070800002)
(-7272.875723249168, -7272.865691522548, 0.0, 0.0, 0.0001379336157873204, 0.0001379336157873204, 2303, 21, 3.225235409, 169.843591515)
(-7272.873271850764, -7272.86569841976, 0.0, 0.0, 0.00010413269429124017, 0.00010413269429124017, 2382, 22, 3.4978252060000004, 170.652852298)
(-7272.872167209009, -7272.86569841976, 0.0, 0.0, 8.94404631512204e-5, 8.89441592533369e-5, 2463, 23, 3.7717709220000004, 171.401601341)
