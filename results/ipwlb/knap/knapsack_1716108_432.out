solving instance knapsack 200 4 cubic
The latest version of Julia in the `1.10` channel is 1.10.6+0.x64.linux.gnu. You currently have `1.10.5+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.10.6+0.x64.linux.gnu and update the `1.10` channel to that version.
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter FeasibilityTol to value 1e-09
Set parameter MIPGap to value 1e-09
Set parameter Threads to value 1
Set parameter OptimalityTol to value 1e-09
Set parameter IntFeasTol to value 1e-09
Set parameter TimeLimit to value 3463.430540732
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
Iteration 1	LB = -1.0e20	UB = 1.0e20	CPU = 137.569459268, #pieces = 800
Iteration 2	LB = -7398.583732252699	UB = -6726.229297503536	CPU = 138.208061871, #pieces = 800
Iteration 3	LB = -6793.813895218868	UB = -6726.229297503536	CPU = 138.69948920800002, #pieces = 849
Iteration 4	LB = -6764.582648749732	UB = -6726.636769860829	CPU = 139.811645199, #pieces = 981
Iteration 5	LB = -6739.439507314251	UB = -6726.636769860829	CPU = 140.61734720500002, #pieces = 1051
Iteration 6	LB = -6730.686456243865	UB = -6726.892813717541	CPU = 140.76398333100002, #pieces = 1067
Iteration 7	LB = -6730.387041234818	UB = -6728.32542376926	CPU = 141.315222382, #pieces = 1147
Iteration 8	LB = -6729.234372379904	UB = -6728.32542376926	CPU = 141.520900734, #pieces = 1164
Iteration 9	LB = -6728.918586371399	UB = -6728.377217510657	CPU = 143.264881021, #pieces = 1414
Iteration 10	LB = -6728.69430640622	UB = -6728.377217510657	CPU = 143.46285521500002, #pieces = 1427
Iteration 11	LB = -6728.6194128726875	UB = -6728.386313546469	CPU = 144.114823591, #pieces = 1507
Iteration 12	LB = -6728.596167290832	UB = -6728.398177757328	CPU = 146.935675564, #pieces = 1887
Iteration 13	LB = -6728.4942260616635	UB = -6728.401390735582	CPU = 148.07297789700002, #pieces = 1982
Iteration 14	LB = -6728.452245196529	UB = -6728.401390735582	CPU = 148.387446474, #pieces = 1992
Iteration 15	LB = -6728.4511251178565	UB = -6728.40170300887	CPU = 148.663735174, #pieces = 1998
Iteration 16	LB = -6728.449958720882	UB = -6728.4056608416595	CPU = 150.33372482000001, #pieces = 2175
Iteration 17	LB = -6728.426874310533	UB = -6728.4056608416595	CPU = 150.86384902, #pieces = 2225
Iteration 18	LB = -6728.422427296865	UB = -6728.4056608416595	CPU = 151.060628025, #pieces = 2227
Iteration 19	LB = -6728.422343500478	UB = -6728.40591270694	CPU = 151.542392873, #pieces = 2258
Iteration 20	LB = -6728.419945706369	UB = -6728.40591270694	CPU = 151.73432909500002, #pieces = 2259
Iteration 21	LB = -6728.419918936624	UB = -6728.406511345264	CPU = 152.427079902, #pieces = 2315
Iteration 22	LB = -6728.416421383346	UB = -6728.407351954228	CPU = 153.245835792, #pieces = 2405
Iteration 23	LB = -6728.414103442022	UB = -6728.407351954228	CPU = 153.866434316, #pieces = 2481
WRITING LOG...
(-7398.583732252699, -6726.229297503536, 0.0, 0.0, 9.9960082389506, 9.9960082389506, 800, 1, 0.184671849, 137.76065843700002)
(-6793.813895218868, -6726.229297503536, 0.0, 0.0, 1.1150426811185916, 1.0047917596329408, 800, 2, 0.30358481400000004, 138.327352811)
(-6764.582648749732, -6726.636769860829, 0.0, 0.0, 0.564113689904018, 0.564113689904018, 849, 3, 0.43637031600000004, 138.83267712900002)
(-6739.439507314251, -6726.636769860829, 0.0, 0.0, 0.1925936541348009, 0.19032895474281836, 981, 4, 0.45759768100000003, 139.833273384)
(-6730.686456243865, -6726.892813717541, 0.0, 0.0, 0.05639516833965587, 0.05639516833965587, 1051, 5, 0.48051474200000005, 140.640651404)
(-6730.387041234818, -6728.32542376926, 0.0, 0.0, 0.030640870286606434, 0.030640870286606434, 1067, 6, 0.53440361, 140.818257437)
(-6729.234372379904, -6728.32542376926, 0.0, 0.0, 0.013944062230221557, 0.013509284307697388, 1147, 7, 0.6204259910000001, 141.40165933400002)
(-6728.918586371399, -6728.377217510657, 0.0, 0.0, 0.00804605394794719, 0.00804605394794719, 1164, 8, 0.746122806, 141.64701389500001)
(-6728.69430640622, -6728.377217510657, 0.0, 0.0, 0.00471270984536391, 0.00471270984536391, 1414, 9, 0.8591694040000001, 143.378338097)
(-6728.6194128726875, -6728.386313546469, 0.0, 0.0, 0.003464416508742986, 0.003464416508742986, 1427, 10, 0.9949361120000001, 143.599041668)
(-6728.596167290832, -6728.398177757328, 0.0, 0.0, 0.0029425953737232907, 0.0029425953737232907, 1507, 11, 1.13364868, 144.25396378000002)
(-6728.4942260616635, -6728.401390735582, 0.0, 0.0, 0.001379753089780568, 0.001379753089780568, 1887, 12, 1.312939968, 147.115382194)
(-6728.452245196529, -6728.401390735582, 0.0, 0.0, 0.0007941058218890255, 0.0007558178829307214, 1982, 13, 1.554148265, 148.31461937100002)
(-6728.4511251178565, -6728.40170300887, 0.0, 0.0, 0.0007345297021210498, 0.0007345297021210498, 1992, 14, 1.7821315260000001, 148.61587684600002)
(-6728.449958720882, -6728.4056608416595, 0.0, 0.0, 0.0006583711127934448, 0.0006583711127934448, 1998, 15, 1.928998844, 148.81110200100002)
(-6728.426874310533, -6728.4056608416595, 0.0, 0.0, 0.00032037661836347217, 0.00031528225173863575, 2175, 16, 2.1136715120000003, 150.518838549)
(-6728.422427296865, -6728.4056608416595, 0.0, 0.0, 0.00027085373717244824, 0.00024918912518976955, 2225, 17, 2.289940263, 151.040558671)
(-6728.422343500478, -6728.40591270694, 0.0, 0.0, 0.0002442003908594122, 0.0002442003908594122, 2227, 18, 2.483507843, 151.254641525)
(-6728.419945706369, -6728.40591270694, 0.0, 0.0, 0.00022904479985760693, 0.00020856350836098082, 2258, 19, 2.6575656149999998, 151.716888649)
(-6728.419918936624, -6728.406511345264, 0.0, 0.0, 0.0001992684499171512, 0.0001992684499171512, 2259, 20, 2.8688112059999997, 151.94604343)
(-6728.416421383346, -6728.407351954228, 0.0, 0.0, 0.00013479310397107098, 0.00013479310397107098, 2315, 21, 3.068811753, 152.62750791300002)
(-6728.414103442022, -6728.407351954228, 0.0, 0.0, 0.00010403406606242532, 0.00010034302979255033, 2405, 22, 3.270075362, 153.447528397)
(-6728.413227921833, -6728.407351954228, 0.0, 0.0, 0.00014966671505715987, 8.733073515789386e-5, 2481, 23, 3.482540225, 154.079336086)
