solving instance knapsack 100 10 cubic
The latest version of Julia in the `1.10` channel is 1.10.6+0.x64.linux.gnu. You currently have `1.10.5+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.10.6+0.x64.linux.gnu and update the `1.10` channel to that version.
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter TokenServer to value "licences.gerad.lan"
Set parameter FeasibilityTol to value 1e-09
Set parameter MIPGap to value 1e-09
Set parameter Threads to value 1
Set parameter OptimalityTol to value 1e-09
Set parameter IntFeasTol to value 1e-09
Set parameter TimeLimit to value 3520.41489428
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
-1.0 * eval(exprs[k, count])
Iteration 1	LB = -1.0e20	UB = 1.0e20	CPU = 80.58510572, #pieces = 400
Iteration 2	LB = -3749.644386612158	UB = -3409.4811631569623	CPU = 81.003261209, #pieces = 400
Iteration 3	LB = -3437.229822485686	UB = -3409.4811631569623	CPU = 81.093668492, #pieces = 405
Iteration 4	LB = -3431.183471999693	UB = -3409.4811631569623	CPU = 81.809568704, #pieces = 488
Iteration 5	LB = -3416.5695039827497	UB = -3409.607488034873	CPU = 82.401799623, #pieces = 528
Iteration 6	LB = -3410.2190861730332	UB = -3409.607488034873	CPU = 82.46757204100001, #pieces = 533
Iteration 7	LB = -3410.190071969824	UB = -3409.607488034873	CPU = 82.551096853, #pieces = 535
Iteration 8	LB = -3410.185873990932	UB = -3409.607488034873	CPU = 82.84055270200001, #pieces = 568
Iteration 9	LB = -3409.8615491150204	UB = -3409.607488034873	CPU = 82.935358848, #pieces = 571
Iteration 10	LB = -3409.8534981504545	UB = -3409.637763647824	CPU = 85.12484784700001, #pieces = 850
Iteration 11	LB = -3409.728903581962	UB = -3409.639362224658	CPU = 85.668457304, #pieces = 896
Iteration 12	LB = -3409.6874316298163	UB = -3409.64467674795	CPU = 85.874981352, #pieces = 914
Iteration 13	LB = -3409.6807019136218	UB = -3409.645457299902	CPU = 86.797298095, #pieces = 1010
Iteration 14	LB = -3409.6634642721565	UB = -3409.645835161346	CPU = 86.91774413600001, #pieces = 1013
Iteration 15	LB = -3409.6614908467745	UB = -3409.645837831066	CPU = 87.74237533200001, #pieces = 1079
Iteration 16	LB = -3409.6532971371817	UB = -3409.646387500327	CPU = 88.316110756, #pieces = 1127
Iteration 17	LB = -3409.650834073997	UB = -3409.646606998737	CPU = 88.799082384, #pieces = 1166
WRITING LOG...
(-3749.644386612158, -3409.4811631569623, 0.0, 0.0, 9.976979111397299, 9.976979111397299, 400, 1, 0.09182643800000001, 80.687652376)
(-3437.229822485686, -3409.4811631569623, 0.0, 0.0, 0.875414920278281, 0.8138675065454839, 400, 2, 0.13028661800000002, 81.04205760400001)
(-3431.183471999693, -3409.4811631569623, 0.0, 0.0, 0.6365281931235519, 0.6365281931235519, 405, 3, 0.14220907900000002, 81.10588474000001)
(-3416.5695039827497, -3409.607488034873, 0.0, 0.0, 0.20418819387006232, 0.20418819387006232, 488, 4, 0.16071396100000002, 81.8283428)
(-3410.2190861730332, -3409.607488034873, 0.0, 0.0, 0.021508949820834868, 0.01793749398740567, 528, 5, 0.19164365100000003, 82.432993029)
(-3410.190071969824, -3409.607488034873, 0.0, 0.0, 0.07141436961421709, 0.01708653963823609, 533, 6, 0.252835046, 82.52907935600001)
(-3410.185873990932, -3409.607488034873, 0.0, 0.0, 0.016963417580732065, 0.016963417580732065, 535, 7, 0.302179483, 82.60081119200001)
(-3409.8615491150204, -3409.607488034873, 0.0, 0.0, 0.02170065911067841, 0.007451329252386237, 568, 8, 0.367526448, 82.906204676)
(-3409.8534981504545, -3409.637763647824, 0.0, 0.0, 0.006327197127225236, 0.006327197127225236, 571, 9, 0.435061334, 83.00322306300001)
(-3409.728903581962, -3409.639362224658, 0.0, 0.0, 0.0026261239911879557, 0.0026261239911879557, 850, 10, 0.46394917300000005, 85.15399371400001)
(-3409.6874316298163, -3409.64467674795, 0.0, 0.0, 0.0012539395133368996, 0.0012539395133368996, 896, 11, 0.516688837, 85.721496692)
(-3409.6807019136218, -3409.645457299902, 0.0, 0.0, 0.0010336738573343324, 0.0010336738573343324, 914, 12, 0.565589852, 85.92416567500001)
(-3409.6634642721565, -3409.645835161346, 0.0, 0.0, 0.0005170364214578056, 0.0005170364214578056, 1010, 13, 0.661865853, 86.893858531)
(-3409.6614908467745, -3409.645837831066, 0.0, 0.0, 0.00045908039876302656, 0.00045908039876302656, 1013, 14, 0.7470834120000001, 87.00326260700001)
(-3409.6532971371817, -3409.646387500327, 0.0, 0.0, 0.00020264966126909772, 0.00020264966126909772, 1079, 15, 0.888499946, 87.884095469)
(-3409.650834073997, -3409.646606998737, 0.0, 0.0, 0.00012397399928356026, 0.00012397399928356026, 1127, 16, 1.090997743, 88.518888762)
(-3409.6499455299454, -3409.646606998737, 0.0, 0.0, 9.881404067725468e-5, 9.791428829318813e-5, 1166, 17, 1.23936301, 88.94779339200001)
