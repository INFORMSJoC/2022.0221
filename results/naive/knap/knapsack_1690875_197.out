2023/11/29
gurobi is now 11.0.0
previous version was 10.0.2
solving instance knapsack 20 10 divexp
The latest version of Julia in the `1.10` channel is 1.10.6+0.x64.linux.gnu. You currently have `1.10.5+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.10.6+0.x64.linux.gnu and update the `1.10` channel to that version.
ERROR: LoadError: MethodError: no method matching zero(::Type{Vector{Float64}})

Closest candidates are:
  zero(!Matched::Type{Union{}}, Any...)
   @ Base number.jl:310
  zero(!Matched::Type{LibGit2.GitHash})
   @ LibGit2 ~/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/share/julia/stdlib/v1.10/LibGit2/src/oid.jl:221
  zero(!Matched::Type{Dates.Date})
   @ Dates ~/.julia/juliaup/julia-1.10.5+0.x64.linux.gnu/share/julia/stdlib/v1.10/Dates/src/types.jl:439
  ...

Stacktrace:
  [1] reduce_empty(::typeof(+), ::Type{Vector{Float64}})
    @ Base ./reduce.jl:343
  [2] reduce_empty(::typeof(Base.add_sum), ::Type{Vector{Float64}})
    @ Base ./reduce.jl:352
  [3] mapreduce_empty
    @ ./reduce.jl:372
  [4] reduce_empty(op::Base.MappingRF{typeof(identity), typeof(Base.add_sum)}, ::Type{Vector{Float64}})
    @ Base ./reduce.jl:361
  [5] reduce_empty_iter
    @ ./reduce.jl:384 [inlined]
  [6] mapreduce_empty_iter(f::Function, op::Function, itr::Vector{Vector{Float64}}, ItrEltype::Base.HasEltype)
    @ Base ./reduce.jl:380
  [7] _mapreduce(f::typeof(identity), op::typeof(Base.add_sum), ::IndexLinear, A::Vector{Vector{Float64}})
    @ Base ./reduce.jl:432
  [8] _mapreduce_dim
    @ ./reducedim.jl:365 [inlined]
  [9] mapreduce
    @ ./reducedim.jl:357 [inlined]
 [10] _sum
    @ ./reducedim.jl:1015 [inlined]
 [11] _sum
    @ ./reducedim.jl:1014 [inlined]
 [12] sum(a::Vector{Vector{Float64}})
    @ Base ./reducedim.jl:1010
 [13] ORourke(pts::Vector{LinA.dataError})
    @ LinA ~/git/LinA.jl/src/oRourke.jl:36
 [14] ExactPiece(start::Float64, maximum::Float64, lower::LinA.var"#f#34"{LinA.var"#18#19"{LinA.var"#20#21"{IterativePWLB.var"#165#168"{IterativePWLB.var"#164#167"{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}}}, Float64, Float64, Float64}}, upper::LinA.Shift{LinA.Scale{LinA.var"#f#34"{LinA.var"#18#19"{LinA.var"#20#21"{IterativePWLB.var"#165#168"{IterativePWLB.var"#164#167"{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}}}, Float64, Float64, Float64}}, Float64}, Float64})
    @ LinA ~/git/LinA.jl/src/exactPiece.jl:37
 [15] ExactLin(expr_fct::LinA.var"#18#19"{LinA.var"#20#21"{IterativePWLB.var"#165#168"{IterativePWLB.var"#164#167"{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}}}, Float64, Float64, Float64}, x1::Float64, x2::Float64, e::Relative; bounding::Over, ConcavityChanges::Vector{Float64})
    @ LinA ~/git/LinA.jl/src/exactMethod.jl:31
 [16] ScaledLinearize(f::IterativePWLB.var"#165#168"{IterativePWLB.var"#164#167"{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}}, x1::Float64, x2::Float64, e::Relative, LinAlg::Type{ExactLin}, bounding::Under, concavity_changes::Vector{Float64})
    @ LinA ~/git/LinA.jl/src/linearizeDispatch.jl:127
 [17] #Linearize#63
    @ ~/git/LinA.jl/src/linearizeDispatch.jl:85 [inlined]
 [18] construct_linear_expressions(exprs1::Matrix{Any}, exprs2::Vector{Any}, ptype::Symbol, pdata::IterativePWLB.KnapData, eps0::Float64, cost_type::Symbol, linasolver::Type{ExactLin}, fixed_charge::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/util.jl:129
 [19] ipwlb(exprs::Matrix{Expr}, expr1::Vector{Any}, expr2::Vector{Any}, functions::Matrix{Any}, func1::Vector{Any}, func2::Vector{Any}, eps::Float64, ptype::Symbol, pdata::IterativePWLB.KnapData, with_solver::Type, with_solver_parameters::typeof(IterativePWLB.gurobi_parameters), with_lina_solver::Type, eps0::Float64, tilim::Int64, printon::Bool, stepdiv::Float64, dynstep::Bool, activeUpdateLargePwlf::Bool, warmstartMILP::Bool, miptype::Symbol, with_fixed_charge::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/ipwlb.jl:31
 [20] solve_knap(filename::String, are_vars_integer::Bool, eps::Float64, init::Float64; Flim::Float64, with_solver::Type, with_solver_parameters::Function, with_cost_type::Symbol, with_lina_solver::Type, tilim::Int64, printon::Bool, stepdiv::Float64, dynstep::Bool, activeUpdateLargePwlf::Bool, warmstartMILP::Bool, miptype::Symbol, with_fixed_charge::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/solve.jl:79
 [21] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/naive/knap/script.jl:8
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/naive/knap/script.jl:8
expr 1, 1 = 51.336084 / (1 + 18.817479 * exp(-0.178869 * (x + -23.289957)))
expr 1, 2 = 12.816882 / (1 + 24.635565 * exp(-0.152834 * (x + -28.787755)))
expr 1, 3 = 74.13856 / (1 + 62.824909 * exp(-0.152425 * (x + -81.361903)))
expr 1, 4 = 36.799903 / (1 + 16.971782 * exp(-0.189416 * (x + -14.72228)))
expr 1, 5 = 55.692081 / (1 + 15.973518 * exp(-0.184057 * (x + -16.980388)))
expr 1, 6 = 55.204934 / (1 + 83.577895 * exp(-0.183555 * (x + -49.307558)))
expr 1, 7 = 62.098479 / (1 + 49.651251 * exp(-0.167043 * (x + -10.22593)))
expr 1, 8 = 6.840802 / (1 + 43.688922 * exp(-0.131638 * (x + -7.662827)))
expr 1, 9 = 41.089501 / (1 + 28.130455 * exp(-0.136571 * (x + -56.774163)))
expr 1, 10 = 15.802541 / (1 + 94.865529 * exp(-0.132769 * (x + -22.669598)))
expr 1, 11 = 93.232418 / (1 + 28.888088 * exp(-0.155268 * (x + -18.62753)))
expr 1, 12 = 31.177613 / (1 + 24.138408 * exp(-0.149914 * (x + -52.534224)))
expr 1, 13 = 14.31391 / (1 + 73.274016 * exp(-0.112568 * (x + -30.236331)))
expr 1, 14 = 67.149722 / (1 + 95.965274 * exp(-0.165397 * (x + -8.373642)))
expr 1, 15 = 72.210244 / (1 + 5.575866 * exp(-0.181322 * (x + -14.606909)))
expr 1, 16 = 97.898941 / (1 + 61.518942 * exp(-0.191734 * (x + -8.572039)))
expr 1, 17 = 3.795512 / (1 + 92.874202 * exp(-0.157669 * (x + -54.526954)))
expr 1, 18 = 88.693477 / (1 + 6.282841 * exp(-0.160803 * (x + -0.795897)))
expr 1, 19 = 45.544809 / (1 + 63.361677 * exp(-0.144481 * (x + -56.417641)))
expr 1, 20 = 83.123665 / (1 + 83.685169 * exp(-0.180921 * (x + -38.764079)))
(-1.0 * 51.336084) / (1 + 18.817479 * exp(-0.178869 * (x + -23.289957)))
(-1.0 * 12.816882) / (1 + 24.635565 * exp(-0.152834 * (x + -28.787755)))
(-1.0 * 74.13856) / (1 + 62.824909 * exp(-0.152425 * (x + -81.361903)))
(-1.0 * 36.799903) / (1 + 16.971782 * exp(-0.189416 * (x + -14.72228)))
(-1.0 * 55.692081) / (1 + 15.973518 * exp(-0.184057 * (x + -16.980388)))
(-1.0 * 55.204934) / (1 + 83.577895 * exp(-0.183555 * (x + -49.307558)))
(-1.0 * 62.098479) / (1 + 49.651251 * exp(-0.167043 * (x + -10.22593)))
(-1.0 * 6.840802) / (1 + 43.688922 * exp(-0.131638 * (x + -7.662827)))
(-1.0 * 41.089501) / (1 + 28.130455 * exp(-0.136571 * (x + -56.774163)))
(-1.0 * 15.802541) / (1 + 94.865529 * exp(-0.132769 * (x + -22.669598)))
(-1.0 * 93.232418) / (1 + 28.888088 * exp(-0.155268 * (x + -18.62753)))
(-1.0 * 31.177613) / (1 + 24.138408 * exp(-0.149914 * (x + -52.534224)))
(-1.0 * 14.31391) / (1 + 73.274016 * exp(-0.112568 * (x + -30.236331)))
(-1.0 * 67.149722) / (1 + 95.965274 * exp(-0.165397 * (x + -8.373642)))
(-1.0 * 72.210244) / (1 + 5.575866 * exp(-0.181322 * (x + -14.606909)))
(-1.0 * 97.898941) / (1 + 61.518942 * exp(-0.191734 * (x + -8.572039)))
(-1.0 * 3.795512) / (1 + 92.874202 * exp(-0.157669 * (x + -54.526954)))
(-1.0 * 88.693477) / (1 + 6.282841 * exp(-0.160803 * (x + -0.795897)))
(-1.0 * 45.544809) / (1 + 63.361677 * exp(-0.144481 * (x + -56.417641)))
(-1.0 * 83.123665) / (1 + 83.685169 * exp(-0.180921 * (x + -38.764079)))
