solving instance mcf arcs c25_100_30_V_T_5 3 6 log
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 0.8 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 853063.51      150 21.637603
NLP0014I             2      INFEAS 44.918726      133 16.095031
Loaded instance "/tmp/jl_VxuNqE/model.nl"
Constraints:         1100
Variables:           3350 (125 integer)
Auxiliaries:          231 (0 integer)

Coin0506I Presolve 1443 (-329) rows, 3161 (-420) columns and 13202 (-813) elements
Clp0006I 0  Obj 111964.89 Primal inf 1615.1612 (63)
Clp0006I 103  Obj 154807.46 Primal inf 4034.941 (105)
Clp0006I 206  Obj 193637.85 Primal inf 5181.2807 (141)
Clp0006I 309  Obj 246322.43 Primal inf 6963.4505 (167)
Clp0006I 412  Obj 300541.51 Primal inf 7912.4903 (193)
Clp0006I 515  Obj 371769.11 Primal inf 21648.298 (223)
Clp0006I 618  Obj 417850.84 Primal inf 7970.7096 (164)
Clp0006I 721  Obj 441912.5 Primal inf 1132.4671 (73)
Clp0006I 792  Obj 448095.36
Clp0000I Optimal - objective value 448095.36
Clp0032I Optimal objective 448095.3599 - 792 iterations time 0.072, Presolve 0.01
Clp0000I Optimal - objective value 448095.36
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 448095.36
Optimality Based BT: 0 improved bounds
Probing: 1 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 1 added rows had average density of 2
Cbc0013I At root node, 1 cuts changed objective from 448095.36 to 463452.56 in 2 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (267.48 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 1 improved bounds
Optimality Based BT: 1 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 47 on tree, 1e+50 best solution, best possible 464618.36 (2413.23 seconds)
Cbc0010I After 200 nodes, 83 on tree, 1e+50 best solution, best possible 464618.36 (2421.89 seconds)
Cbc0010I After 300 nodes, 120 on tree, 1e+50 best solution, best possible 464618.36 (2432.10 seconds)
Cbc0010I After 400 nodes, 156 on tree, 1e+50 best solution, best possible 464618.36 (2441.76 seconds)
Cbc0010I After 500 nodes, 198 on tree, 1e+50 best solution, best possible 464618.36 (2451.20 seconds)
Cbc0010I After 600 nodes, 247 on tree, 1e+50 best solution, best possible 464618.36 (2459.70 seconds)
Cbc0010I After 700 nodes, 296 on tree, 1e+50 best solution, best possible 464618.36 (2467.68 seconds)
Cbc0010I After 800 nodes, 342 on tree, 1e+50 best solution, best possible 464618.36 (2474.88 seconds)
Cbc0010I After 900 nodes, 390 on tree, 1e+50 best solution, best possible 464618.36 (2481.34 seconds)
Cbc0010I After 1000 nodes, 437 on tree, 1e+50 best solution, best possible 464618.36 (2487.23 seconds)
Cbc0010I After 1100 nodes, 485 on tree, 1e+50 best solution, best possible 464618.36 (2492.62 seconds)
Cbc0010I After 1200 nodes, 535 on tree, 1e+50 best solution, best possible 464618.36 (2497.86 seconds)
Cbc0010I After 1300 nodes, 575 on tree, 1e+50 best solution, best possible 464618.36 (2504.49 seconds)
Cbc0010I After 1400 nodes, 609 on tree, 1e+50 best solution, best possible 464618.36 (2511.15 seconds)
Cbc0010I After 1500 nodes, 649 on tree, 1e+50 best solution, best possible 464618.36 (2517.69 seconds)
Cbc0010I After 1600 nodes, 669 on tree, 1e+50 best solution, best possible 464618.36 (2524.12 seconds)
Cbc0010I After 1700 nodes, 693 on tree, 1e+50 best solution, best possible 464618.36 (2529.70 seconds)
Cbc0010I After 1800 nodes, 718 on tree, 1e+50 best solution, best possible 464618.36 (2535.77 seconds)
Cbc0010I After 1900 nodes, 757 on tree, 1e+50 best solution, best possible 464618.36 (2541.19 seconds)
Cbc0010I After 2000 nodes, 784 on tree, 1e+50 best solution, best possible 464618.36 (2547.68 seconds)
Cbc0010I After 2100 nodes, 805 on tree, 1e+50 best solution, best possible 464618.36 (2553.80 seconds)
Cbc0010I After 2200 nodes, 849 on tree, 1e+50 best solution, best possible 464618.36 (2559.19 seconds)
Cbc0010I After 2300 nodes, 887 on tree, 1e+50 best solution, best possible 464618.36 (2564.05 seconds)
Cbc0010I After 2400 nodes, 921 on tree, 1e+50 best solution, best possible 464618.36 (2569.86 seconds)
Cbc0010I After 2500 nodes, 947 on tree, 1e+50 best solution, best possible 464618.36 (2575.04 seconds)
Cbc0010I After 2600 nodes, 979 on tree, 1e+50 best solution, best possible 464618.36 (2579.58 seconds)
Cbc0010I After 2700 nodes, 1009 on tree, 1e+50 best solution, best possible 464618.36 (2587.08 seconds)
Cbc0010I After 2800 nodes, 1037 on tree, 1e+50 best solution, best possible 464618.36 (2594.47 seconds)
Cbc0010I After 2900 nodes, 1065 on tree, 1e+50 best solution, best possible 464618.36 (2600.46 seconds)
Cbc0010I After 3000 nodes, 1092 on tree, 1e+50 best solution, best possible 464618.36 (2610.76 seconds)
Couenne: new cutoff value 9.4044665864e+05 (2656.19 seconds)
Cbc0004I Integer solution of 940446.66 found after 209407 iterations and 3004 nodes (2612.28 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 1 improved bounds
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 940446.66 (best possible 464618.36), took 209598 iterations and 3008 nodes (3556.45 seconds)
Cbc0035I Maximum depth 1501, 0 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       1772
Linearization cuts added in total:           1772  (separation time: 0.029997s)
Total solve time:                         3556.76s (3556.76s in branch-and-bound)
Lower bound:                               464618
Upper bound:                               940447  (gap: 102.41%)
Branch-and-bound nodes:                      3008
Stats: /tmp/jl_VxuNqE/model.nl 3350 [var]  125 [int] 1100 [con]  231 [aux]   1772 [root]     1772 [tot] 0.029997 [sep]  3556.76 [time]  3556.76 [bb]         4.646184e+05 [lower]         9.404467e+05 [upper]    3008 [nodes]
Performance of                           FBBT:	    32.9069s,     3064 runs. fix:   0.378458 shrnk:   0.204978 ubd:          0 2ubd:         29 infeas:          0
Performance of                           OBBT:	    651.974s,        8 runs. fix:          0 shrnk:   0.129286 ubd:          0 2ubd:         29 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/FEKLB/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/FEKLB/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/FEKLB/src/objective.jl:78
 [11] nl_mcf(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; restrict_to_commodities::Int64, solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1332
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcf_arcs/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcf_arcs/script.jl:18
