solving instance mcnd nodes c25_100_10_V_L_5 3 6 sinabc3
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 0.3 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 1748.2067      912 78.436164
NLP0014I             2      INFEAS 2.1247433       63 3.943989
Loaded instance "/tmp/jl_ISQ1b7/model.nl"
Constraints:         1625
Variables:           1275 (125 integer)
Auxiliaries:         1211 (0 integer)

Coin0506I Presolve 1804 (-122) rows, 1278 (-1208) columns and 7935 (-1441) elements
Clp0006I 0  Obj 200 Primal inf 177.3645 (97)
Clp0006I 111  Obj 200 Primal inf 553.24814 (168)
Clp0006I 222  Obj 404.46067 Primal inf 620.24648 (203)
Clp0006I 333  Obj 739.13412 Primal inf 606.53671 (228)
Clp0006I 444  Obj 1043.3768 Primal inf 368.50258 (190)
Clp0006I 555  Obj 1136.1043 Primal inf 2275.8976 (450)
Clp0006I 664  Obj 1201.968 Primal inf 812.69133 (531)
Clp0006I 760  Obj 1230.7558 Primal inf 93.696736 (245)
Clp0006I 849  Obj 1237.1383 Primal inf 64.004105 (155)
Clp0006I 933  Obj 1238.5188 Primal inf 0.62343553 (25)
Clp0006I 945  Obj 1238.5433
Clp0000I Optimal - objective value 1238.5433
Clp0032I Optimal objective 1238.543284 - 945 iterations time 0.122, Presolve 0.01
Clp0000I Optimal - objective value 1238.5433
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 1238.5433
Optimality Based BT: 1 improved bounds
Probing: 2 improved bounds
NLP Heuristic: no solution.
Cbc0031I 26 added rows had average density of 2
Cbc0013I At root node, 26 cuts changed objective from 1238.5433 to 1266.3231 in 15 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 246 row cuts average 2.0 elements, 57 column cuts (57 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (87.08 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 1 improved bounds
Optimality Based BT: 1 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 41 on tree, 1e+50 best solution, best possible 1273.9833 (577.43 seconds)
Cbc0010I After 200 nodes, 88 on tree, 1e+50 best solution, best possible 1273.9833 (583.43 seconds)
Cbc0010I After 300 nodes, 122 on tree, 1e+50 best solution, best possible 1273.9833 (588.20 seconds)
Cbc0010I After 400 nodes, 153 on tree, 1e+50 best solution, best possible 1273.9833 (592.35 seconds)
Cbc0010I After 500 nodes, 177 on tree, 1e+50 best solution, best possible 1273.9833 (596.59 seconds)
Couenne: new cutoff value 2.1759989994e+03 (684.064 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 1 improved bounds
Cbc0010I After 600 nodes, 224 on tree, 1e+50 best solution, best possible 1306.7122 (905.82 seconds)
Cbc0010I After 700 nodes, 268 on tree, 1e+50 best solution, best possible 1306.7122 (913.06 seconds)
Couenne: new cutoff value 1.4109218289e+03 (1003.14 seconds)
Cbc0004I Integer solution of 1410.9218 found after 51767 iterations and 790 nodes (918.22 seconds)
Cbc0010I After 800 nodes, 60 on tree, 1410.9218 best solution, best possible 1308.6846 (939.22 seconds)
Couenne: new cutoff value 1.4066765402e+03 (1035.88 seconds)
Cbc0004I Integer solution of 1406.6765 found after 61476 iterations and 865 nodes (950.96 seconds)
Cbc0010I After 900 nodes, 51 on tree, 1406.6765 best solution, best possible 1328.5376 (1002.83 seconds)
Cbc0010I After 1000 nodes, 67 on tree, 1406.6765 best solution, best possible 1346.4581 (1080.37 seconds)
Cbc0010I After 1100 nodes, 80 on tree, 1406.6765 best solution, best possible 1354.5833 (1271.85 seconds)
Cbc0010I After 1200 nodes, 96 on tree, 1406.6765 best solution, best possible 1360.2543 (1343.01 seconds)
Cbc0010I After 1300 nodes, 97 on tree, 1406.6765 best solution, best possible 1366.9002 (1359.59 seconds)
Cbc0010I After 1400 nodes, 93 on tree, 1406.6765 best solution, best possible 1371.0668 (1371.06 seconds)
Optimality Based BT: 1 improved bounds
Cbc0010I After 1500 nodes, 77 on tree, 1406.6765 best solution, best possible 1377.353 (1402.40 seconds)
Cbc0010I After 1600 nodes, 62 on tree, 1406.6765 best solution, best possible 1382.2162 (1412.01 seconds)
Cbc0010I After 1700 nodes, 33 on tree, 1406.6765 best solution, best possible 1390.4188 (1420.53 seconds)
Cbc0001I Search completed - best objective 1406.676540236145, took 165057 iterations and 1766 nodes (1424.53 seconds)
Cbc0035I Maximum depth 283, 3267 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       1926
Linearization cuts added in total:           1926  (separation time: 0.022718s)
Total solve time:                         1424.67s (1424.67s in branch-and-bound)
Lower bound:                              1406.68
Upper bound:                              1406.68  (gap: 0.00%)
Branch-and-bound nodes:                      1766
Stats: /tmp/jl_ISQ1b7/model.nl 1275 [var]  125 [int] 1625 [con] 1211 [aux]   1926 [root]     1926 [tot] 0.022718 [sep]  1424.67 [time]  1424.67 [bb]         1.406677e+03 [lower]         1.406677e+03 [upper]    1766 [nodes]
Performance of                           FBBT:	    22.1221s,     2222 runs. fix:    6.40917 shrnk:    4.56242 ubd:          0 2ubd:          0 infeas:         26
Performance of                           OBBT:	    238.274s,        8 runs. fix:   0.518519 shrnk:    2.63605 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcnd(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1192
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_nodes/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_nodes/script.jl:18
