solving instance mcnd nodes c43 3 6 log
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reading problem: 0.0 seconds
Reformulating problem: 16.0 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 59327.902      267 343.63194
NLP0014I             2      INFEAS 594      118 113.52763
Loaded instance "/tmp/jl_r7e7CI/model.nl"
Constraints:        13502
Variables:          12408 (314 integer)
Auxiliaries:        12135 (0 integer)

Coin0506I Presolve 13582 (-61) rows, 12388 (-12155) columns and 83756 (-12489) elements
Clp0006I 0  Obj 0 Primal inf 6806.5607 (80) Dual inf 1.1178361e+13 (1133)
Clp0006I 293  Obj 58219.154 Dual inf 8222.0811 (579)
Clp0006I 587  Obj 55796.849 Dual inf 9994.5543 (1039)
Clp0006I 881  Obj 50664.18 Dual inf 11766.161 (1084)
Clp0006I 1174  Obj 48408.541 Dual inf 15999.131 (1926)
Clp0006I 1466  Obj 46998.417 Dual inf 8634.2736 (1050)
Clp0006I 1758  Obj 45579.904 Dual inf 21640.902 (1880)
Clp0006I 2050  Obj 45400.649 Dual inf 287.90622 (244)
Clp0006I 2179  Obj 45352.799
Clp0000I Optimal - objective value 45352.799
Clp0032I Optimal objective 45352.79941 - 2179 iterations time 0.672, Presolve 0.08
Clp0000I Optimal - objective value 45352.799
NLP Heuristic: NLP0014I             3      INFEAS 309       88 103.69007
no solution.
Clp0000I Optimal - objective value 45352.799
Optimality Based BT: 3 improved bounds
Probing: 0 improved bounds
Cbc0013I At root node, 0 cuts changed objective from 45352.799 to 45352.799 in 1 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 0 row cuts average 0.0 elements, 1 column cuts (1 active)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 45352.799), took 0 iterations and 0 nodes (3008.94 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:      13643
Linearization cuts added in total:          13643  (separation time: 1.62151s)
Total solve time:                         3009.61s (3009.61s in branch-and-bound)
Lower bound:                              45352.8
Upper bound:                                  inf  (gap: --)
Branch-and-bound nodes:                         0
Stats: /tmp/jl_r7e7CI/model.nl 12408 [var]  314 [int] 13502 [con] 12135 [aux]  13643 [root]    13643 [tot] 1.62151 [sep]  3009.61 [time]  3009.65 [bb]         4.535280e+04 [lower]         1.000000e+50 [upper]       0 [nodes]
Performance of                           FBBT:	    3.09374s,        4 runs. fix:          0 shrnk:    329.077 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    969.954s,        1 runs. fix:          0 shrnk:    7.55328 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcnd(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1192
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_nodes/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_nodes/script.jl:18
