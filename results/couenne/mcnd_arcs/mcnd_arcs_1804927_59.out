solving instance mcnd arcs c25_100_10_F_L_5 3 6 sinabc3
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 0.7 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1      INFEAS 3.7420587e-14     2400 232.70464
Loaded instance "/tmp/jl_x3ECv5/model.nl"
Constraints:         1700
Variables:           1350 (125 integer)
Auxiliaries:          821 (0 integer)

Coin0506I Presolve 2675 (-220) rows, 1500 (-671) columns and 9700 (-1080) elements
Clp0006I 0  Obj 0 Primal inf 529.78975 (220)
Clp0006I 128  Obj 1.0723025e-15 Primal inf 873.20101 (264)
Clp0006I 256  Obj 2370.7051 Primal inf 1637.5106 (273)
Clp0006I 384  Obj 3556.2141 Primal inf 739.00003 (299)
Clp0006I 512  Obj 6350.8695 Primal inf 2347.9611 (369)
Clp0006I 640  Obj 7324.4368 Primal inf 5710.7265 (500)
Clp0006I 768  Obj 8556.4308 Primal inf 1196.6859 (302)
Clp0006I 896  Obj 9744.9477 Primal inf 2575.1353 (402)
Clp0006I 1008  Obj 10483.282 Primal inf 2503.5146 (507)
Clp0006I 1119  Obj 10846.999 Primal inf 3066.8507 (520)
Clp0006I 1228  Obj 11155.692 Primal inf 572.23555 (344)
Clp0006I 1324  Obj 11397.162 Primal inf 1790.7238 (502)
Clp0006I 1414  Obj 11567.475 Primal inf 3825.6046 (647)
Clp0006I 1512  Obj 11673.69 Primal inf 456.67107 (303)
Clp0006I 1621  Obj 11699.587 Primal inf 1.0009515 (7)
Clp0006I 1624  Obj 11699.635
Clp0000I Optimal - objective value 11699.635
Clp0032I Optimal objective 11699.63479 - 1624 iterations time 0.362, Presolve 0.01
Clp0000I Optimal - objective value 11699.635
NLP Heuristic: NLP0014I             2      INFEAS 7      366 19.127647
no solution.
Clp0000I Optimal - objective value 11699.635
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 74 added rows had average density of 2
Cbc0013I At root node, 74 cuts changed objective from 11699.635 to 11976.085 in 20 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 781 row cuts average 2.0 elements, 760 column cuts (760 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (67.92 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 47 on tree, 1e+50 best solution, best possible 12544.321 (622.70 seconds)
Cbc0010I After 200 nodes, 94 on tree, 1e+50 best solution, best possible 12544.321 (630.60 seconds)
Cbc0010I After 300 nodes, 144 on tree, 1e+50 best solution, best possible 12544.321 (637.41 seconds)
Cbc0010I After 400 nodes, 194 on tree, 1e+50 best solution, best possible 12544.321 (643.78 seconds)
Cbc0010I After 500 nodes, 244 on tree, 1e+50 best solution, best possible 12544.321 (649.00 seconds)
Cbc0010I After 600 nodes, 294 on tree, 1e+50 best solution, best possible 12544.321 (653.93 seconds)
Couenne: new cutoff value 2.3120834726e+04 (891.642 seconds)
Cbc0004I Integer solution of 23120.835 found after 49017 iterations and 683 nodes (657.86 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 700 nodes, 163 on tree, 23120.835 best solution, best possible 12553.242 (906.80 seconds)
Cbc0010I After 800 nodes, 211 on tree, 23120.835 best solution, best possible 12553.242 (925.41 seconds)
Cbc0010I After 900 nodes, 253 on tree, 23120.835 best solution, best possible 12553.242 (936.55 seconds)
Cbc0010I After 1000 nodes, 299 on tree, 23120.835 best solution, best possible 12553.242 (948.09 seconds)
Cbc0010I After 1100 nodes, 347 on tree, 23120.835 best solution, best possible 12553.242 (957.78 seconds)
Cbc0010I After 1200 nodes, 391 on tree, 23120.835 best solution, best possible 12553.242 (964.53 seconds)
Cbc0010I After 1300 nodes, 427 on tree, 23120.835 best solution, best possible 12553.242 (971.14 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 1400 nodes, 471 on tree, 23120.835 best solution, best possible 12703.77 (1001.62 seconds)
Cbc0010I After 1500 nodes, 516 on tree, 23120.835 best solution, best possible 12741.213 (1035.33 seconds)
Cbc0010I After 1600 nodes, 564 on tree, 23120.835 best solution, best possible 12741.213 (1047.01 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 1700 nodes, 611 on tree, 23120.835 best solution, best possible 12757.76 (1468.22 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 1800 nodes, 659 on tree, 23120.835 best solution, best possible 12761.616 (1538.31 seconds)
Cbc0010I After 1900 nodes, 703 on tree, 23120.835 best solution, best possible 12919.34 (1559.48 seconds)
Cbc0010I After 2000 nodes, 747 on tree, 23120.835 best solution, best possible 12942.124 (1582.51 seconds)
Cbc0010I After 2100 nodes, 795 on tree, 23120.835 best solution, best possible 12942.124 (1601.07 seconds)
Cbc0010I After 2200 nodes, 841 on tree, 23120.835 best solution, best possible 12949.926 (1630.61 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 2300 nodes, 884 on tree, 23120.835 best solution, best possible 12986.235 (2014.91 seconds)
Cbc0010I After 2400 nodes, 932 on tree, 23120.835 best solution, best possible 13023.83 (2036.21 seconds)
Cbc0010I After 2500 nodes, 978 on tree, 23120.835 best solution, best possible 13051.598 (2102.83 seconds)
Cbc0010I After 2600 nodes, 1025 on tree, 23120.835 best solution, best possible 13070.345 (2124.99 seconds)
Cbc0010I After 2700 nodes, 1071 on tree, 23120.835 best solution, best possible 13080.505 (2168.63 seconds)
Cbc0010I After 2800 nodes, 1118 on tree, 23120.835 best solution, best possible 13080.505 (2241.73 seconds)
Cbc0010I After 2900 nodes, 1162 on tree, 23120.835 best solution, best possible 13150.389 (2276.81 seconds)
Cbc0010I After 3000 nodes, 1204 on tree, 23120.835 best solution, best possible 13156.809 (2364.35 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 3100 nodes, 1245 on tree, 23120.835 best solution, best possible 13159.998 (2400.43 seconds)
Cbc0010I After 3200 nodes, 1290 on tree, 23120.835 best solution, best possible 13159.998 (2419.48 seconds)
Cbc0010I After 3300 nodes, 1333 on tree, 23120.835 best solution, best possible 13165.749 (2440.17 seconds)
Cbc0010I After 3400 nodes, 1378 on tree, 23120.835 best solution, best possible 13203.049 (2462.00 seconds)
Cbc0010I After 3500 nodes, 1424 on tree, 23120.835 best solution, best possible 13223.714 (2482.74 seconds)
Cbc0010I After 3600 nodes, 1468 on tree, 23120.835 best solution, best possible 13224.395 (2500.45 seconds)
Cbc0010I After 3700 nodes, 1510 on tree, 23120.835 best solution, best possible 13229.998 (2567.91 seconds)
Cbc0010I After 3800 nodes, 1553 on tree, 23120.835 best solution, best possible 13236.287 (2667.77 seconds)
Cbc0010I After 3900 nodes, 1597 on tree, 23120.835 best solution, best possible 13238.87 (2683.80 seconds)
Cbc0010I After 4000 nodes, 1639 on tree, 23120.835 best solution, best possible 13269.341 (2756.89 seconds)
Cbc0010I After 4100 nodes, 1686 on tree, 23120.835 best solution, best possible 13278.389 (2775.25 seconds)
Cbc0010I After 4200 nodes, 1735 on tree, 23120.835 best solution, best possible 13278.389 (2791.86 seconds)
Cbc0010I After 4300 nodes, 1781 on tree, 23120.835 best solution, best possible 13281.16 (2829.31 seconds)
Cbc0010I After 4400 nodes, 1824 on tree, 23120.835 best solution, best possible 13281.16 (2839.07 seconds)
Cbc0010I After 4500 nodes, 1863 on tree, 23120.835 best solution, best possible 13281.16 (2849.33 seconds)
Cbc0010I After 4600 nodes, 1907 on tree, 23120.835 best solution, best possible 13281.16 (2857.79 seconds)
Cbc0010I After 4700 nodes, 1949 on tree, 23120.835 best solution, best possible 13281.16 (2863.77 seconds)
Cbc0010I After 4800 nodes, 1995 on tree, 23120.835 best solution, best possible 13281.16 (2869.26 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 4900 nodes, 2039 on tree, 23120.835 best solution, best possible 13288.114 (2963.19 seconds)
Cbc0010I After 5000 nodes, 2084 on tree, 23120.835 best solution, best possible 13289.415 (2983.82 seconds)
Cbc0010I After 5100 nodes, 2130 on tree, 23120.835 best solution, best possible 13292.692 (3002.82 seconds)
Cbc0010I After 5200 nodes, 2169 on tree, 23120.835 best solution, best possible 13305.074 (3030.53 seconds)
Cbc0010I After 5300 nodes, 2214 on tree, 23120.835 best solution, best possible 13305.074 (3041.42 seconds)
Cbc0010I After 5400 nodes, 2256 on tree, 23120.835 best solution, best possible 13305.074 (3049.94 seconds)
Cbc0010I After 5500 nodes, 2298 on tree, 23120.835 best solution, best possible 13305.074 (3056.71 seconds)
Cbc0010I After 5600 nodes, 2334 on tree, 23120.835 best solution, best possible 13305.074 (3062.18 seconds)
Cbc0010I After 5700 nodes, 2376 on tree, 23120.835 best solution, best possible 13307.615 (3070.54 seconds)
Cbc0010I After 5800 nodes, 2416 on tree, 23120.835 best solution, best possible 13307.615 (3084.60 seconds)
Cbc0010I After 5900 nodes, 2459 on tree, 23120.835 best solution, best possible 13311.504 (3121.80 seconds)
Cbc0010I After 6000 nodes, 2506 on tree, 23120.835 best solution, best possible 13311.504 (3131.27 seconds)
Cbc0010I After 6100 nodes, 2552 on tree, 23120.835 best solution, best possible 13311.504 (3139.65 seconds)
Cbc0010I After 6200 nodes, 2595 on tree, 23120.835 best solution, best possible 13311.504 (3147.20 seconds)
Cbc0010I After 6300 nodes, 2639 on tree, 23120.835 best solution, best possible 13311.504 (3153.22 seconds)
Cbc0010I After 6400 nodes, 2685 on tree, 23120.835 best solution, best possible 13311.504 (3159.24 seconds)
Cbc0010I After 6500 nodes, 2728 on tree, 23120.835 best solution, best possible 13311.504 (3165.24 seconds)
Cbc0010I After 6600 nodes, 2767 on tree, 23120.835 best solution, best possible 13312.547 (3180.50 seconds)
Cbc0010I After 6700 nodes, 2813 on tree, 23120.835 best solution, best possible 13317.378 (3200.14 seconds)
Cbc0010I After 6800 nodes, 2861 on tree, 23120.835 best solution, best possible 13317.814 (3218.37 seconds)
Cbc0010I After 6900 nodes, 2904 on tree, 23120.835 best solution, best possible 13320.791 (3314.70 seconds)
Cbc0010I After 7000 nodes, 2940 on tree, 23120.835 best solution, best possible 13328.171 (3334.01 seconds)
Cbc0010I After 7100 nodes, 2982 on tree, 23120.835 best solution, best possible 13328.572 (3363.02 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 23120.835 (best possible 13328.572), took 1455820 iterations and 7120 nodes (3367.31 seconds)
Cbc0035I Maximum depth 371, 1175 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       2895
Linearization cuts added in total:           2895  (separation time: 0.020893s)
Total solve time:                         3367.88s (3367.88s in branch-and-bound)
Lower bound:                              13328.6
Upper bound:                              23120.8  (gap: 73.46%)
Branch-and-bound nodes:                      7120
Stats: /tmp/jl_x3ECv5/model.nl 1350 [var]  125 [int] 1700 [con]  821 [aux]   2895 [root]     2895 [tot] 0.020893 [sep]  3367.88 [time]  3367.88 [bb]         1.332857e+04 [lower]         2.312083e+04 [upper]    7120 [nodes]
Performance of                           FBBT:	    89.9796s,    12411 runs. fix:  0.0196883 shrnk:  0.0809938 ubd:          0 2ubd:          0 infeas:          1
Performance of                           OBBT:	    83.8176s,       17 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcnd(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1192
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_arcs/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_arcs/script.jl:18
