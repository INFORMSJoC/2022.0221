solving instance mcnd arcs c25_100_30_F_T_5 3 6 log
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 3.5 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1        TIME 0     1848 1805.8132
Loaded instance "/tmp/jl_0lRPhe/model.nl"
Constraints:         4200
Variables:           3350 (125 integer)
Auxiliaries:         1127 (6 integer)

Coin0506I Presolve 4538 (-189) rows, 3349 (-1128) columns and 22133 (-1677) elements
Clp0006I 0  Obj 27904.399 Primal inf 770.58893 (61)
Clp0006I 165  Obj 27904.399 Primal inf 13960.964 (273)
Clp0006I 330  Obj 39490.759 Primal inf 11788.423 (380)
Clp0006I 495  Obj 52487.205 Primal inf 16983.432 (456)
Clp0006I 660  Obj 66248.231 Primal inf 9415.5892 (543)
Clp0006I 825  Obj 81102.82 Primal inf 11800.427 (469)
Clp0006I 990  Obj 95186.913 Primal inf 80774.662 (731)
Clp0006I 1155  Obj 103612.21 Primal inf 18586.102 (567)
Clp0006I 1309  Obj 109910.01 Primal inf 52808.697 (661)
Clp0006I 1468  Obj 113264.34 Primal inf 6688.0626 (387)
Clp0006I 1602  Obj 114156.18 Primal inf 90.91388 (71)
Clp0006I 1648  Obj 114247.81
Clp0000I Optimal - objective value 114247.81
Clp0032I Optimal objective 114247.8104 - 1648 iterations time 0.382, Presolve 0.02
Clp0000I Optimal - objective value 114247.81
NLP Heuristic: NLP0014I             2      INFEAS 34      181 41.978025
no solution.
Clp0000I Optimal - objective value 114247.81
Optimality Based BT: 0 improved bounds
Probing: 2 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 1 added rows had average density of 2
Cbc0013I At root node, 1 cuts changed objective from 114247.81 to 115371.18 in 2 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (196.94 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 49 on tree, 1e+50 best solution, best possible 116159.37 (1655.83 seconds)
Cbc0010I After 200 nodes, 99 on tree, 1e+50 best solution, best possible 116159.37 (1671.65 seconds)
Cbc0010I After 300 nodes, 144 on tree, 1e+50 best solution, best possible 116159.37 (1686.61 seconds)
Cbc0010I After 400 nodes, 188 on tree, 1e+50 best solution, best possible 116159.37 (1699.69 seconds)
Cbc0010I After 500 nodes, 231 on tree, 1e+50 best solution, best possible 116159.37 (1712.57 seconds)
Cbc0010I After 600 nodes, 275 on tree, 1e+50 best solution, best possible 116159.37 (1724.71 seconds)
Cbc0010I After 700 nodes, 321 on tree, 1e+50 best solution, best possible 116159.37 (1736.04 seconds)
Cbc0010I After 800 nodes, 366 on tree, 1e+50 best solution, best possible 116159.37 (1746.07 seconds)
Cbc0010I After 900 nodes, 413 on tree, 1e+50 best solution, best possible 116159.37 (1755.64 seconds)
Cbc0010I After 1000 nodes, 454 on tree, 1e+50 best solution, best possible 116159.37 (1765.27 seconds)
Cbc0010I After 1100 nodes, 496 on tree, 1e+50 best solution, best possible 116159.37 (1774.82 seconds)
Cbc0010I After 1200 nodes, 540 on tree, 1e+50 best solution, best possible 116159.37 (1784.85 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1e+50 (best possible 116159.37), took 84149 iterations and 1249 nodes (1790.03 seconds)
Cbc0035I Maximum depth 624, 0 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       4727
Linearization cuts added in total:           4727  (separation time: 0.062208s)
Total solve time:                         1790.41s (1790.41s in branch-and-bound)
Lower bound:                               116159
Upper bound:                                  inf  (gap: --)
Branch-and-bound nodes:                      1249
Stats: /tmp/jl_0lRPhe/model.nl 3350 [var]  125 [int] 4200 [con] 1127 [aux]   4727 [root]     4727 [tot] 0.062208 [sep]  1790.41 [time]  1790.42 [bb]         1.161594e+05 [lower]         1.000000e+50 [upper]    1249 [nodes]
Performance of                           FBBT:	    36.6901s,     1471 runs. fix:    2.05048 shrnk:   0.601492 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    27.0939s,        6 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcnd(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1192
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_arcs/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_arcs/script.jl:18
