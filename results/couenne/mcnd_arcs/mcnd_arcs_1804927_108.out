solving instance mcnd arcs c25_100_30_V_T_5 3 6 log
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 3.7 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 856981.89      137 92.521754
NLP0014I             2      INFEAS 60.578054      132 48.709461
Loaded instance "/tmp/jl_VchRFB/model.nl"
Constraints:         4200
Variables:           3350 (125 integer)
Auxiliaries:         1127 (3 integer)

Coin0506I Presolve 4506 (-279) rows, 3257 (-1220) columns and 22113 (-1823) elements
Clp0006I 0  Obj 112364.89 Primal inf 697.43478 (65)
Clp0006I 165  Obj 166129.75 Primal inf 2805.8729 (178)
Clp0006I 330  Obj 225202.82 Primal inf 3888.0884 (255)
Clp0006I 495  Obj 340047.6 Primal inf 5955.4313 (276)
Clp0006I 660  Obj 409380.2 Primal inf 2356.9358 (276)
Clp0006I 825  Obj 438475.77 Primal inf 1539.5861 (328)
Clp0006I 990  Obj 451739.68 Primal inf 28.060313 (42)
Clp0006I 1016  Obj 451892.18
Clp0000I Optimal - objective value 451892.18
Clp0032I Optimal objective 451892.179 - 1016 iterations time 0.132, Presolve 0.02
Clp0000I Optimal - objective value 451892.18
NLP Heuristic: NLP0014I             3      INFEAS 18.00002      223 48.907844
no solution.
Clp0000I Optimal - objective value 451892.18
Optimality Based BT: 0 improved bounds
Probing: 1 improved bounds
NLP Heuristic: no solution.
Cbc0031I 1 added rows had average density of 2
Cbc0013I At root node, 1 cuts changed objective from 451892.18 to 467249.37 in 2 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 1 row cuts average 2.0 elements, 1 column cuts (1 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (230.68 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 7 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 50 on tree, 1e+50 best solution, best possible 467816.58 (1532.78 seconds)
Cbc0010I After 200 nodes, 99 on tree, 1e+50 best solution, best possible 467816.58 (1546.69 seconds)
Cbc0010I After 300 nodes, 149 on tree, 1e+50 best solution, best possible 467816.58 (1561.27 seconds)
Cbc0010I After 400 nodes, 199 on tree, 1e+50 best solution, best possible 467816.58 (1576.88 seconds)
Cbc0010I After 500 nodes, 249 on tree, 1e+50 best solution, best possible 467816.58 (1591.65 seconds)
Cbc0010I After 600 nodes, 298 on tree, 1e+50 best solution, best possible 467816.58 (1605.28 seconds)
Cbc0010I After 700 nodes, 348 on tree, 1e+50 best solution, best possible 467816.58 (1618.46 seconds)
Cbc0010I After 800 nodes, 398 on tree, 1e+50 best solution, best possible 467816.58 (1629.03 seconds)
Cbc0010I After 900 nodes, 448 on tree, 1e+50 best solution, best possible 467816.58 (1639.73 seconds)
Cbc0010I After 1000 nodes, 497 on tree, 1e+50 best solution, best possible 467816.58 (1649.23 seconds)
Cbc0010I After 1100 nodes, 543 on tree, 1e+50 best solution, best possible 467816.58 (1658.81 seconds)
Cbc0010I After 1200 nodes, 585 on tree, 1e+50 best solution, best possible 467816.58 (1669.36 seconds)
Cbc0010I After 1300 nodes, 624 on tree, 1e+50 best solution, best possible 467816.58 (1679.58 seconds)
Cbc0010I After 1400 nodes, 667 on tree, 1e+50 best solution, best possible 467816.58 (1690.31 seconds)
Cbc0010I After 1500 nodes, 698 on tree, 1e+50 best solution, best possible 467816.58 (1700.75 seconds)
Cbc0010I After 1600 nodes, 733 on tree, 1e+50 best solution, best possible 467816.58 (1710.60 seconds)
Cbc0010I After 1700 nodes, 759 on tree, 1e+50 best solution, best possible 467816.58 (1719.32 seconds)
Cbc0010I After 1800 nodes, 774 on tree, 1e+50 best solution, best possible 467816.58 (1728.35 seconds)
Cbc0010I After 1900 nodes, 798 on tree, 1e+50 best solution, best possible 467816.58 (1737.26 seconds)
Cbc0010I After 2000 nodes, 823 on tree, 1e+50 best solution, best possible 467816.58 (1747.02 seconds)
Cbc0010I After 2100 nodes, 835 on tree, 1e+50 best solution, best possible 467816.58 (1757.73 seconds)
Cbc0010I After 2200 nodes, 859 on tree, 1e+50 best solution, best possible 467816.58 (1773.39 seconds)
Cbc0010I After 2300 nodes, 876 on tree, 1e+50 best solution, best possible 467816.58 (1788.11 seconds)
Cbc0010I After 2400 nodes, 901 on tree, 1e+50 best solution, best possible 467873.29 (1935.88 seconds)
Cbc0010I After 2500 nodes, 950 on tree, 1e+50 best solution, best possible 467873.29 (1947.51 seconds)
Cbc0010I After 2600 nodes, 1000 on tree, 1e+50 best solution, best possible 467873.29 (1963.04 seconds)
Cbc0010I After 2700 nodes, 1050 on tree, 1e+50 best solution, best possible 467873.29 (1980.02 seconds)
Cbc0010I After 2800 nodes, 1100 on tree, 1e+50 best solution, best possible 467873.29 (1996.45 seconds)
Cbc0010I After 2900 nodes, 1150 on tree, 1e+50 best solution, best possible 467873.29 (2011.41 seconds)
Cbc0010I After 3000 nodes, 1200 on tree, 1e+50 best solution, best possible 467873.29 (2024.67 seconds)
Cbc0010I After 3100 nodes, 1250 on tree, 1e+50 best solution, best possible 467873.29 (2037.46 seconds)
Cbc0010I After 3200 nodes, 1300 on tree, 1e+50 best solution, best possible 467873.29 (2048.55 seconds)
Cbc0010I After 3300 nodes, 1350 on tree, 1e+50 best solution, best possible 467873.29 (2059.73 seconds)
Cbc0010I After 3400 nodes, 1399 on tree, 1e+50 best solution, best possible 467873.29 (2069.81 seconds)
Cbc0010I After 3500 nodes, 1447 on tree, 1e+50 best solution, best possible 467873.29 (2079.51 seconds)
Cbc0010I After 3600 nodes, 1496 on tree, 1e+50 best solution, best possible 467873.29 (2088.86 seconds)
Cbc0010I After 3700 nodes, 1544 on tree, 1e+50 best solution, best possible 467873.29 (2099.62 seconds)
Cbc0010I After 3800 nodes, 1585 on tree, 1e+50 best solution, best possible 467873.29 (2111.15 seconds)
Cbc0010I After 3900 nodes, 1633 on tree, 1e+50 best solution, best possible 467873.29 (2122.01 seconds)
Cbc0010I After 4000 nodes, 1668 on tree, 1e+50 best solution, best possible 467873.29 (2132.46 seconds)
Cbc0010I After 4100 nodes, 1704 on tree, 1e+50 best solution, best possible 467873.29 (2143.87 seconds)
Cbc0010I After 4200 nodes, 1729 on tree, 1e+50 best solution, best possible 467873.29 (2153.79 seconds)
Cbc0010I After 4300 nodes, 1753 on tree, 1e+50 best solution, best possible 467873.29 (2164.84 seconds)
Cbc0010I After 4400 nodes, 1775 on tree, 1e+50 best solution, best possible 467873.29 (2174.06 seconds)
Cbc0010I After 4500 nodes, 1812 on tree, 1e+50 best solution, best possible 467873.29 (2183.79 seconds)
Cbc0010I After 4600 nodes, 1838 on tree, 1e+50 best solution, best possible 467873.29 (2193.66 seconds)
Cbc0010I After 4700 nodes, 1870 on tree, 1e+50 best solution, best possible 467873.29 (2205.41 seconds)
Cbc0010I After 4800 nodes, 1900 on tree, 1e+50 best solution, best possible 467873.29 (2216.21 seconds)
Cbc0010I After 4900 nodes, 1934 on tree, 1e+50 best solution, best possible 467873.29 (2226.68 seconds)
Cbc0010I After 5000 nodes, 1970 on tree, 1e+50 best solution, best possible 467873.29 (2239.42 seconds)
Couenne: new cutoff value 1.0071342805e+06 (2396.51 seconds)
Cbc0004I Integer solution of 1007134.3 found after 306466 iterations and 5046 nodes (2247.61 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 1007134.3 (best possible 467873.29), took 306970 iterations and 5049 nodes (3451.72 seconds)
Cbc0035I Maximum depth 1339, 0 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       4785
Linearization cuts added in total:           4785  (separation time: 0.064221s)
Total solve time:                         3452.29s (3452.29s in branch-and-bound)
Lower bound:                               467873
Upper bound:                           1.00713e+06  (gap: 115.26%)
Branch-and-bound nodes:                      5049
Stats: /tmp/jl_VchRFB/model.nl 3350 [var]  125 [int] 4200 [con] 1127 [aux]   4785 [root]     4785 [tot] 0.064221 [sep]  3452.29 [time]   3452.3 [bb]         4.678733e+05 [lower]         1.007134e+06 [upper]    5049 [nodes]
Performance of                           FBBT:	    130.284s,     5335 runs. fix:   0.329208 shrnk:     0.1862 ubd:          0 2ubd:         29 infeas:          0
Performance of                           OBBT:	    24.4526s,        7 runs. fix:        2.4 shrnk: 2.16751e-07 ubd:          0 2ubd:         29 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcnd(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1192
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_arcs/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcnd_arcs/script.jl:18
