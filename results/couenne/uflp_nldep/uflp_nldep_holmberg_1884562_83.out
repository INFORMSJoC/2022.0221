solving instance uflp nldep holmberg 9 sinabc1
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Couenne: new cutoff value 2.2955000000e+04 (0.085808 seconds)
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 4850.4962       24 0.168849
Couenne: new cutoff value 4.8504969425e+03 (0.257713 seconds)
Loaded instance "/tmp/jl_8b77pJ/model.nl"
Constraints:          570
Variables:            530 (10 integer)
Auxiliaries:           99 (0 integer)

Coin0506I Presolve 651 (-20) rows, 551 (-78) columns and 2711 (-98) elements
Clp0006I 0  Obj 0 Primal inf 156.90491 (50)
Clp0006I 88  Obj 4726 Primal inf 13.249902 (11)
Clp0006I 93  Obj 4741.8755
Clp0000I Optimal - objective value 4741.8755
Clp0032I Optimal objective 4741.875483 - 93 iterations time 0.012, Presolve 0.01
Clp0000I Optimal - objective value 4741.8755
NLP Heuristic: NLP0014I             2         OPT 4850.4962       17 0.101342
no solution.
Clp0000I Optimal - objective value 4741.8755
Optimality Based BT: 19 improved bounds
Probing: 0 improved bounds
NLP Heuristic: no solution.
Cbc0031I 20 added rows had average density of 2
Cbc0013I At root node, 20 cuts changed objective from 4741.8755 to 4850.4837 in 5 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 66 row cuts average 2.0 elements, 6 column cuts (6 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (0.74 seconds)
Optimality Based BT: 17 improved bounds
Optimality Based BT: 15 improved bounds
Optimality Based BT: 4 improved bounds
Optimality Based BT: 13 improved bounds
Optimality Based BT: 15 improved bounds
Cbc0010I After 100 nodes, 35 on tree, 1e+50 best solution, best possible 4850.4863 (6.48 seconds)
Cbc0010I After 200 nodes, 66 on tree, 1e+50 best solution, best possible 4850.4872 (7.46 seconds)
Optimality Based BT: 14 improved bounds
Cbc0010I After 300 nodes, 91 on tree, 1e+50 best solution, best possible 4850.4879 (8.75 seconds)
Cbc0010I After 400 nodes, 116 on tree, 1e+50 best solution, best possible 4850.489 (9.79 seconds)
Cbc0010I After 500 nodes, 142 on tree, 1e+50 best solution, best possible 4850.4896 (10.90 seconds)
Cbc0010I After 600 nodes, 165 on tree, 1e+50 best solution, best possible 4850.4901 (11.66 seconds)
Optimality Based BT: 14 improved bounds
Optimality Based BT: 16 improved bounds
Cbc0010I After 700 nodes, 187 on tree, 1e+50 best solution, best possible 4850.4904 (14.52 seconds)
Cbc0010I After 800 nodes, 218 on tree, 1e+50 best solution, best possible 4850.4906 (15.19 seconds)
Cbc0010I After 900 nodes, 235 on tree, 1e+50 best solution, best possible 4850.491 (15.86 seconds)
Cbc0010I After 1000 nodes, 259 on tree, 1e+50 best solution, best possible 4850.4914 (16.51 seconds)
Optimality Based BT: 12 improved bounds
Cbc0010I After 1100 nodes, 273 on tree, 1e+50 best solution, best possible 4850.4919 (17.71 seconds)
Cbc0010I After 1200 nodes, 298 on tree, 1e+50 best solution, best possible 4850.492 (18.36 seconds)
Cbc0010I After 1300 nodes, 317 on tree, 1e+50 best solution, best possible 4850.4922 (18.98 seconds)
Optimality Based BT: 12 improved bounds
Cbc0010I After 1400 nodes, 333 on tree, 1e+50 best solution, best possible 4850.4925 (20.09 seconds)
Cbc0010I After 1500 nodes, 351 on tree, 1e+50 best solution, best possible 4850.4927 (20.73 seconds)
Cbc0010I After 1600 nodes, 368 on tree, 1e+50 best solution, best possible 4850.4929 (21.36 seconds)
Cbc0010I After 1700 nodes, 387 on tree, 1e+50 best solution, best possible 4850.4931 (22.09 seconds)
Optimality Based BT: 12 improved bounds
Cbc0010I After 1800 nodes, 405 on tree, 1e+50 best solution, best possible 4850.4933 (23.79 seconds)
Cbc0010I After 1900 nodes, 431 on tree, 1e+50 best solution, best possible 4850.4934 (24.46 seconds)
Cbc0010I After 2000 nodes, 449 on tree, 1e+50 best solution, best possible 4850.4936 (25.11 seconds)
Cbc0010I After 2100 nodes, 474 on tree, 1e+50 best solution, best possible 4850.4936 (25.77 seconds)
Cbc0010I After 2200 nodes, 478 on tree, 1e+50 best solution, best possible 4850.4939 (26.91 seconds)
Cbc0010I After 2300 nodes, 490 on tree, 1e+50 best solution, best possible 4850.494 (27.63 seconds)
Cbc0010I After 2400 nodes, 516 on tree, 1e+50 best solution, best possible 4850.494 (28.30 seconds)
Cbc0010I After 2500 nodes, 541 on tree, 1e+50 best solution, best possible 4850.4941 (28.99 seconds)
Cbc0010I After 2600 nodes, 562 on tree, 1e+50 best solution, best possible 4850.4942 (29.75 seconds)
Cbc0010I After 2700 nodes, 585 on tree, 1e+50 best solution, best possible 4850.4942 (30.45 seconds)
Cbc0010I After 2800 nodes, 593 on tree, 1e+50 best solution, best possible 4850.4944 (31.08 seconds)
Cbc0010I After 2900 nodes, 612 on tree, 1e+50 best solution, best possible 4850.4944 (31.76 seconds)
Cbc0010I After 3000 nodes, 628 on tree, 1e+50 best solution, best possible 4850.4945 (32.43 seconds)
Cbc0010I After 3100 nodes, 648 on tree, 1e+50 best solution, best possible 4850.4945 (33.57 seconds)
Cbc0010I After 3200 nodes, 665 on tree, 1e+50 best solution, best possible 4850.4946 (34.24 seconds)
Cbc0010I After 3300 nodes, 686 on tree, 1e+50 best solution, best possible 4850.4946 (34.94 seconds)
Cbc0010I After 3400 nodes, 708 on tree, 1e+50 best solution, best possible 4850.4947 (35.71 seconds)
Cbc0010I After 3500 nodes, 722 on tree, 1e+50 best solution, best possible 4850.4948 (36.35 seconds)
Cbc0010I After 3600 nodes, 736 on tree, 1e+50 best solution, best possible 4850.4948 (37.08 seconds)
Cbc0010I After 3700 nodes, 757 on tree, 1e+50 best solution, best possible 4850.4949 (37.77 seconds)
Cbc0010I After 3800 nodes, 774 on tree, 1e+50 best solution, best possible 4850.4949 (38.43 seconds)
Cbc0010I After 3900 nodes, 783 on tree, 1e+50 best solution, best possible 4850.495 (39.09 seconds)
Cbc0010I After 4000 nodes, 791 on tree, 1e+50 best solution, best possible 4850.495 (39.74 seconds)
Cbc0010I After 4100 nodes, 803 on tree, 1e+50 best solution, best possible 4850.4951 (40.40 seconds)
Cbc0010I After 4200 nodes, 819 on tree, 1e+50 best solution, best possible 4850.4951 (41.10 seconds)
Cbc0010I After 4300 nodes, 834 on tree, 1e+50 best solution, best possible 4850.4952 (41.79 seconds)
Cbc0010I After 4400 nodes, 838 on tree, 1e+50 best solution, best possible 4850.4952 (42.42 seconds)
Cbc0010I After 4500 nodes, 853 on tree, 1e+50 best solution, best possible 4850.4953 (43.07 seconds)
Cbc0010I After 4600 nodes, 863 on tree, 1e+50 best solution, best possible 4850.4953 (43.75 seconds)
Cbc0010I After 4700 nodes, 875 on tree, 1e+50 best solution, best possible 4850.4953 (44.41 seconds)
Cbc0010I After 4800 nodes, 890 on tree, 1e+50 best solution, best possible 4850.4953 (45.10 seconds)
Cbc0010I After 4900 nodes, 899 on tree, 1e+50 best solution, best possible 4850.4954 (45.75 seconds)
Cbc0010I After 5000 nodes, 911 on tree, 1e+50 best solution, best possible 4850.4954 (46.50 seconds)
Cbc0010I After 5100 nodes, 915 on tree, 1e+50 best solution, best possible 4850.4954 (47.13 seconds)
Cbc0010I After 5200 nodes, 926 on tree, 1e+50 best solution, best possible 4850.4954 (47.80 seconds)
Cbc0010I After 5300 nodes, 930 on tree, 1e+50 best solution, best possible 4850.4955 (48.43 seconds)
Cbc0010I After 5400 nodes, 936 on tree, 1e+50 best solution, best possible 4850.4955 (49.07 seconds)
Cbc0010I After 5500 nodes, 940 on tree, 1e+50 best solution, best possible 4850.4955 (49.70 seconds)
Cbc0010I After 5600 nodes, 941 on tree, 1e+50 best solution, best possible 4850.4956 (50.32 seconds)
Cbc0010I After 5700 nodes, 949 on tree, 1e+50 best solution, best possible 4850.4956 (50.96 seconds)
Cbc0010I After 5800 nodes, 950 on tree, 1e+50 best solution, best possible 4850.4956 (51.57 seconds)
Cbc0010I After 5900 nodes, 947 on tree, 1e+50 best solution, best possible 4850.4957 (52.23 seconds)
Cbc0010I After 6000 nodes, 954 on tree, 1e+50 best solution, best possible 4850.4957 (52.85 seconds)
Cbc0010I After 6100 nodes, 954 on tree, 1e+50 best solution, best possible 4850.4957 (53.49 seconds)
Cbc0010I After 6200 nodes, 961 on tree, 1e+50 best solution, best possible 4850.4957 (54.17 seconds)
Cbc0010I After 6300 nodes, 964 on tree, 1e+50 best solution, best possible 4850.4957 (54.83 seconds)
Cbc0010I After 6400 nodes, 971 on tree, 1e+50 best solution, best possible 4850.4958 (55.49 seconds)
Cbc0010I After 6500 nodes, 976 on tree, 1e+50 best solution, best possible 4850.4958 (56.13 seconds)
Cbc0010I After 6600 nodes, 974 on tree, 1e+50 best solution, best possible 4850.4959 (56.74 seconds)
Cbc0010I After 6700 nodes, 970 on tree, 1e+50 best solution, best possible 4850.4959 (57.37 seconds)
Cbc0010I After 6800 nodes, 975 on tree, 1e+50 best solution, best possible 4850.4959 (58.03 seconds)
Cbc0010I After 6900 nodes, 970 on tree, 1e+50 best solution, best possible 4850.496 (58.75 seconds)
Cbc0010I After 7000 nodes, 960 on tree, 1e+50 best solution, best possible 4850.496 (59.36 seconds)
Cbc0010I After 7100 nodes, 952 on tree, 1e+50 best solution, best possible 4850.496 (59.97 seconds)
Cbc0010I After 7200 nodes, 941 on tree, 1e+50 best solution, best possible 4850.4961 (60.59 seconds)
Cbc0010I After 7300 nodes, 926 on tree, 1e+50 best solution, best possible 4850.4961 (61.15 seconds)
Cbc0010I After 7400 nodes, 919 on tree, 1e+50 best solution, best possible 4850.4962 (61.83 seconds)
Cbc0010I After 7500 nodes, 899 on tree, 1e+50 best solution, best possible 4850.4962 (62.38 seconds)
Cbc0010I After 7600 nodes, 876 on tree, 1e+50 best solution, best possible 4850.4962 (63.03 seconds)
Cbc0010I After 7700 nodes, 858 on tree, 1e+50 best solution, best possible 4850.4963 (63.60 seconds)
Cbc0010I After 7800 nodes, 841 on tree, 1e+50 best solution, best possible 4850.4963 (64.18 seconds)
Cbc0010I After 7900 nodes, 818 on tree, 1e+50 best solution, best possible 4850.4964 (64.74 seconds)
Cbc0010I After 8000 nodes, 800 on tree, 1e+50 best solution, best possible 4850.4964 (65.29 seconds)
Cbc0010I After 8100 nodes, 781 on tree, 1e+50 best solution, best possible 4850.4965 (65.88 seconds)
Cbc0010I After 8200 nodes, 756 on tree, 1e+50 best solution, best possible 4850.4965 (66.44 seconds)
Cbc0010I After 8300 nodes, 736 on tree, 1e+50 best solution, best possible 4850.4966 (67.00 seconds)
Cbc0010I After 8400 nodes, 717 on tree, 1e+50 best solution, best possible 4850.4966 (67.59 seconds)
Cbc0010I After 8500 nodes, 695 on tree, 1e+50 best solution, best possible 4850.4966 (68.16 seconds)
Cbc0010I After 8600 nodes, 671 on tree, 1e+50 best solution, best possible 4850.4967 (68.74 seconds)
Cbc0010I After 8700 nodes, 632 on tree, 1e+50 best solution, best possible 4850.4968 (69.21 seconds)
Cbc0010I After 8800 nodes, 587 on tree, 1e+50 best solution, best possible 4850.4969 (69.61 seconds)
Cbc0010I After 8900 nodes, 537 on tree, 1e+50 best solution, best possible 4850.497 (69.99 seconds)
Cbc0010I After 9000 nodes, 487 on tree, 1e+50 best solution, best possible 4850.4971 (70.36 seconds)
Cbc0010I After 9100 nodes, 437 on tree, 1e+50 best solution, best possible 4850.4973 (70.73 seconds)
Cbc0010I After 9200 nodes, 387 on tree, 1e+50 best solution, best possible 4850.4975 (71.10 seconds)
Cbc0010I After 9300 nodes, 337 on tree, 1e+50 best solution, best possible 4850.4978 (71.47 seconds)
Cbc0010I After 9400 nodes, 287 on tree, 1e+50 best solution, best possible 4850.4981 (71.85 seconds)
Cbc0010I After 9500 nodes, 237 on tree, 1e+50 best solution, best possible 4850.4985 (72.23 seconds)
Cbc0010I After 9600 nodes, 187 on tree, 1e+50 best solution, best possible 4850.4991 (72.60 seconds)
Cbc0010I After 9700 nodes, 137 on tree, 1e+50 best solution, best possible 4850.4999 (72.97 seconds)
Cbc0010I After 9800 nodes, 87 on tree, 1e+50 best solution, best possible 4850.5014 (73.34 seconds)
Cbc0010I After 9900 nodes, 37 on tree, 1e+50 best solution, best possible 4850.5034 (73.72 seconds)
Cbc0001I Search completed - best objective 1e+50, took 34604 iterations and 9974 nodes (73.99 seconds)
Cbc0035I Maximum depth 46, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:        671
Linearization cuts added in total:            671  (separation time: 0.003545s)
Total solve time:                         74.0038s (74.0038s in branch-and-bound)
Lower bound:                               4850.5
Upper bound:                               4850.5  (gap: 0.00%)
Branch-and-bound nodes:                      9974
Stats: /tmp/jl_8b77pJ/model.nl  530 [var]   10 [int]  570 [con]   99 [aux]    671 [root]      671 [tot] 0.003545 [sep]  74.0038 [time]  74.0049 [bb]         4.850497e+03 [lower]         4.850497e+03 [upper]    9974 [nodes]
Performance of                           FBBT:	    3.57143s,     5250 runs. fix:  0.0118448 shrnk:   0.844718 ubd:          0 2ubd:          0 infeas:          7
Performance of                           OBBT:	   0.877811s,       12 runs. fix:   0.116279 shrnk:    32.1074 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
reading holmberg data file /home/ccontard/git/ipwlb/code/instances/uflp/holmberg/p9
