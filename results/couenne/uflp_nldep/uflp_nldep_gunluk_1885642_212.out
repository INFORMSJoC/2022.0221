solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-30-60-1.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.4286976122e+03 (0.920809 seconds)
0.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 472.01208       51 1.746492
Couenne: new cutoff value 4.9076251495e+02 (2.85589 seconds)
NLP0014I             2         OPT 486.8472       25 0.701803
Couenne: new cutoff value 4.8684725879e+02 (3.56011 seconds)
Loaded instance "/tmp/jl_rxQaxZ/model.nl"
Constraints:         1920
Variables:           1890 (30 integer)
Auxiliaries:          149 (0 integer)

Coin0506I Presolve 2161 (0) rows, 1951 (-88) columns and 9691 (-88) elements
Clp0006I 0  Obj -4750.3125 Primal inf 4485936.9 (90)
Clp0006I 114  Obj -4750.3125 Primal inf 58460363 (88)
Clp0006I 232  Obj 29.902573 Primal inf 229.51524 (59)
Clp0006I 350  Obj 281.31208 Primal inf 28379.122 (101)
Clp0006I 432  Obj 362.74283
Clp0000I Optimal - objective value 362.74355
Clp0000I Optimal - objective value 362.74355
Clp0032I Optimal objective 362.7435484 - 432 iterations time 0.042, Presolve 0.01
Clp0000I Optimal - objective value 362.74355
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 362.74355
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 14 added rows had average density of 2
Cbc0013I At root node, 14 cuts changed objective from 362.74355 to 362.9539 in 11 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 185 row cuts average 2.0 elements, 502 column cuts (502 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (4.29 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 27 on tree, 1e+50 best solution, best possible 363.29424 (29.29 seconds)
Cbc0010I After 200 nodes, 76 on tree, 1e+50 best solution, best possible 363.29424 (33.78 seconds)
Couenne: new cutoff value 4.7851611780e+02 (39.0687 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 300 nodes, 101 on tree, 1e+50 best solution, best possible 406.94027 (46.53 seconds)
Cbc0010I After 400 nodes, 137 on tree, 1e+50 best solution, best possible 406.94027 (50.88 seconds)
Cbc0010I After 500 nodes, 184 on tree, 1e+50 best solution, best possible 406.94027 (55.32 seconds)
Couenne: new cutoff value 4.7718083544e+02 (60.6242 seconds)
Cbc0010I After 600 nodes, 211 on tree, 1e+50 best solution, best possible 408.41216 (61.46 seconds)
Cbc0010I After 700 nodes, 255 on tree, 1e+50 best solution, best possible 408.41216 (66.09 seconds)
Cbc0010I After 800 nodes, 305 on tree, 1e+50 best solution, best possible 408.41216 (70.41 seconds)
Couenne: new cutoff value 4.7381108322e+02 (74.7424 seconds)
Cbc0010I After 900 nodes, 316 on tree, 1e+50 best solution, best possible 433.48227 (74.03 seconds)
Cbc0010I After 1000 nodes, 349 on tree, 1e+50 best solution, best possible 433.48227 (78.23 seconds)
Cbc0010I After 1100 nodes, 398 on tree, 1e+50 best solution, best possible 433.48227 (82.63 seconds)
Couenne: new cutoff value 4.7206623184e+02 (87.3215 seconds)
Cbc0010I After 1200 nodes, 412 on tree, 1e+50 best solution, best possible 460.82588 (86.18 seconds)
Cbc0010I After 1300 nodes, 436 on tree, 1e+50 best solution, best possible 461.58195 (90.60 seconds)
Cbc0010I After 1400 nodes, 460 on tree, 1e+50 best solution, best possible 462.27716 (94.78 seconds)
Cbc0010I After 1500 nodes, 478 on tree, 1e+50 best solution, best possible 463.25447 (98.81 seconds)
Cbc0010I After 1600 nodes, 499 on tree, 1e+50 best solution, best possible 464.96175 (102.93 seconds)
Cbc0010I After 1700 nodes, 520 on tree, 1e+50 best solution, best possible 465.52404 (107.25 seconds)
Cbc0010I After 1800 nodes, 537 on tree, 1e+50 best solution, best possible 465.79379 (111.46 seconds)
Cbc0010I After 1900 nodes, 557 on tree, 1e+50 best solution, best possible 465.95932 (115.62 seconds)
Cbc0010I After 2000 nodes, 572 on tree, 1e+50 best solution, best possible 466.15898 (119.73 seconds)
Cbc0010I After 2100 nodes, 591 on tree, 1e+50 best solution, best possible 466.3356 (124.05 seconds)
Cbc0010I After 2200 nodes, 607 on tree, 1e+50 best solution, best possible 466.44253 (128.30 seconds)
Cbc0010I After 2300 nodes, 624 on tree, 1e+50 best solution, best possible 466.73105 (132.54 seconds)
Cbc0010I After 2400 nodes, 635 on tree, 1e+50 best solution, best possible 467.06498 (136.56 seconds)
Cbc0010I After 2500 nodes, 649 on tree, 1e+50 best solution, best possible 467.21431 (140.78 seconds)
Cbc0010I After 2600 nodes, 662 on tree, 1e+50 best solution, best possible 467.40452 (144.86 seconds)
Cbc0010I After 2700 nodes, 675 on tree, 1e+50 best solution, best possible 467.51641 (149.74 seconds)
Cbc0010I After 2800 nodes, 680 on tree, 1e+50 best solution, best possible 467.64109 (153.98 seconds)
Cbc0010I After 2900 nodes, 684 on tree, 1e+50 best solution, best possible 467.74151 (158.05 seconds)
Cbc0010I After 3000 nodes, 686 on tree, 1e+50 best solution, best possible 467.82955 (161.97 seconds)
Cbc0010I After 3100 nodes, 694 on tree, 1e+50 best solution, best possible 467.95817 (166.25 seconds)
Cbc0010I After 3200 nodes, 702 on tree, 1e+50 best solution, best possible 468.15138 (170.69 seconds)
Cbc0010I After 3300 nodes, 720 on tree, 1e+50 best solution, best possible 468.15473 (174.96 seconds)
Couenne: new cutoff value 4.7201413618e+02 (181.437 seconds)
Couenne: new cutoff value 4.7201239312e+02 (181.474 seconds)
Cbc0010I After 3400 nodes, 748 on tree, 1e+50 best solution, best possible 468.18587 (178.54 seconds)
Cbc0010I After 3500 nodes, 754 on tree, 1e+50 best solution, best possible 468.30803 (182.60 seconds)
Cbc0010I After 3600 nodes, 757 on tree, 1e+50 best solution, best possible 468.5682 (186.56 seconds)
Cbc0010I After 3700 nodes, 751 on tree, 1e+50 best solution, best possible 468.72278 (190.44 seconds)
Cbc0010I After 3800 nodes, 745 on tree, 1e+50 best solution, best possible 468.86557 (194.43 seconds)
Cbc0010I After 3900 nodes, 740 on tree, 1e+50 best solution, best possible 468.98915 (198.23 seconds)
Cbc0010I After 4000 nodes, 727 on tree, 1e+50 best solution, best possible 469.09654 (202.11 seconds)
Cbc0010I After 4100 nodes, 719 on tree, 1e+50 best solution, best possible 469.18321 (205.96 seconds)
Cbc0010I After 4200 nodes, 707 on tree, 1e+50 best solution, best possible 469.29338 (209.72 seconds)
Cbc0010I After 4300 nodes, 698 on tree, 1e+50 best solution, best possible 469.37077 (213.55 seconds)
Cbc0010I After 4400 nodes, 689 on tree, 1e+50 best solution, best possible 469.43855 (217.21 seconds)
Cbc0010I After 4500 nodes, 670 on tree, 1e+50 best solution, best possible 469.51184 (220.93 seconds)
Cbc0010I After 4600 nodes, 656 on tree, 1e+50 best solution, best possible 469.62198 (224.65 seconds)
Cbc0010I After 4700 nodes, 636 on tree, 1e+50 best solution, best possible 469.73457 (228.10 seconds)
Cbc0010I After 4800 nodes, 615 on tree, 1e+50 best solution, best possible 469.85909 (231.45 seconds)
Cbc0010I After 4900 nodes, 587 on tree, 1e+50 best solution, best possible 470.02055 (234.77 seconds)
Cbc0010I After 5000 nodes, 562 on tree, 1e+50 best solution, best possible 470.29896 (237.88 seconds)
Cbc0010I After 5100 nodes, 551 on tree, 1e+50 best solution, best possible 470.41235 (241.77 seconds)
Cbc0010I After 5200 nodes, 540 on tree, 1e+50 best solution, best possible 470.57462 (245.55 seconds)
Cbc0010I After 5300 nodes, 511 on tree, 1e+50 best solution, best possible 470.95536 (248.86 seconds)
Cbc0010I After 5400 nodes, 467 on tree, 1e+50 best solution, best possible 471.45765 (251.22 seconds)
Cbc0010I After 5500 nodes, 429 on tree, 1e+50 best solution, best possible 471.90103 (253.95 seconds)
Cbc0010I After 5600 nodes, 407 on tree, 1e+50 best solution, best possible 472.00399 (257.14 seconds)
Cbc0010I After 5700 nodes, 365 on tree, 1e+50 best solution, best possible 472.04944 (258.84 seconds)
Cbc0010I After 5800 nodes, 315 on tree, 1e+50 best solution, best possible 472.11087 (259.96 seconds)
Cbc0010I After 5900 nodes, 265 on tree, 1e+50 best solution, best possible 473.73623 (261.09 seconds)
Cbc0010I After 6000 nodes, 215 on tree, 1e+50 best solution, best possible 473.86323 (262.36 seconds)
Cbc0010I After 6100 nodes, 165 on tree, 1e+50 best solution, best possible 477.08278 (263.55 seconds)
Cbc0010I After 6200 nodes, 115 on tree, 1e+50 best solution, best possible 477.2241 (264.75 seconds)
Cbc0010I After 6300 nodes, 65 on tree, 1e+50 best solution, best possible 478.51622 (265.96 seconds)
Cbc0010I After 6400 nodes, 15 on tree, 1e+50 best solution, best possible 479.0186 (267.43 seconds)
Cbc0001I Search completed - best objective 1e+50, took 151497 iterations and 6430 nodes (267.89 seconds)
Cbc0035I Maximum depth 148, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       2161
Linearization cuts added in total:           2161  (separation time: 0.007888s)
Total solve time:                         267.926s (267.926s in branch-and-bound)
Lower bound:                              472.012
Upper bound:                              472.012  (gap: 0.00%)
Branch-and-bound nodes:                      6430
Stats: /tmp/jl_rxQaxZ/model.nl 1890 [var]   30 [int] 1920 [con]  149 [aux]   2161 [root]     2161 [tot] 0.007888 [sep]  267.926 [time]  267.929 [bb]         4.720124e+02 [lower]         4.720124e+02 [upper]    6430 [nodes]
Performance of                           FBBT:	    19.2693s,     7936 runs. fix:          0 shrnk:    2.87688 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    5.21693s,        5 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-30-60-1.txt
