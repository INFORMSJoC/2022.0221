solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-10.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.8695622957e+03 (2.67951 seconds)
2.7 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 569.99096       60 2.969083
Couenne: new cutoff value 5.9324161812e+02 (5.99519 seconds)
NLP0014I             2         OPT 587.45533       30 1.933722
Couenne: new cutoff value 5.8745449624e+02 (7.93247 seconds)
Loaded instance "/tmp/jl_vkatF0/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3680 (-1) rows, 3400 (-119) columns and 16919 (-120) elements
Clp0006I 0  Obj -5925.9375 Primal inf 6501572.1 (120)
Clp0006I 148  Obj -1679.614 Primal inf 5404741.5 (207)
Clp0006I 296  Obj 229.22691 Primal inf 27970.747 (85)
Clp0006I 444  Obj 452.1589 Primal inf 19755.659 (37)
Clp0006I 504  Obj 497.96597
Clp0000I Optimal - objective value 497.96597
Clp0000I Optimal - objective value 497.96597
Clp0032I Optimal objective 497.9659669 - 504 iterations time 0.042, Presolve 0.01
Clp0000I Optimal - objective value 497.96597
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 497.96597
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 15 added rows had average density of 2
Cbc0013I At root node, 15 cuts changed objective from 497.96597 to 498.11573 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 172 row cuts average 2.0 elements, 509 column cuts (509 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (9.80 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 21 on tree, 1e+50 best solution, best possible 526.00841 (62.01 seconds)
Cbc0010I After 200 nodes, 71 on tree, 1e+50 best solution, best possible 526.00841 (70.07 seconds)
Cbc0010I After 300 nodes, 121 on tree, 1e+50 best solution, best possible 526.00841 (76.75 seconds)
Couenne: new cutoff value 5.7040549867e+02 (87.5804 seconds)
Couenne: new cutoff value 5.7039709879e+02 (87.6812 seconds)
Cbc0010I After 400 nodes, 145 on tree, 1e+50 best solution, best possible 558.84144 (89.49 seconds)
Cbc0010I After 500 nodes, 169 on tree, 1e+50 best solution, best possible 558.84144 (110.56 seconds)
Cbc0010I After 600 nodes, 210 on tree, 1e+50 best solution, best possible 558.84144 (118.31 seconds)
Couenne: new cutoff value 5.6999148425e+02 (131.42 seconds)
Cbc0010I After 700 nodes, 249 on tree, 1e+50 best solution, best possible 560.60927 (124.70 seconds)
Cbc0010I After 800 nodes, 264 on tree, 1e+50 best solution, best possible 562.038 (131.38 seconds)
Cbc0010I After 900 nodes, 282 on tree, 1e+50 best solution, best possible 563.33789 (152.19 seconds)
Cbc0010I After 1000 nodes, 289 on tree, 1e+50 best solution, best possible 563.81827 (158.58 seconds)
Cbc0010I After 1100 nodes, 296 on tree, 1e+50 best solution, best possible 563.99165 (164.96 seconds)
Cbc0010I After 1200 nodes, 307 on tree, 1e+50 best solution, best possible 564.32847 (171.75 seconds)
Cbc0010I After 1300 nodes, 313 on tree, 1e+50 best solution, best possible 564.44479 (178.17 seconds)
Cbc0010I After 1400 nodes, 321 on tree, 1e+50 best solution, best possible 564.54197 (184.52 seconds)
Cbc0010I After 1500 nodes, 328 on tree, 1e+50 best solution, best possible 564.5983 (191.09 seconds)
Cbc0010I After 1600 nodes, 328 on tree, 1e+50 best solution, best possible 565.02182 (196.94 seconds)
Cbc0010I After 1700 nodes, 330 on tree, 1e+50 best solution, best possible 565.32175 (203.40 seconds)
Cbc0010I After 1800 nodes, 328 on tree, 1e+50 best solution, best possible 566.08184 (209.52 seconds)
Cbc0010I After 1900 nodes, 324 on tree, 1e+50 best solution, best possible 566.85954 (215.64 seconds)
Cbc0010I After 2000 nodes, 325 on tree, 1e+50 best solution, best possible 567.12631 (222.27 seconds)
Cbc0010I After 2100 nodes, 335 on tree, 1e+50 best solution, best possible 567.27973 (229.39 seconds)
Cbc0010I After 2200 nodes, 339 on tree, 1e+50 best solution, best possible 567.72924 (236.29 seconds)
Cbc0010I After 2300 nodes, 329 on tree, 1e+50 best solution, best possible 568.00145 (242.90 seconds)
Cbc0010I After 2400 nodes, 311 on tree, 1e+50 best solution, best possible 568.46163 (249.28 seconds)
Cbc0010I After 2500 nodes, 297 on tree, 1e+50 best solution, best possible 568.90578 (255.46 seconds)
Cbc0010I After 2600 nodes, 297 on tree, 1e+50 best solution, best possible 569.06325 (262.06 seconds)
Cbc0010I After 2700 nodes, 287 on tree, 1e+50 best solution, best possible 569.34666 (268.59 seconds)
Cbc0010I After 2800 nodes, 269 on tree, 1e+50 best solution, best possible 569.48222 (274.28 seconds)
Cbc0010I After 2900 nodes, 241 on tree, 1e+50 best solution, best possible 569.64735 (279.34 seconds)
Cbc0010I After 3000 nodes, 200 on tree, 1e+50 best solution, best possible 569.99662 (283.25 seconds)
Cbc0010I After 3100 nodes, 150 on tree, 1e+50 best solution, best possible 570.10936 (285.50 seconds)
Cbc0010I After 3200 nodes, 100 on tree, 1e+50 best solution, best possible 570.4055 (287.60 seconds)
Cbc0010I After 3300 nodes, 50 on tree, 1e+50 best solution, best possible 570.51978 (289.66 seconds)
Cbc0001I Search completed - best objective 1e+50, took 149462 iterations and 3400 nodes (291.68 seconds)
Cbc0035I Maximum depth 174, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.019541s)
Total solve time:                         291.721s (291.721s in branch-and-bound)
Lower bound:                              569.991
Upper bound:                              569.991  (gap: 0.00%)
Branch-and-bound nodes:                      3400
Stats: /tmp/jl_vkatF0/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.019541 [sep]  291.721 [time]  291.726 [bb]         5.699915e+02 [lower]         5.699915e+02 [upper]    3400 [nodes]
Performance of                           FBBT:	    17.9102s,     3756 runs. fix:          0 shrnk:    8.20777 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    7.42924s,        4 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-10.txt
