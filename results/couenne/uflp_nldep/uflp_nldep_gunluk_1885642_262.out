solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-30-60-6.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.5864973496e+03 (0.933961 seconds)
0.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 472.65348       47 1.457032
Couenne: new cutoff value 5.2715385086e+02 (2.59814 seconds)
NLP0014I             2         OPT 518.93338       25 0.686959
Couenne: new cutoff value 5.1893300850e+02 (3.2875 seconds)
Loaded instance "/tmp/jl_w22gKZ/model.nl"
Constraints:         1920
Variables:           1890 (30 integer)
Auxiliaries:          149 (0 integer)

Coin0506I Presolve 2160 (-1) rows, 1950 (-89) columns and 9689 (-90) elements
Clp0006I 0  Obj -4469.0625 Primal inf 3517845.3 (90)
Clp0006I 118  Obj -3474.1503 Primal inf 4479372.9 (170)
Clp0006I 236  Obj -20.497141 Primal inf 96845.949 (90)
Clp0006I 354  Obj 244.6199 Primal inf 8085.8192 (53)
Clp0006I 449  Obj 365.0179
Clp0000I Optimal - objective value 365.0179
Clp0000I Optimal - objective value 365.0179
Clp0032I Optimal objective 365.0178978 - 449 iterations time 0.032, Presolve 0.01
Clp0000I Optimal - objective value 365.0179
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 365.0179
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 13 added rows had average density of 2
Cbc0013I At root node, 13 cuts changed objective from 365.0179 to 365.30043 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 79 row cuts average 2.0 elements, 391 column cuts (391 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (4.11 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 31 on tree, 1e+50 best solution, best possible 431.547 (30.93 seconds)
Cbc0010I After 200 nodes, 81 on tree, 1e+50 best solution, best possible 431.547 (35.36 seconds)
Couenne: new cutoff value 4.7441482519e+02 (41.1581 seconds)
Cbc0010I After 300 nodes, 118 on tree, 1e+50 best solution, best possible 444.30935 (38.74 seconds)
Cbc0010I After 400 nodes, 137 on tree, 1e+50 best solution, best possible 455.67361 (42.94 seconds)
Cbc0010I After 500 nodes, 173 on tree, 1e+50 best solution, best possible 455.67361 (47.39 seconds)
Couenne: new cutoff value 4.7396004629e+02 (53.119 seconds)
Couenne: new cutoff value 4.7395741949e+02 (53.1778 seconds)
Cbc0010I After 600 nodes, 211 on tree, 1e+50 best solution, best possible 458.91125 (51.41 seconds)
Cbc0010I After 700 nodes, 246 on tree, 1e+50 best solution, best possible 458.91125 (55.78 seconds)
Couenne: new cutoff value 4.7268602454e+02 (62.8353 seconds)
Cbc0010I After 800 nodes, 289 on tree, 1e+50 best solution, best possible 460.20785 (59.69 seconds)
Cbc0010I After 900 nodes, 309 on tree, 1e+50 best solution, best possible 463.20855 (63.89 seconds)
Cbc0010I After 1000 nodes, 330 on tree, 1e+50 best solution, best possible 464.2298 (67.86 seconds)
Cbc0010I After 1100 nodes, 347 on tree, 1e+50 best solution, best possible 464.87801 (71.88 seconds)
Cbc0010I After 1200 nodes, 363 on tree, 1e+50 best solution, best possible 465.41503 (75.85 seconds)
Cbc0010I After 1300 nodes, 386 on tree, 1e+50 best solution, best possible 465.85283 (79.93 seconds)
Cbc0010I After 1400 nodes, 400 on tree, 1e+50 best solution, best possible 466.40629 (83.97 seconds)
Cbc0010I After 1500 nodes, 418 on tree, 1e+50 best solution, best possible 466.84647 (87.90 seconds)
Cbc0010I After 1600 nodes, 434 on tree, 1e+50 best solution, best possible 467.11483 (92.00 seconds)
Cbc0010I After 1700 nodes, 443 on tree, 1e+50 best solution, best possible 467.43044 (96.00 seconds)
Cbc0010I After 1800 nodes, 451 on tree, 1e+50 best solution, best possible 467.69084 (99.97 seconds)
Cbc0010I After 1900 nodes, 463 on tree, 1e+50 best solution, best possible 467.92345 (104.04 seconds)
Cbc0010I After 2000 nodes, 470 on tree, 1e+50 best solution, best possible 468.03573 (108.19 seconds)
Couenne: new cutoff value 4.7265378390e+02 (115.16 seconds)
Cbc0010I After 2100 nodes, 500 on tree, 1e+50 best solution, best possible 468.08744 (112.15 seconds)
Cbc0010I After 2200 nodes, 503 on tree, 1e+50 best solution, best possible 468.32428 (116.12 seconds)
Cbc0010I After 2300 nodes, 505 on tree, 1e+50 best solution, best possible 468.54781 (119.88 seconds)
Cbc0010I After 2400 nodes, 505 on tree, 1e+50 best solution, best possible 468.79077 (123.70 seconds)
Cbc0010I After 2500 nodes, 501 on tree, 1e+50 best solution, best possible 469.02208 (127.87 seconds)
Cbc0010I After 2600 nodes, 494 on tree, 1e+50 best solution, best possible 469.34129 (131.74 seconds)
Cbc0010I After 2700 nodes, 475 on tree, 1e+50 best solution, best possible 469.68501 (135.29 seconds)
Cbc0010I After 2800 nodes, 454 on tree, 1e+50 best solution, best possible 469.98287 (138.78 seconds)
Cbc0010I After 2900 nodes, 429 on tree, 1e+50 best solution, best possible 470.30445 (142.34 seconds)
Cbc0010I After 3000 nodes, 405 on tree, 1e+50 best solution, best possible 470.58498 (145.63 seconds)
Cbc0010I After 3100 nodes, 377 on tree, 1e+50 best solution, best possible 470.90291 (148.70 seconds)
Cbc0010I After 3200 nodes, 339 on tree, 1e+50 best solution, best possible 471.43395 (152.18 seconds)
Cbc0010I After 3300 nodes, 299 on tree, 1e+50 best solution, best possible 472.17528 (155.09 seconds)
Cbc0010I After 3400 nodes, 291 on tree, 1e+50 best solution, best possible 472.41801 (158.72 seconds)
Cbc0010I After 3500 nodes, 249 on tree, 1e+50 best solution, best possible 472.66979 (160.87 seconds)
Cbc0010I After 3600 nodes, 199 on tree, 1e+50 best solution, best possible 472.76275 (162.06 seconds)
Cbc0010I After 3700 nodes, 149 on tree, 1e+50 best solution, best possible 473.95729 (163.13 seconds)
Cbc0010I After 3800 nodes, 99 on tree, 1e+50 best solution, best possible 474.29722 (164.31 seconds)
Cbc0010I After 3900 nodes, 49 on tree, 1e+50 best solution, best possible 474.54889 (165.55 seconds)
Cbc0001I Search completed - best objective 1e+50, took 86259 iterations and 3998 nodes (166.64 seconds)
Cbc0035I Maximum depth 145, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       2161
Linearization cuts added in total:           2161  (separation time: 0.011144s)
Total solve time:                         166.673s (166.673s in branch-and-bound)
Lower bound:                              472.654
Upper bound:                              472.654  (gap: 0.00%)
Branch-and-bound nodes:                      3998
Stats: /tmp/jl_w22gKZ/model.nl 1890 [var]   30 [int] 1920 [con]  149 [aux]   2161 [root]     2161 [tot] 0.011144 [sep]  166.673 [time]  166.676 [bb]         4.726538e+02 [lower]         4.726538e+02 [upper]    3998 [nodes]
Performance of                           FBBT:	    11.7703s,     4697 runs. fix:          0 shrnk:    4.97001 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    4.34558s,        4 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-30-60-6.txt
