solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-30-60-5.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.7026156512e+03 (0.919249 seconds)
0.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 458.94785       50 1.545133
Couenne: new cutoff value 5.6862685275e+02 (2.67817 seconds)
NLP0014I             2         OPT 491.61229       30 0.80527
Couenne: new cutoff value 4.9161238708e+02 (3.48591 seconds)
Loaded instance "/tmp/jl_mWh0L6/model.nl"
Constraints:         1920
Variables:           1890 (30 integer)
Auxiliaries:          149 (0 integer)

Coin0506I Presolve 2160 (-1) rows, 1950 (-89) columns and 9689 (-90) elements
Clp0006I 0  Obj -3886.875 Primal inf 3555202.8 (90)
Clp0006I 118  Obj -2932.2023 Primal inf 5554979.2 (178)
Clp0006I 236  Obj -7.6481676 Primal inf 71439.181 (93)
Clp0006I 354  Obj 265.05741 Primal inf 11053.145 (58)
Clp0006I 457  Obj 404.26327
Clp0000I Optimal - objective value 404.26327
Clp0000I Optimal - objective value 404.26327
Clp0032I Optimal objective 404.2632661 - 457 iterations time 0.032, Presolve 0.01
Clp0000I Optimal - objective value 404.26327
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 404.26327
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 17 added rows had average density of 2
Cbc0013I At root node, 17 cuts changed objective from 404.26327 to 406.41181 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 145 row cuts average 2.0 elements, 371 column cuts (371 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (4.23 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 21 on tree, 1e+50 best solution, best possible 415.34674 (35.18 seconds)
Cbc0010I After 200 nodes, 70 on tree, 1e+50 best solution, best possible 415.34674 (39.50 seconds)
Cbc0010I After 300 nodes, 120 on tree, 1e+50 best solution, best possible 415.34674 (43.08 seconds)
Couenne: new cutoff value 4.8399356981e+02 (47.958 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 400 nodes, 150 on tree, 1e+50 best solution, best possible 415.90862 (53.28 seconds)
Cbc0010I After 500 nodes, 196 on tree, 1e+50 best solution, best possible 415.90862 (57.58 seconds)
Cbc0010I After 600 nodes, 246 on tree, 1e+50 best solution, best possible 415.90862 (61.01 seconds)
Couenne: new cutoff value 4.6471804536e+02 (66.9906 seconds)
Cbc0010I After 700 nodes, 286 on tree, 1e+50 best solution, best possible 418.06447 (65.48 seconds)
Cbc0010I After 800 nodes, 298 on tree, 1e+50 best solution, best possible 430.78002 (69.29 seconds)
Cbc0010I After 900 nodes, 308 on tree, 1e+50 best solution, best possible 433.9174 (72.85 seconds)
Cbc0010I After 1000 nodes, 342 on tree, 1e+50 best solution, best possible 433.9174 (76.80 seconds)
Cbc0010I After 1100 nodes, 392 on tree, 1e+50 best solution, best possible 433.9174 (80.25 seconds)
Couenne: new cutoff value 4.6309003841e+02 (85.1901 seconds)
Cbc0010I After 1200 nodes, 415 on tree, 1e+50 best solution, best possible 440.58812 (83.74 seconds)
Cbc0010I After 1300 nodes, 433 on tree, 1e+50 best solution, best possible 445.19698 (87.62 seconds)
Cbc0010I After 1400 nodes, 479 on tree, 1e+50 best solution, best possible 445.19698 (91.66 seconds)
Cbc0010I After 1500 nodes, 529 on tree, 1e+50 best solution, best possible 445.19698 (94.99 seconds)
Couenne: new cutoff value 4.5989860792e+02 (99.2814 seconds)
Cbc0010I After 1600 nodes, 540 on tree, 1e+50 best solution, best possible 454.68405 (98.50 seconds)
Cbc0010I After 1700 nodes, 559 on tree, 1e+50 best solution, best possible 456.12857 (102.25 seconds)
Cbc0010I After 1800 nodes, 607 on tree, 1e+50 best solution, best possible 456.12857 (105.68 seconds)
Couenne: new cutoff value 4.5894816591e+02 (110.78 seconds)
Cbc0010I After 1900 nodes, 616 on tree, 1e+50 best solution, best possible 457.85616 (108.82 seconds)
Cbc0010I After 2000 nodes, 590 on tree, 1e+50 best solution, best possible 458.94881 (111.62 seconds)
Cbc0010I After 2100 nodes, 540 on tree, 1e+50 best solution, best possible 459.02619 (112.90 seconds)
Cbc0010I After 2200 nodes, 490 on tree, 1e+50 best solution, best possible 459.89988 (113.95 seconds)
Cbc0010I After 2300 nodes, 440 on tree, 1e+50 best solution, best possible 459.98469 (115.11 seconds)
Cbc0010I After 2400 nodes, 390 on tree, 1e+50 best solution, best possible 461.75141 (116.17 seconds)
Cbc0010I After 2500 nodes, 340 on tree, 1e+50 best solution, best possible 463.10229 (117.24 seconds)
Cbc0010I After 2600 nodes, 290 on tree, 1e+50 best solution, best possible 463.39785 (118.31 seconds)
Cbc0010I After 2700 nodes, 240 on tree, 1e+50 best solution, best possible 464.72009 (119.43 seconds)
Cbc0010I After 2800 nodes, 190 on tree, 1e+50 best solution, best possible 464.79897 (120.62 seconds)
Cbc0010I After 2900 nodes, 140 on tree, 1e+50 best solution, best possible 474.09942 (121.68 seconds)
Cbc0010I After 3000 nodes, 90 on tree, 1e+50 best solution, best possible 483.998 (122.77 seconds)
Cbc0010I After 3100 nodes, 40 on tree, 1e+50 best solution, best possible 484.1391 (124.06 seconds)
Cbc0001I Search completed - best objective 1e+50, took 62655 iterations and 3180 nodes (124.88 seconds)
Cbc0035I Maximum depth 174, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       2161
Linearization cuts added in total:           2161  (separation time: 0.00995s)
Total solve time:                         124.915s (124.915s in branch-and-bound)
Lower bound:                              458.948
Upper bound:                              458.948  (gap: 0.00%)
Branch-and-bound nodes:                      3180
Stats: /tmp/jl_mWh0L6/model.nl 1890 [var]   30 [int] 1920 [con]  149 [aux]   2161 [root]     2161 [tot] 0.00995 [sep]  124.915 [time]  124.919 [bb]         4.589482e+02 [lower]         4.589482e+02 [upper]    3180 [nodes]
Performance of                           FBBT:	     6.4066s,     2681 runs. fix:          0 shrnk:    6.93075 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    5.54089s,        5 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-30-60-5.txt
