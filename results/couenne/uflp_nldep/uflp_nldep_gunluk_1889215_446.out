solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-50-100-4.txt sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 7.0 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 390.90924       59 177.93397
NLP0014I             2         OPT 392.38649       44 3.788782
Couenne: new cutoff value 3.9238588231e+02 (189.874 seconds)
Loaded instance "/tmp/jl_XlZJ72/model.nl"
Constraints:         5200
Variables:           5150 (50 integer)
Auxiliaries:          499 (0 integer)

Coin0506I Presolve 5599 (-202) rows, 5249 (-400) columns and 26097 (-602) elements
Clp0006I 0  Obj 0 Primal inf 3795.283 (249) Dual inf 3.3573541e+12 (353)
Clp0029I End of values pass after 149 iterations
Clp0006I 149  Obj 392.39588 Primal inf 329.56853 (105) Dual inf 9.4315074e+13 (5011)
Clp0006I 401  Obj 392.39588 Primal inf 19.276474 (21) Dual inf 1.6311487e+12 (192)
Clp0006I 596  Obj 339.69678 Dual inf 11.379346 (26)
Clp0006I 623  Obj 337.46261
Clp0000I Optimal - objective value 337.46261
Clp0032I Optimal objective 337.4626122 - 623 iterations time 0.132, Presolve 0.03
Clp0000I Optimal - objective value 337.46261
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 337.46261
Optimality Based BT: 102 improved bounds
Probing: 50 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 33 added rows had average density of 2
Cbc0013I At root node, 33 cuts changed objective from 337.46261 to 369.78534 in 4 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 59 row cuts average 2.0 elements, 5 column cuts (5 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (36.96 seconds)
Optimality Based BT: 104 improved bounds
Optimality Based BT: 106 improved bounds
Optimality Based BT: 119 improved bounds
Cbc0010I After 100 nodes, 46 on tree, 1e+50 best solution, best possible 387.49546 (205.71 seconds)
Cbc0010I After 200 nodes, 85 on tree, 1e+50 best solution, best possible 387.49546 (217.34 seconds)
Cbc0010I After 300 nodes, 132 on tree, 1e+50 best solution, best possible 387.49546 (228.93 seconds)
Cbc0010I After 400 nodes, 181 on tree, 1e+50 best solution, best possible 387.49546 (240.65 seconds)
Cbc0010I After 500 nodes, 231 on tree, 1e+50 best solution, best possible 387.49546 (252.34 seconds)
Couenne: new cutoff value 3.9091360818e+02 (448.388 seconds)
Cbc0004I Integer solution of 390.91361 found after 2603 iterations and 549 nodes (258.09 seconds)
Cbc0010I After 600 nodes, 72 on tree, 390.91361 best solution, best possible 387.80893 (269.08 seconds)
Cbc0010I After 700 nodes, 101 on tree, 390.91361 best solution, best possible 388.06058 (284.32 seconds)
Cbc0010I After 800 nodes, 136 on tree, 390.91361 best solution, best possible 388.06883 (299.41 seconds)
Cbc0010I After 900 nodes, 158 on tree, 390.91361 best solution, best possible 388.18311 (314.89 seconds)
Cbc0010I After 1000 nodes, 185 on tree, 390.91361 best solution, best possible 388.31155 (332.82 seconds)
Cbc0010I After 1100 nodes, 211 on tree, 390.91361 best solution, best possible 388.45979 (348.08 seconds)
Cbc0010I After 1200 nodes, 237 on tree, 390.91361 best solution, best possible 388.4712 (361.65 seconds)
Cbc0010I After 1300 nodes, 268 on tree, 390.91361 best solution, best possible 388.62856 (378.43 seconds)
Cbc0010I After 1400 nodes, 298 on tree, 390.91361 best solution, best possible 388.63538 (393.56 seconds)
Cbc0010I After 1500 nodes, 330 on tree, 390.91361 best solution, best possible 388.64478 (411.59 seconds)
Cbc0010I After 1600 nodes, 353 on tree, 390.91361 best solution, best possible 388.68787 (426.97 seconds)
Cbc0010I After 1700 nodes, 382 on tree, 390.91361 best solution, best possible 388.71886 (440.60 seconds)
Cbc0010I After 1800 nodes, 404 on tree, 390.91361 best solution, best possible 388.74943 (456.79 seconds)
Cbc0010I After 1900 nodes, 433 on tree, 390.91361 best solution, best possible 388.76585 (472.53 seconds)
Cbc0010I After 2000 nodes, 456 on tree, 390.91361 best solution, best possible 388.77883 (487.11 seconds)
Cbc0010I After 2100 nodes, 485 on tree, 390.91361 best solution, best possible 388.78952 (501.38 seconds)
Cbc0010I After 2200 nodes, 511 on tree, 390.91361 best solution, best possible 388.79965 (515.64 seconds)
Cbc0010I After 2300 nodes, 540 on tree, 390.91361 best solution, best possible 388.81482 (534.04 seconds)
Cbc0010I After 2400 nodes, 569 on tree, 390.91361 best solution, best possible 388.83745 (548.85 seconds)
Cbc0010I After 2500 nodes, 583 on tree, 390.91361 best solution, best possible 388.85026 (561.15 seconds)
Cbc0010I After 2600 nodes, 605 on tree, 390.91361 best solution, best possible 388.85699 (613.15 seconds)
Cbc0010I After 2700 nodes, 634 on tree, 390.91361 best solution, best possible 388.88174 (627.69 seconds)
Cbc0010I After 2800 nodes, 667 on tree, 390.91361 best solution, best possible 388.89698 (647.19 seconds)
Cbc0010I After 2900 nodes, 693 on tree, 390.91361 best solution, best possible 388.92697 (662.46 seconds)
Cbc0010I After 3000 nodes, 722 on tree, 390.91361 best solution, best possible 388.93025 (679.36 seconds)
Cbc0010I After 3100 nodes, 747 on tree, 390.91361 best solution, best possible 388.94323 (698.07 seconds)
Cbc0010I After 3200 nodes, 777 on tree, 390.91361 best solution, best possible 388.95224 (713.85 seconds)
Cbc0010I After 3300 nodes, 802 on tree, 390.91361 best solution, best possible 388.9567 (728.96 seconds)
Cbc0010I After 3400 nodes, 829 on tree, 390.91361 best solution, best possible 388.96924 (744.89 seconds)
Cbc0010I After 3500 nodes, 858 on tree, 390.91361 best solution, best possible 388.9748 (761.07 seconds)
Cbc0010I After 3600 nodes, 886 on tree, 390.91361 best solution, best possible 388.98635 (776.30 seconds)
Cbc0010I After 3700 nodes, 911 on tree, 390.91361 best solution, best possible 389.00068 (791.57 seconds)
Cbc0010I After 3800 nodes, 940 on tree, 390.91361 best solution, best possible 389.00878 (807.51 seconds)
Cbc0010I After 3900 nodes, 967 on tree, 390.91361 best solution, best possible 389.02576 (822.08 seconds)
Cbc0010I After 4000 nodes, 991 on tree, 390.91361 best solution, best possible 389.05448 (838.73 seconds)
Cbc0010I After 4100 nodes, 1023 on tree, 390.91361 best solution, best possible 389.06088 (854.89 seconds)
Cbc0010I After 4200 nodes, 1051 on tree, 390.91361 best solution, best possible 389.07556 (871.91 seconds)
Cbc0010I After 4300 nodes, 1081 on tree, 390.91361 best solution, best possible 389.08253 (887.20 seconds)
Cbc0010I After 4400 nodes, 1108 on tree, 390.91361 best solution, best possible 389.09574 (901.74 seconds)
Cbc0010I After 4500 nodes, 1134 on tree, 390.91361 best solution, best possible 389.1087 (916.39 seconds)
Cbc0010I After 4600 nodes, 1164 on tree, 390.91361 best solution, best possible 389.14289 (932.70 seconds)
Cbc0010I After 4700 nodes, 1190 on tree, 390.91361 best solution, best possible 389.14488 (949.46 seconds)
Cbc0010I After 4800 nodes, 1215 on tree, 390.91361 best solution, best possible 389.16643 (966.00 seconds)
Cbc0010I After 4900 nodes, 1237 on tree, 390.91361 best solution, best possible 389.1735 (980.57 seconds)
Cbc0010I After 5000 nodes, 1266 on tree, 390.91361 best solution, best possible 389.17939 (996.91 seconds)
Cbc0010I After 5100 nodes, 1292 on tree, 390.91361 best solution, best possible 389.18844 (1013.57 seconds)
Cbc0010I After 5200 nodes, 1314 on tree, 390.91361 best solution, best possible 389.20345 (1030.20 seconds)
Cbc0010I After 5300 nodes, 1339 on tree, 390.91361 best solution, best possible 389.20668 (1046.28 seconds)
Cbc0010I After 5400 nodes, 1361 on tree, 390.91361 best solution, best possible 389.21681 (1061.55 seconds)
Cbc0010I After 5500 nodes, 1381 on tree, 390.91361 best solution, best possible 389.22143 (1076.80 seconds)
Cbc0010I After 5600 nodes, 1407 on tree, 390.91361 best solution, best possible 389.23577 (1094.15 seconds)
Cbc0010I After 5700 nodes, 1434 on tree, 390.91361 best solution, best possible 389.24587 (1112.79 seconds)
Cbc0010I After 5800 nodes, 1461 on tree, 390.91361 best solution, best possible 389.26052 (1128.33 seconds)
Cbc0010I After 5900 nodes, 1486 on tree, 390.91361 best solution, best possible 389.26554 (1144.55 seconds)
Cbc0010I After 6000 nodes, 1510 on tree, 390.91361 best solution, best possible 389.29216 (1164.02 seconds)
Cbc0010I After 6100 nodes, 1535 on tree, 390.91361 best solution, best possible 389.30387 (1179.65 seconds)
Cbc0010I After 6200 nodes, 1561 on tree, 390.91361 best solution, best possible 389.31515 (1195.21 seconds)
Cbc0010I After 6300 nodes, 1577 on tree, 390.91361 best solution, best possible 389.32551 (1211.73 seconds)
Cbc0010I After 6400 nodes, 1603 on tree, 390.91361 best solution, best possible 389.33552 (1228.06 seconds)
Cbc0010I After 6500 nodes, 1624 on tree, 390.91361 best solution, best possible 389.35615 (1243.63 seconds)
Cbc0010I After 6600 nodes, 1652 on tree, 390.91361 best solution, best possible 389.37106 (1263.80 seconds)
Cbc0010I After 6700 nodes, 1676 on tree, 390.91361 best solution, best possible 389.37407 (1278.76 seconds)
Cbc0010I After 6800 nodes, 1699 on tree, 390.91361 best solution, best possible 389.37615 (1292.51 seconds)
Cbc0010I After 6900 nodes, 1719 on tree, 390.91361 best solution, best possible 389.38476 (1308.39 seconds)
Cbc0010I After 7000 nodes, 1744 on tree, 390.91361 best solution, best possible 389.39183 (1324.39 seconds)
Cbc0010I After 7100 nodes, 1766 on tree, 390.91361 best solution, best possible 389.39615 (1340.28 seconds)
Cbc0010I After 7200 nodes, 1789 on tree, 390.91361 best solution, best possible 389.39854 (1356.31 seconds)
Cbc0010I After 7300 nodes, 1815 on tree, 390.91361 best solution, best possible 389.40297 (1371.80 seconds)
Cbc0010I After 7400 nodes, 1842 on tree, 390.91361 best solution, best possible 389.4038 (1388.48 seconds)
Cbc0010I After 7500 nodes, 1864 on tree, 390.91361 best solution, best possible 389.41228 (1405.28 seconds)
Cbc0010I After 7600 nodes, 1886 on tree, 390.91361 best solution, best possible 389.42492 (1424.97 seconds)
Cbc0010I After 7700 nodes, 1909 on tree, 390.91361 best solution, best possible 389.43633 (1441.83 seconds)
Cbc0010I After 7800 nodes, 1931 on tree, 390.91361 best solution, best possible 389.44717 (1459.15 seconds)
Cbc0010I After 7900 nodes, 1956 on tree, 390.91361 best solution, best possible 389.47181 (1477.36 seconds)
Cbc0010I After 8000 nodes, 1976 on tree, 390.91361 best solution, best possible 389.47986 (1492.98 seconds)
Cbc0010I After 8100 nodes, 2001 on tree, 390.91361 best solution, best possible 389.48265 (1509.26 seconds)
Cbc0010I After 8200 nodes, 2024 on tree, 390.91361 best solution, best possible 389.48803 (1525.49 seconds)
Cbc0010I After 8300 nodes, 2051 on tree, 390.91361 best solution, best possible 389.4904 (1544.04 seconds)
Cbc0010I After 8400 nodes, 2077 on tree, 390.91361 best solution, best possible 389.49155 (1558.14 seconds)
Cbc0010I After 8500 nodes, 2100 on tree, 390.91361 best solution, best possible 389.4955 (1573.86 seconds)
Cbc0010I After 8600 nodes, 2122 on tree, 390.91361 best solution, best possible 389.49897 (1589.72 seconds)
Cbc0010I After 8700 nodes, 2141 on tree, 390.91361 best solution, best possible 389.50343 (1604.87 seconds)
Cbc0010I After 8800 nodes, 2160 on tree, 390.91361 best solution, best possible 389.51884 (1621.02 seconds)
Cbc0010I After 8900 nodes, 2184 on tree, 390.91361 best solution, best possible 389.53431 (1637.28 seconds)
Cbc0010I After 9000 nodes, 2207 on tree, 390.91361 best solution, best possible 389.53751 (1652.38 seconds)
Cbc0010I After 9100 nodes, 2233 on tree, 390.91361 best solution, best possible 389.54698 (1669.02 seconds)
Cbc0010I After 9200 nodes, 2257 on tree, 390.91361 best solution, best possible 389.54963 (1684.39 seconds)
Cbc0010I After 9300 nodes, 2280 on tree, 390.91361 best solution, best possible 389.55494 (1699.09 seconds)
Cbc0010I After 9400 nodes, 2301 on tree, 390.91361 best solution, best possible 389.56264 (1715.78 seconds)
Cbc0010I After 9500 nodes, 2326 on tree, 390.91361 best solution, best possible 389.5708 (1732.68 seconds)
Cbc0010I After 9600 nodes, 2346 on tree, 390.91361 best solution, best possible 389.57451 (1749.45 seconds)
Cbc0010I After 9700 nodes, 2373 on tree, 390.91361 best solution, best possible 389.58969 (1765.48 seconds)
Cbc0010I After 9800 nodes, 2397 on tree, 390.91361 best solution, best possible 389.59235 (1782.44 seconds)
Cbc0010I After 9900 nodes, 2416 on tree, 390.91361 best solution, best possible 389.59994 (1797.98 seconds)
Cbc0010I After 10000 nodes, 2442 on tree, 390.91361 best solution, best possible 389.60312 (1815.24 seconds)
Cbc0010I After 10100 nodes, 2462 on tree, 390.91361 best solution, best possible 389.61487 (1833.44 seconds)
Cbc0010I After 10200 nodes, 2483 on tree, 390.91361 best solution, best possible 389.61727 (1851.05 seconds)
Cbc0010I After 10300 nodes, 2505 on tree, 390.91361 best solution, best possible 389.6211 (1866.56 seconds)
Cbc0010I After 10400 nodes, 2524 on tree, 390.91361 best solution, best possible 389.62809 (1886.87 seconds)
Cbc0010I After 10500 nodes, 2548 on tree, 390.91361 best solution, best possible 389.6302 (1902.23 seconds)
Cbc0010I After 10600 nodes, 2572 on tree, 390.91361 best solution, best possible 389.63621 (1918.10 seconds)
Cbc0010I After 10700 nodes, 2594 on tree, 390.91361 best solution, best possible 389.6382 (1933.57 seconds)
Cbc0010I After 10800 nodes, 2614 on tree, 390.91361 best solution, best possible 389.64143 (1949.22 seconds)
Cbc0010I After 10900 nodes, 2637 on tree, 390.91361 best solution, best possible 389.64326 (1964.64 seconds)
Cbc0010I After 11000 nodes, 2661 on tree, 390.91361 best solution, best possible 389.65017 (1979.95 seconds)
Cbc0010I After 11100 nodes, 2682 on tree, 390.91361 best solution, best possible 389.65633 (1995.55 seconds)
Cbc0010I After 11200 nodes, 2700 on tree, 390.91361 best solution, best possible 389.66681 (2011.34 seconds)
Cbc0010I After 11300 nodes, 2723 on tree, 390.91361 best solution, best possible 389.67875 (2027.31 seconds)
Cbc0010I After 11400 nodes, 2744 on tree, 390.91361 best solution, best possible 389.68099 (2043.91 seconds)
Cbc0010I After 11500 nodes, 2767 on tree, 390.91361 best solution, best possible 389.68521 (2065.08 seconds)
Cbc0010I After 11600 nodes, 2789 on tree, 390.91361 best solution, best possible 389.69191 (2084.21 seconds)
Cbc0010I After 11700 nodes, 2808 on tree, 390.91361 best solution, best possible 389.69632 (2100.03 seconds)
Cbc0010I After 11800 nodes, 2826 on tree, 390.91361 best solution, best possible 389.69929 (2122.24 seconds)
Cbc0010I After 11900 nodes, 2846 on tree, 390.91361 best solution, best possible 389.70421 (2138.79 seconds)
Cbc0010I After 12000 nodes, 2870 on tree, 390.91361 best solution, best possible 389.70865 (2155.45 seconds)
Cbc0010I After 12100 nodes, 2893 on tree, 390.91361 best solution, best possible 389.71073 (2169.96 seconds)
Cbc0010I After 12200 nodes, 2911 on tree, 390.91361 best solution, best possible 389.71183 (2185.02 seconds)
Cbc0010I After 12300 nodes, 2931 on tree, 390.91361 best solution, best possible 389.71395 (2201.66 seconds)
Cbc0010I After 12400 nodes, 2955 on tree, 390.91361 best solution, best possible 389.71842 (2218.48 seconds)
Cbc0010I After 12500 nodes, 2975 on tree, 390.91361 best solution, best possible 389.72306 (2235.31 seconds)
Cbc0010I After 12600 nodes, 2996 on tree, 390.91361 best solution, best possible 389.72516 (2251.67 seconds)
Cbc0010I After 12700 nodes, 3019 on tree, 390.91361 best solution, best possible 389.72722 (2266.96 seconds)
Cbc0010I After 12800 nodes, 3040 on tree, 390.91361 best solution, best possible 389.73607 (2282.94 seconds)
Cbc0010I After 12900 nodes, 3062 on tree, 390.91361 best solution, best possible 389.74256 (2300.95 seconds)
Cbc0010I After 13000 nodes, 3084 on tree, 390.91361 best solution, best possible 389.74419 (2318.77 seconds)
Cbc0010I After 13100 nodes, 3109 on tree, 390.91361 best solution, best possible 389.74793 (2334.41 seconds)
Cbc0010I After 13200 nodes, 3130 on tree, 390.91361 best solution, best possible 389.75716 (2349.61 seconds)
Cbc0010I After 13300 nodes, 3155 on tree, 390.91361 best solution, best possible 389.76431 (2365.95 seconds)
Cbc0010I After 13400 nodes, 3177 on tree, 390.91361 best solution, best possible 389.76605 (2382.88 seconds)
Cbc0010I After 13500 nodes, 3198 on tree, 390.91361 best solution, best possible 389.76753 (2397.26 seconds)
Cbc0010I After 13600 nodes, 3215 on tree, 390.91361 best solution, best possible 389.77051 (2411.20 seconds)
Cbc0010I After 13700 nodes, 3234 on tree, 390.91361 best solution, best possible 389.77501 (2427.53 seconds)
Cbc0010I After 13800 nodes, 3257 on tree, 390.91361 best solution, best possible 389.78162 (2442.83 seconds)
Cbc0010I After 13900 nodes, 3278 on tree, 390.91361 best solution, best possible 389.78493 (2458.79 seconds)
Cbc0010I After 14000 nodes, 3297 on tree, 390.91361 best solution, best possible 389.78774 (2478.26 seconds)
Cbc0010I After 14100 nodes, 3313 on tree, 390.91361 best solution, best possible 389.79242 (2493.67 seconds)
Cbc0010I After 14200 nodes, 3334 on tree, 390.91361 best solution, best possible 389.79566 (2510.54 seconds)
Cbc0010I After 14300 nodes, 3356 on tree, 390.91361 best solution, best possible 389.79867 (2525.20 seconds)
Cbc0010I After 14400 nodes, 3377 on tree, 390.91361 best solution, best possible 389.80182 (2539.94 seconds)
Cbc0010I After 14500 nodes, 3391 on tree, 390.91361 best solution, best possible 389.80438 (2555.87 seconds)
Cbc0010I After 14600 nodes, 3409 on tree, 390.91361 best solution, best possible 389.80971 (2573.67 seconds)
Cbc0010I After 14700 nodes, 3431 on tree, 390.91361 best solution, best possible 389.81783 (2590.21 seconds)
Cbc0010I After 14800 nodes, 3446 on tree, 390.91361 best solution, best possible 389.82757 (2606.46 seconds)
Cbc0010I After 14900 nodes, 3467 on tree, 390.91361 best solution, best possible 389.83329 (2621.42 seconds)
Cbc0010I After 15000 nodes, 3485 on tree, 390.91361 best solution, best possible 389.8351 (2635.23 seconds)
Cbc0010I After 15100 nodes, 3508 on tree, 390.91361 best solution, best possible 389.83658 (2653.01 seconds)
Cbc0010I After 15200 nodes, 3525 on tree, 390.91361 best solution, best possible 389.83783 (2668.68 seconds)
Cbc0010I After 15300 nodes, 3545 on tree, 390.91361 best solution, best possible 389.84038 (2684.79 seconds)
Cbc0010I After 15400 nodes, 3563 on tree, 390.91361 best solution, best possible 389.8475 (2702.04 seconds)
Cbc0010I After 15500 nodes, 3585 on tree, 390.91361 best solution, best possible 389.84861 (2717.85 seconds)
Cbc0010I After 15600 nodes, 3605 on tree, 390.91361 best solution, best possible 389.8513 (2734.33 seconds)
Cbc0010I After 15700 nodes, 3618 on tree, 390.91361 best solution, best possible 389.85537 (2750.72 seconds)
Cbc0010I After 15800 nodes, 3638 on tree, 390.91361 best solution, best possible 389.85683 (2767.11 seconds)
Cbc0010I After 15900 nodes, 3659 on tree, 390.91361 best solution, best possible 389.85892 (2782.28 seconds)
Cbc0010I After 16000 nodes, 3679 on tree, 390.91361 best solution, best possible 389.86128 (2795.85 seconds)
Cbc0010I After 16100 nodes, 3698 on tree, 390.91361 best solution, best possible 389.86584 (2812.22 seconds)
Cbc0010I After 16200 nodes, 3715 on tree, 390.91361 best solution, best possible 389.86891 (2828.55 seconds)
Cbc0010I After 16300 nodes, 3730 on tree, 390.91361 best solution, best possible 389.87433 (2845.91 seconds)
Cbc0010I After 16400 nodes, 3747 on tree, 390.91361 best solution, best possible 389.8758 (2862.07 seconds)
Cbc0010I After 16500 nodes, 3767 on tree, 390.91361 best solution, best possible 389.87762 (2877.92 seconds)
Cbc0010I After 16600 nodes, 3782 on tree, 390.91361 best solution, best possible 389.88066 (2892.70 seconds)
Cbc0010I After 16700 nodes, 3800 on tree, 390.91361 best solution, best possible 389.88154 (2905.42 seconds)
Couenne: new cutoff value 3.9091346490e+02 (3104.58 seconds)
Cbc0004I Integer solution of 390.91346 found after 152049 iterations and 16781 nodes (2914.22 seconds)
Cbc0010I After 16800 nodes, 3803 on tree, 390.91346 best solution, best possible 389.88226 (2916.84 seconds)
Cbc0010I After 16900 nodes, 3824 on tree, 390.91346 best solution, best possible 389.88314 (2932.06 seconds)
Cbc0010I After 17000 nodes, 3838 on tree, 390.91346 best solution, best possible 389.8833 (2946.28 seconds)
Cbc0010I After 17100 nodes, 3855 on tree, 390.91346 best solution, best possible 389.8855 (2962.49 seconds)
Cbc0010I After 17200 nodes, 3870 on tree, 390.91346 best solution, best possible 389.88729 (2976.28 seconds)
Cbc0010I After 17300 nodes, 3889 on tree, 390.91346 best solution, best possible 389.8892 (2990.97 seconds)
Cbc0010I After 17400 nodes, 3905 on tree, 390.91346 best solution, best possible 389.89117 (3010.46 seconds)
Cbc0010I After 17500 nodes, 3924 on tree, 390.91346 best solution, best possible 389.89233 (3026.07 seconds)
Cbc0010I After 17600 nodes, 3945 on tree, 390.91346 best solution, best possible 389.89514 (3042.37 seconds)
Cbc0010I After 17700 nodes, 3961 on tree, 390.91346 best solution, best possible 389.89675 (3058.56 seconds)
Cbc0010I After 17800 nodes, 3980 on tree, 390.91346 best solution, best possible 389.89823 (3073.05 seconds)
Cbc0010I After 17900 nodes, 4001 on tree, 390.91346 best solution, best possible 389.89887 (3086.78 seconds)
Cbc0010I After 18000 nodes, 4019 on tree, 390.91346 best solution, best possible 389.90083 (3103.59 seconds)
Cbc0010I After 18100 nodes, 4036 on tree, 390.91346 best solution, best possible 389.91572 (3119.47 seconds)
Cbc0010I After 18200 nodes, 4055 on tree, 390.91346 best solution, best possible 389.91771 (3132.99 seconds)
Cbc0010I After 18300 nodes, 4069 on tree, 390.91346 best solution, best possible 389.91962 (3147.63 seconds)
Cbc0010I After 18400 nodes, 4088 on tree, 390.91346 best solution, best possible 389.92191 (3163.35 seconds)
Cbc0010I After 18500 nodes, 4106 on tree, 390.91346 best solution, best possible 389.92426 (3180.30 seconds)
Cbc0010I After 18600 nodes, 4125 on tree, 390.91346 best solution, best possible 389.9245 (3193.68 seconds)
Cbc0010I After 18700 nodes, 4141 on tree, 390.91346 best solution, best possible 389.92613 (3206.43 seconds)
Cbc0010I After 18800 nodes, 4160 on tree, 390.91346 best solution, best possible 389.92841 (3221.90 seconds)
Cbc0010I After 18900 nodes, 4179 on tree, 390.91346 best solution, best possible 389.93087 (3237.52 seconds)
Cbc0010I After 19000 nodes, 4196 on tree, 390.91346 best solution, best possible 389.93535 (3251.33 seconds)
Cbc0010I After 19100 nodes, 4216 on tree, 390.91346 best solution, best possible 389.93666 (3266.14 seconds)
Cbc0010I After 19200 nodes, 4238 on tree, 390.91346 best solution, best possible 389.93846 (3280.18 seconds)
Cbc0010I After 19300 nodes, 4253 on tree, 390.91346 best solution, best possible 389.94133 (3297.34 seconds)
Cbc0010I After 19400 nodes, 4270 on tree, 390.91346 best solution, best possible 389.94353 (3311.80 seconds)
Cbc0010I After 19500 nodes, 4285 on tree, 390.91346 best solution, best possible 389.94523 (3326.62 seconds)
Cbc0010I After 19600 nodes, 4302 on tree, 390.91346 best solution, best possible 389.94736 (3345.75 seconds)
Cbc0010I After 19700 nodes, 4319 on tree, 390.91346 best solution, best possible 389.95 (3359.92 seconds)
Cbc0010I After 19800 nodes, 4337 on tree, 390.91346 best solution, best possible 389.95235 (3374.59 seconds)
Cbc0010I After 19900 nodes, 4355 on tree, 390.91346 best solution, best possible 389.95377 (3390.07 seconds)
Cbc0010I After 20000 nodes, 4373 on tree, 390.91346 best solution, best possible 389.95549 (3406.39 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 390.91346 (best possible 389.95549), took 182519 iterations and 20026 nodes (3422.98 seconds)
Cbc0035I Maximum depth 274, 6332 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       5801
Linearization cuts added in total:           5801  (separation time: 0.056817s)
Total solve time:                         3423.14s (3423.14s in branch-and-bound)
Lower bound:                              389.955
Upper bound:                              390.913  (gap: 0.25%)
Branch-and-bound nodes:                     20026
Stats: /tmp/jl_XlZJ72/model.nl 5150 [var]   50 [int] 5200 [con]  499 [aux]   5801 [root]     5801 [tot] 0.056817 [sep]  3423.14 [time]  3423.15 [bb]         3.899555e+02 [lower]         3.909135e+02 [upper]   20026 [nodes]
Performance of                           FBBT:	    377.524s,    27405 runs. fix:   0.149527 shrnk:     2.3187 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    29.0158s,        4 runs. fix:   0.409091 shrnk:    407.105 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-50-100-4.txt
