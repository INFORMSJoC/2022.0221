solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-5.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.8837194087e+03 (2.80788 seconds)
2.8 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 548.86753       59 3.234745
Couenne: new cutoff value 7.3194145223e+02 (6.62367 seconds)
NLP0014I             2         OPT 596.77488       30 1.779222
Couenne: new cutoff value 5.9677524149e+02 (8.40664 seconds)
Loaded instance "/tmp/jl_xxDENi/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3680 (-1) rows, 3400 (-119) columns and 16919 (-120) elements
Clp0006I 0  Obj -5346.5625 Primal inf 7070562.3 (120)
Clp0006I 148  Obj -3876.2687 Primal inf 4014482.7 (193)
Clp0006I 296  Obj -7.0999801 Primal inf 13922.241 (91)
Clp0006I 444  Obj 326.66035 Primal inf 18454.985 (78)
Clp0006I 555  Obj 450.67908
Clp0000I Optimal - objective value 450.67908
Clp0006I 0  Obj 450.67908 Dual inf 6.332402e-08 (1)
Clp0000I Optimal - objective value 450.67908
Clp0032I Optimal objective 450.679079 - 555 iterations time 0.052, Presolve 0.02
Clp0006I 0  Obj 450.67908 Dual inf 6.332402e-08 (1)
Clp0000I Optimal - objective value 450.67908
NLP Heuristic: time limit reached.
Clp0006I 0  Obj 450.67908 Dual inf 4.6332402e-07 (1)
Clp0000I Optimal - objective value 450.67908
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 19 added rows had average density of 2
Cbc0013I At root node, 19 cuts changed objective from 450.67908 to 450.75623 in 10 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 184 row cuts average 2.0 elements, 641 column cuts (641 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (11.48 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 24 on tree, 1e+50 best solution, best possible 482.87179 (73.80 seconds)
Cbc0010I After 200 nodes, 74 on tree, 1e+50 best solution, best possible 482.87179 (82.55 seconds)
Cbc0010I After 300 nodes, 124 on tree, 1e+50 best solution, best possible 482.87179 (90.21 seconds)
Couenne: new cutoff value 5.4886810498e+02 (103.505 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 400 nodes, 165 on tree, 1e+50 best solution, best possible 497.52794 (98.43 seconds)
Cbc0010I After 500 nodes, 180 on tree, 1e+50 best solution, best possible 508.33835 (105.64 seconds)
Cbc0010I After 600 nodes, 189 on tree, 1e+50 best solution, best possible 539.87546 (112.47 seconds)
Cbc0010I After 700 nodes, 217 on tree, 1e+50 best solution, best possible 542.0964 (120.34 seconds)
Cbc0010I After 800 nodes, 251 on tree, 1e+50 best solution, best possible 543.00765 (128.92 seconds)
Cbc0010I After 900 nodes, 270 on tree, 1e+50 best solution, best possible 543.31524 (136.56 seconds)
Cbc0010I After 1000 nodes, 293 on tree, 1e+50 best solution, best possible 543.42076 (144.33 seconds)
Cbc0010I After 1100 nodes, 321 on tree, 1e+50 best solution, best possible 543.51012 (152.64 seconds)
Cbc0010I After 1200 nodes, 345 on tree, 1e+50 best solution, best possible 543.71072 (160.61 seconds)
Cbc0010I After 1300 nodes, 368 on tree, 1e+50 best solution, best possible 543.90294 (168.82 seconds)
Cbc0010I After 1400 nodes, 400 on tree, 1e+50 best solution, best possible 544.00128 (177.03 seconds)
Cbc0010I After 1500 nodes, 431 on tree, 1e+50 best solution, best possible 544.12248 (185.42 seconds)
Cbc0010I After 1600 nodes, 462 on tree, 1e+50 best solution, best possible 544.23184 (193.80 seconds)
Cbc0010I After 1700 nodes, 486 on tree, 1e+50 best solution, best possible 544.31205 (201.85 seconds)
Cbc0010I After 1800 nodes, 516 on tree, 1e+50 best solution, best possible 544.38349 (210.20 seconds)
Cbc0010I After 1900 nodes, 541 on tree, 1e+50 best solution, best possible 544.42443 (218.08 seconds)
Cbc0010I After 2000 nodes, 556 on tree, 1e+50 best solution, best possible 544.52669 (225.77 seconds)
Cbc0010I After 2100 nodes, 576 on tree, 1e+50 best solution, best possible 544.56467 (233.82 seconds)
Cbc0010I After 2200 nodes, 596 on tree, 1e+50 best solution, best possible 544.65652 (241.82 seconds)
Cbc0010I After 2300 nodes, 617 on tree, 1e+50 best solution, best possible 544.75851 (249.89 seconds)
Cbc0010I After 2400 nodes, 637 on tree, 1e+50 best solution, best possible 544.87591 (257.59 seconds)
Cbc0010I After 2500 nodes, 657 on tree, 1e+50 best solution, best possible 544.89197 (265.29 seconds)
Cbc0010I After 2600 nodes, 671 on tree, 1e+50 best solution, best possible 544.94727 (273.05 seconds)
Cbc0010I After 2700 nodes, 694 on tree, 1e+50 best solution, best possible 545.00405 (280.91 seconds)
Cbc0010I After 2800 nodes, 709 on tree, 1e+50 best solution, best possible 545.04794 (288.43 seconds)
Cbc0010I After 2900 nodes, 725 on tree, 1e+50 best solution, best possible 545.10046 (298.82 seconds)
Cbc0010I After 3000 nodes, 746 on tree, 1e+50 best solution, best possible 545.13877 (306.86 seconds)
Cbc0010I After 3100 nodes, 760 on tree, 1e+50 best solution, best possible 545.18216 (314.06 seconds)
Cbc0010I After 3200 nodes, 771 on tree, 1e+50 best solution, best possible 545.22186 (320.98 seconds)
Cbc0010I After 3300 nodes, 793 on tree, 1e+50 best solution, best possible 545.28057 (328.53 seconds)
Cbc0010I After 3400 nodes, 806 on tree, 1e+50 best solution, best possible 545.30571 (335.75 seconds)
Cbc0010I After 3500 nodes, 822 on tree, 1e+50 best solution, best possible 545.34967 (343.33 seconds)
Cbc0010I After 3600 nodes, 835 on tree, 1e+50 best solution, best possible 545.38517 (350.49 seconds)
Cbc0010I After 3700 nodes, 847 on tree, 1e+50 best solution, best possible 545.43316 (357.55 seconds)
Cbc0010I After 3800 nodes, 864 on tree, 1e+50 best solution, best possible 545.50565 (364.78 seconds)
Cbc0010I After 3900 nodes, 880 on tree, 1e+50 best solution, best possible 545.53809 (372.06 seconds)
Cbc0010I After 4000 nodes, 890 on tree, 1e+50 best solution, best possible 545.59931 (379.01 seconds)
Cbc0010I After 4100 nodes, 898 on tree, 1e+50 best solution, best possible 545.63524 (385.83 seconds)
Cbc0010I After 4200 nodes, 905 on tree, 1e+50 best solution, best possible 545.68108 (392.68 seconds)
Cbc0010I After 4300 nodes, 915 on tree, 1e+50 best solution, best possible 545.7301 (399.88 seconds)
Cbc0010I After 4400 nodes, 926 on tree, 1e+50 best solution, best possible 545.75653 (407.54 seconds)
Cbc0010I After 4500 nodes, 932 on tree, 1e+50 best solution, best possible 545.77663 (414.33 seconds)
Cbc0010I After 4600 nodes, 944 on tree, 1e+50 best solution, best possible 545.80304 (421.19 seconds)
Cbc0010I After 4700 nodes, 952 on tree, 1e+50 best solution, best possible 545.82462 (427.96 seconds)
Cbc0010I After 4800 nodes, 962 on tree, 1e+50 best solution, best possible 545.86998 (435.01 seconds)
Cbc0010I After 4900 nodes, 971 on tree, 1e+50 best solution, best possible 545.89964 (442.27 seconds)
Cbc0010I After 5000 nodes, 972 on tree, 1e+50 best solution, best possible 545.92609 (448.24 seconds)
Cbc0010I After 5100 nodes, 981 on tree, 1e+50 best solution, best possible 545.94607 (454.83 seconds)
Cbc0010I After 5200 nodes, 986 on tree, 1e+50 best solution, best possible 545.97706 (461.95 seconds)
Cbc0010I After 5300 nodes, 994 on tree, 1e+50 best solution, best possible 546.01376 (468.50 seconds)
Cbc0010I After 5400 nodes, 1003 on tree, 1e+50 best solution, best possible 546.04702 (474.98 seconds)
Cbc0010I After 5500 nodes, 1001 on tree, 1e+50 best solution, best possible 546.08336 (481.89 seconds)
Cbc0010I After 5600 nodes, 1007 on tree, 1e+50 best solution, best possible 546.11216 (488.11 seconds)
Cbc0010I After 5700 nodes, 1009 on tree, 1e+50 best solution, best possible 546.16135 (494.34 seconds)
Cbc0010I After 5800 nodes, 1012 on tree, 1e+50 best solution, best possible 546.20171 (500.67 seconds)
Cbc0010I After 5900 nodes, 1016 on tree, 1e+50 best solution, best possible 546.23264 (506.68 seconds)
Cbc0010I After 6000 nodes, 1022 on tree, 1e+50 best solution, best possible 546.25515 (512.76 seconds)
Cbc0010I After 6100 nodes, 1026 on tree, 1e+50 best solution, best possible 546.28171 (519.57 seconds)
Cbc0010I After 6200 nodes, 1030 on tree, 1e+50 best solution, best possible 546.31536 (525.87 seconds)
Cbc0010I After 6300 nodes, 1030 on tree, 1e+50 best solution, best possible 546.3552 (531.63 seconds)
Cbc0010I After 6400 nodes, 1028 on tree, 1e+50 best solution, best possible 546.38105 (537.65 seconds)
Cbc0010I After 6500 nodes, 1028 on tree, 1e+50 best solution, best possible 546.40496 (543.81 seconds)
Cbc0010I After 6600 nodes, 1027 on tree, 1e+50 best solution, best possible 546.45291 (549.56 seconds)
Cbc0010I After 6700 nodes, 1026 on tree, 1e+50 best solution, best possible 546.47563 (556.29 seconds)
Cbc0010I After 6800 nodes, 1025 on tree, 1e+50 best solution, best possible 546.50148 (562.29 seconds)
Cbc0010I After 6900 nodes, 1022 on tree, 1e+50 best solution, best possible 546.53203 (567.95 seconds)
Cbc0010I After 7000 nodes, 1006 on tree, 1e+50 best solution, best possible 546.56987 (573.58 seconds)
Cbc0010I After 7100 nodes, 1001 on tree, 1e+50 best solution, best possible 546.59649 (579.82 seconds)
Cbc0010I After 7200 nodes, 1003 on tree, 1e+50 best solution, best possible 546.62965 (585.97 seconds)
Cbc0010I After 7300 nodes, 1000 on tree, 1e+50 best solution, best possible 546.6627 (592.70 seconds)
Cbc0010I After 7400 nodes, 994 on tree, 1e+50 best solution, best possible 546.68179 (598.49 seconds)
Cbc0010I After 7500 nodes, 986 on tree, 1e+50 best solution, best possible 546.70214 (604.41 seconds)
Cbc0010I After 7600 nodes, 986 on tree, 1e+50 best solution, best possible 546.72347 (610.45 seconds)
Cbc0010I After 7700 nodes, 981 on tree, 1e+50 best solution, best possible 546.74718 (616.59 seconds)
Cbc0010I After 7800 nodes, 983 on tree, 1e+50 best solution, best possible 546.77491 (622.82 seconds)
Cbc0010I After 7900 nodes, 971 on tree, 1e+50 best solution, best possible 546.80401 (628.47 seconds)
Cbc0010I After 8000 nodes, 962 on tree, 1e+50 best solution, best possible 546.83637 (634.23 seconds)
Cbc0010I After 8100 nodes, 954 on tree, 1e+50 best solution, best possible 546.85152 (639.81 seconds)
Cbc0010I After 8200 nodes, 949 on tree, 1e+50 best solution, best possible 546.88623 (645.66 seconds)
Cbc0010I After 8300 nodes, 932 on tree, 1e+50 best solution, best possible 546.91802 (651.24 seconds)
Cbc0010I After 8400 nodes, 922 on tree, 1e+50 best solution, best possible 546.95553 (656.55 seconds)
Cbc0010I After 8500 nodes, 902 on tree, 1e+50 best solution, best possible 546.99637 (661.75 seconds)
Cbc0010I After 8600 nodes, 882 on tree, 1e+50 best solution, best possible 547.04647 (667.44 seconds)
Cbc0010I After 8700 nodes, 869 on tree, 1e+50 best solution, best possible 547.07491 (673.55 seconds)
Cbc0010I After 8800 nodes, 850 on tree, 1e+50 best solution, best possible 547.11923 (678.82 seconds)
Cbc0010I After 8900 nodes, 835 on tree, 1e+50 best solution, best possible 547.1415 (684.21 seconds)
Cbc0010I After 9000 nodes, 810 on tree, 1e+50 best solution, best possible 547.18356 (689.75 seconds)
Cbc0010I After 9100 nodes, 793 on tree, 1e+50 best solution, best possible 547.22419 (695.74 seconds)
Cbc0010I After 9200 nodes, 772 on tree, 1e+50 best solution, best possible 547.2714 (701.23 seconds)
Cbc0010I After 9300 nodes, 759 on tree, 1e+50 best solution, best possible 547.30876 (706.67 seconds)
Cbc0010I After 9400 nodes, 735 on tree, 1e+50 best solution, best possible 547.36671 (712.17 seconds)
Cbc0010I After 9500 nodes, 720 on tree, 1e+50 best solution, best possible 547.40849 (717.89 seconds)
Cbc0010I After 9600 nodes, 696 on tree, 1e+50 best solution, best possible 547.44732 (723.01 seconds)
Cbc0010I After 9700 nodes, 676 on tree, 1e+50 best solution, best possible 547.48132 (728.19 seconds)
Cbc0010I After 9800 nodes, 658 on tree, 1e+50 best solution, best possible 547.54361 (733.41 seconds)
Cbc0010I After 9900 nodes, 621 on tree, 1e+50 best solution, best possible 547.61619 (737.98 seconds)
Cbc0010I After 10000 nodes, 592 on tree, 1e+50 best solution, best possible 547.69281 (742.69 seconds)
Cbc0010I After 10100 nodes, 567 on tree, 1e+50 best solution, best possible 547.7489 (750.51 seconds)
Cbc0010I After 10200 nodes, 539 on tree, 1e+50 best solution, best possible 547.80889 (755.60 seconds)
Cbc0010I After 10300 nodes, 516 on tree, 1e+50 best solution, best possible 547.86318 (760.55 seconds)
Cbc0010I After 10400 nodes, 495 on tree, 1e+50 best solution, best possible 547.93005 (765.67 seconds)
Cbc0010I After 10500 nodes, 470 on tree, 1e+50 best solution, best possible 548.01591 (770.86 seconds)
Cbc0010I After 10600 nodes, 446 on tree, 1e+50 best solution, best possible 548.07462 (775.63 seconds)
Cbc0010I After 10700 nodes, 423 on tree, 1e+50 best solution, best possible 548.13071 (780.73 seconds)
Cbc0010I After 10800 nodes, 391 on tree, 1e+50 best solution, best possible 548.21407 (785.48 seconds)
Cbc0010I After 10900 nodes, 350 on tree, 1e+50 best solution, best possible 548.32738 (789.42 seconds)
Cbc0010I After 11000 nodes, 311 on tree, 1e+50 best solution, best possible 548.42475 (793.44 seconds)
Cbc0010I After 11100 nodes, 267 on tree, 1e+50 best solution, best possible 548.55212 (796.91 seconds)
Cbc0010I After 11200 nodes, 223 on tree, 1e+50 best solution, best possible 548.69531 (800.33 seconds)
Cbc0010I After 11300 nodes, 180 on tree, 1e+50 best solution, best possible 548.79142 (803.73 seconds)
Cbc0010I After 11400 nodes, 141 on tree, 1e+50 best solution, best possible 548.86811 (807.57 seconds)
Cbc0010I After 11500 nodes, 92 on tree, 1e+50 best solution, best possible 548.88433 (809.68 seconds)
Cbc0010I After 11600 nodes, 42 on tree, 1e+50 best solution, best possible 549.38077 (811.48 seconds)
Cbc0001I Search completed - best objective 1e+50, took 331279 iterations and 11684 nodes (812.97 seconds)
Cbc0035I Maximum depth 194, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.020534s)
Total solve time:                          813.02s (813.02s in branch-and-bound)
Lower bound:                              548.868
Upper bound:                              548.868  (gap: 0.00%)
Branch-and-bound nodes:                     11684
Stats: /tmp/jl_xxDENi/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.020534 [sep]   813.02 [time]  813.027 [bb]         5.488681e+02 [lower]         5.488681e+02 [upper]   11684 [nodes]
Performance of                           FBBT:	    70.1478s,    15669 runs. fix:          0 shrnk:    2.73216 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	     12.748s,        6 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-5.txt
