solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-30-60-9.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.2601011372e+03 (0.92794 seconds)
0.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 464.15577       45 1.317508
NLP0014I             2         OPT 477.98288       26 0.711671
Loaded instance "/tmp/jl_AfitKr/model.nl"
Constraints:         1920
Variables:           1890 (30 integer)
Auxiliaries:          149 (0 integer)

Coin0506I Presolve 2161 (0) rows, 1951 (-88) columns and 9691 (-88) elements
Clp0006I 0  Obj -4151.25 Primal inf 3441908.6 (90)
Clp0006I 114  Obj -4151.25 Primal inf 1.3646443e+08 (94)
Clp0006I 232  Obj 43.473214 Primal inf 3688.7341 (55)
Clp0006I 350  Obj 283.62066 Primal inf 53668.85 (177)
Clp0006I 454  Obj 363.41948
Clp0000I Optimal - objective value 363.41948
Clp0000I Optimal - objective value 363.41948
Clp0032I Optimal objective 363.4194773 - 454 iterations time 0.042, Presolve 0.01
Clp0000I Optimal - objective value 363.41948
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 363.41948
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 17 added rows had average density of 2
Cbc0013I At root node, 17 cuts changed objective from 363.41948 to 363.64799 in 14 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 226 row cuts average 2.0 elements, 616 column cuts (616 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (4.61 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 50 on tree, 1e+50 best solution, best possible 365.4524 (46.53 seconds)
Cbc0010I After 200 nodes, 100 on tree, 1e+50 best solution, best possible 365.4524 (50.19 seconds)
Cbc0010I After 300 nodes, 150 on tree, 1e+50 best solution, best possible 365.4524 (53.47 seconds)
Couenne: new cutoff value 4.7833650567e+02 (58.8456 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 400 nodes, 195 on tree, 1e+50 best solution, best possible 365.55533 (72.12 seconds)
Cbc0010I After 500 nodes, 217 on tree, 1e+50 best solution, best possible 365.55533 (76.96 seconds)
Cbc0010I After 600 nodes, 265 on tree, 1e+50 best solution, best possible 365.55533 (81.55 seconds)
Cbc0010I After 700 nodes, 315 on tree, 1e+50 best solution, best possible 365.55533 (85.62 seconds)
Couenne: new cutoff value 4.7127884977e+02 (90.4485 seconds)
Cbc0010I After 800 nodes, 340 on tree, 1e+50 best solution, best possible 387.32947 (94.66 seconds)
Cbc0010I After 900 nodes, 356 on tree, 1e+50 best solution, best possible 387.40686 (99.20 seconds)
Cbc0010I After 1000 nodes, 399 on tree, 1e+50 best solution, best possible 387.40686 (103.77 seconds)
Cbc0010I After 1100 nodes, 449 on tree, 1e+50 best solution, best possible 387.40686 (108.15 seconds)
Couenne: new cutoff value 4.6653507277e+02 (114.259 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 1200 nodes, 486 on tree, 1e+50 best solution, best possible 387.59525 (114.42 seconds)
Cbc0010I After 1300 nodes, 490 on tree, 1e+50 best solution, best possible 398.93762 (118.66 seconds)
Cbc0010I After 1400 nodes, 500 on tree, 1e+50 best solution, best possible 398.95383 (122.90 seconds)
Cbc0010I After 1500 nodes, 527 on tree, 1e+50 best solution, best possible 398.95383 (127.05 seconds)
Cbc0010I After 1600 nodes, 572 on tree, 1e+50 best solution, best possible 398.95383 (131.45 seconds)
Couenne: new cutoff value 4.6613261486e+02 (136.643 seconds)
Couenne: new cutoff value 4.6613187215e+02 (136.701 seconds)
Cbc0010I After 1700 nodes, 602 on tree, 1e+50 best solution, best possible 398.96512 (135.33 seconds)
Cbc0010I After 1800 nodes, 617 on tree, 1e+50 best solution, best possible 399.41573 (139.53 seconds)
Cbc0010I After 1900 nodes, 660 on tree, 1e+50 best solution, best possible 399.41573 (143.95 seconds)
Cbc0010I After 2000 nodes, 710 on tree, 1e+50 best solution, best possible 399.41573 (148.09 seconds)
Couenne: new cutoff value 4.6415609365e+02 (152.614 seconds)
Cbc0010I After 2100 nodes, 729 on tree, 1e+50 best solution, best possible 399.89965 (151.80 seconds)
Cbc0010I After 2200 nodes, 729 on tree, 1e+50 best solution, best possible 411.8759 (155.71 seconds)
Cbc0010I After 2300 nodes, 735 on tree, 1e+50 best solution, best possible 418.18045 (160.99 seconds)
Cbc0010I After 2400 nodes, 737 on tree, 1e+50 best solution, best possible 440.89004 (164.70 seconds)
Cbc0010I After 2500 nodes, 745 on tree, 1e+50 best solution, best possible 442.76643 (168.60 seconds)
Cbc0010I After 2600 nodes, 757 on tree, 1e+50 best solution, best possible 443.77045 (172.44 seconds)
Cbc0010I After 2700 nodes, 769 on tree, 1e+50 best solution, best possible 446.33064 (176.31 seconds)
Cbc0010I After 2800 nodes, 773 on tree, 1e+50 best solution, best possible 447.96618 (181.60 seconds)
Cbc0010I After 2900 nodes, 770 on tree, 1e+50 best solution, best possible 448.9964 (185.25 seconds)
Cbc0010I After 3000 nodes, 771 on tree, 1e+50 best solution, best possible 451.68734 (188.99 seconds)
Cbc0010I After 3100 nodes, 777 on tree, 1e+50 best solution, best possible 453.05696 (194.79 seconds)
Cbc0010I After 3200 nodes, 792 on tree, 1e+50 best solution, best possible 453.10779 (198.91 seconds)
Cbc0010I After 3300 nodes, 795 on tree, 1e+50 best solution, best possible 454.16852 (202.63 seconds)
Cbc0010I After 3400 nodes, 808 on tree, 1e+50 best solution, best possible 455.65586 (206.82 seconds)
Cbc0010I After 3500 nodes, 826 on tree, 1e+50 best solution, best possible 456.26289 (210.89 seconds)
Cbc0010I After 3600 nodes, 845 on tree, 1e+50 best solution, best possible 456.39071 (214.91 seconds)
Cbc0010I After 3700 nodes, 853 on tree, 1e+50 best solution, best possible 457.04538 (218.93 seconds)
Cbc0010I After 3800 nodes, 861 on tree, 1e+50 best solution, best possible 457.51302 (222.77 seconds)
Cbc0010I After 3900 nodes, 874 on tree, 1e+50 best solution, best possible 457.61751 (226.83 seconds)
Cbc0010I After 4000 nodes, 888 on tree, 1e+50 best solution, best possible 457.78942 (230.94 seconds)
Cbc0010I After 4100 nodes, 895 on tree, 1e+50 best solution, best possible 457.90694 (234.86 seconds)
Cbc0010I After 4200 nodes, 904 on tree, 1e+50 best solution, best possible 458.29116 (238.90 seconds)
Cbc0010I After 4300 nodes, 911 on tree, 1e+50 best solution, best possible 458.61228 (242.92 seconds)
Cbc0010I After 4400 nodes, 915 on tree, 1e+50 best solution, best possible 458.96033 (246.83 seconds)
Cbc0010I After 4500 nodes, 923 on tree, 1e+50 best solution, best possible 459.08078 (250.80 seconds)
Cbc0010I After 4600 nodes, 930 on tree, 1e+50 best solution, best possible 459.13209 (254.86 seconds)
Cbc0010I After 4700 nodes, 941 on tree, 1e+50 best solution, best possible 459.1843 (259.05 seconds)
Cbc0010I After 4800 nodes, 949 on tree, 1e+50 best solution, best possible 459.23176 (263.05 seconds)
Cbc0010I After 4900 nodes, 954 on tree, 1e+50 best solution, best possible 459.39714 (266.95 seconds)
Cbc0010I After 5000 nodes, 964 on tree, 1e+50 best solution, best possible 459.43892 (270.84 seconds)
Cbc0010I After 5100 nodes, 978 on tree, 1e+50 best solution, best possible 459.53523 (274.73 seconds)
Cbc0010I After 5200 nodes, 986 on tree, 1e+50 best solution, best possible 459.62543 (278.72 seconds)
Cbc0010I After 5300 nodes, 994 on tree, 1e+50 best solution, best possible 459.65034 (282.70 seconds)
Cbc0010I After 5400 nodes, 1003 on tree, 1e+50 best solution, best possible 459.76874 (286.80 seconds)
Cbc0010I After 5500 nodes, 1014 on tree, 1e+50 best solution, best possible 459.94989 (290.79 seconds)
Cbc0010I After 5600 nodes, 1015 on tree, 1e+50 best solution, best possible 460.07036 (294.69 seconds)
Cbc0010I After 5700 nodes, 1028 on tree, 1e+50 best solution, best possible 460.13257 (298.66 seconds)
Cbc0010I After 5800 nodes, 1038 on tree, 1e+50 best solution, best possible 460.21781 (303.32 seconds)
Cbc0010I After 5900 nodes, 1052 on tree, 1e+50 best solution, best possible 460.35323 (307.41 seconds)
Cbc0010I After 6000 nodes, 1060 on tree, 1e+50 best solution, best possible 460.46327 (311.32 seconds)
Cbc0010I After 6100 nodes, 1069 on tree, 1e+50 best solution, best possible 460.53922 (315.16 seconds)
Cbc0010I After 6200 nodes, 1073 on tree, 1e+50 best solution, best possible 460.62145 (319.22 seconds)
Cbc0010I After 6300 nodes, 1078 on tree, 1e+50 best solution, best possible 460.68997 (323.09 seconds)
Cbc0010I After 6400 nodes, 1079 on tree, 1e+50 best solution, best possible 460.7897 (326.78 seconds)
Cbc0010I After 6500 nodes, 1079 on tree, 1e+50 best solution, best possible 460.86632 (330.58 seconds)
Cbc0010I After 6600 nodes, 1083 on tree, 1e+50 best solution, best possible 460.9167 (334.38 seconds)
Cbc0010I After 6700 nodes, 1091 on tree, 1e+50 best solution, best possible 460.95584 (338.25 seconds)
Cbc0010I After 6800 nodes, 1096 on tree, 1e+50 best solution, best possible 461.0135 (342.17 seconds)
Cbc0010I After 6900 nodes, 1098 on tree, 1e+50 best solution, best possible 461.07341 (345.93 seconds)
Cbc0010I After 7000 nodes, 1098 on tree, 1e+50 best solution, best possible 461.16152 (349.59 seconds)
Cbc0010I After 7100 nodes, 1104 on tree, 1e+50 best solution, best possible 461.20309 (353.81 seconds)
Cbc0010I After 7200 nodes, 1111 on tree, 1e+50 best solution, best possible 461.22629 (357.56 seconds)
Cbc0010I After 7300 nodes, 1121 on tree, 1e+50 best solution, best possible 461.26412 (361.26 seconds)
Cbc0010I After 7400 nodes, 1123 on tree, 1e+50 best solution, best possible 461.31325 (364.90 seconds)
Cbc0010I After 7500 nodes, 1131 on tree, 1e+50 best solution, best possible 461.36961 (368.63 seconds)
Cbc0010I After 7600 nodes, 1136 on tree, 1e+50 best solution, best possible 461.41387 (372.51 seconds)
Cbc0010I After 7700 nodes, 1134 on tree, 1e+50 best solution, best possible 461.44281 (376.48 seconds)
Cbc0010I After 7800 nodes, 1141 on tree, 1e+50 best solution, best possible 461.4551 (380.64 seconds)
Cbc0010I After 7900 nodes, 1132 on tree, 1e+50 best solution, best possible 461.49758 (384.48 seconds)
Cbc0010I After 8000 nodes, 1130 on tree, 1e+50 best solution, best possible 461.52469 (388.22 seconds)
Cbc0010I After 8100 nodes, 1131 on tree, 1e+50 best solution, best possible 461.54002 (392.09 seconds)
Cbc0010I After 8200 nodes, 1132 on tree, 1e+50 best solution, best possible 461.56686 (395.79 seconds)
Cbc0010I After 8300 nodes, 1137 on tree, 1e+50 best solution, best possible 461.59508 (399.57 seconds)
Cbc0010I After 8400 nodes, 1130 on tree, 1e+50 best solution, best possible 461.62143 (402.91 seconds)
Cbc0010I After 8500 nodes, 1122 on tree, 1e+50 best solution, best possible 461.64538 (406.31 seconds)
Cbc0010I After 8600 nodes, 1129 on tree, 1e+50 best solution, best possible 461.67097 (410.03 seconds)
Cbc0010I After 8700 nodes, 1121 on tree, 1e+50 best solution, best possible 461.69335 (413.53 seconds)
Cbc0010I After 8800 nodes, 1115 on tree, 1e+50 best solution, best possible 461.72374 (416.95 seconds)
Cbc0010I After 8900 nodes, 1110 on tree, 1e+50 best solution, best possible 461.74442 (420.78 seconds)
Cbc0010I After 9000 nodes, 1105 on tree, 1e+50 best solution, best possible 461.75471 (424.59 seconds)
Cbc0010I After 9100 nodes, 1100 on tree, 1e+50 best solution, best possible 461.7758 (428.02 seconds)
Cbc0010I After 9200 nodes, 1098 on tree, 1e+50 best solution, best possible 461.79285 (431.41 seconds)
Cbc0010I After 9300 nodes, 1096 on tree, 1e+50 best solution, best possible 461.80887 (434.78 seconds)
Cbc0010I After 9400 nodes, 1086 on tree, 1e+50 best solution, best possible 461.82763 (438.08 seconds)
Cbc0010I After 9500 nodes, 1082 on tree, 1e+50 best solution, best possible 461.85387 (441.67 seconds)
Cbc0010I After 9600 nodes, 1084 on tree, 1e+50 best solution, best possible 461.87823 (445.29 seconds)
Cbc0010I After 9700 nodes, 1083 on tree, 1e+50 best solution, best possible 461.90008 (448.80 seconds)
Cbc0010I After 9800 nodes, 1074 on tree, 1e+50 best solution, best possible 461.92645 (452.25 seconds)
Cbc0010I After 9900 nodes, 1066 on tree, 1e+50 best solution, best possible 461.97138 (455.72 seconds)
Cbc0010I After 10000 nodes, 1049 on tree, 1e+50 best solution, best possible 462.02617 (459.12 seconds)
Cbc0010I After 10100 nodes, 1038 on tree, 1e+50 best solution, best possible 462.07786 (462.50 seconds)
Cbc0010I After 10200 nodes, 1032 on tree, 1e+50 best solution, best possible 462.12902 (466.02 seconds)
Cbc0010I After 10300 nodes, 1015 on tree, 1e+50 best solution, best possible 462.17422 (469.44 seconds)
Cbc0010I After 10400 nodes, 1007 on tree, 1e+50 best solution, best possible 462.20576 (472.99 seconds)
Cbc0010I After 10500 nodes, 985 on tree, 1e+50 best solution, best possible 462.24838 (475.88 seconds)
Cbc0010I After 10600 nodes, 964 on tree, 1e+50 best solution, best possible 462.2866 (478.84 seconds)
Cbc0010I After 10700 nodes, 941 on tree, 1e+50 best solution, best possible 462.33875 (482.10 seconds)
Cbc0010I After 10800 nodes, 909 on tree, 1e+50 best solution, best possible 462.43242 (485.24 seconds)
Cbc0010I After 10900 nodes, 863 on tree, 1e+50 best solution, best possible 462.61908 (488.19 seconds)
Cbc0010I After 11000 nodes, 846 on tree, 1e+50 best solution, best possible 462.72798 (492.01 seconds)
Cbc0010I After 11100 nodes, 840 on tree, 1e+50 best solution, best possible 462.7955 (495.70 seconds)
Cbc0010I After 11200 nodes, 823 on tree, 1e+50 best solution, best possible 462.89952 (499.17 seconds)
Cbc0010I After 11300 nodes, 789 on tree, 1e+50 best solution, best possible 463.27276 (502.31 seconds)
Cbc0010I After 11400 nodes, 772 on tree, 1e+50 best solution, best possible 463.3983 (517.29 seconds)
Cbc0010I After 11500 nodes, 752 on tree, 1e+50 best solution, best possible 463.54376 (520.65 seconds)
Cbc0010I After 11600 nodes, 733 on tree, 1e+50 best solution, best possible 463.65372 (523.82 seconds)
Cbc0010I After 11700 nodes, 693 on tree, 1e+50 best solution, best possible 463.85922 (526.37 seconds)
Cbc0010I After 11800 nodes, 664 on tree, 1e+50 best solution, best possible 464.06913 (529.31 seconds)
Cbc0010I After 11900 nodes, 649 on tree, 1e+50 best solution, best possible 464.15364 (532.60 seconds)
Cbc0010I After 12000 nodes, 600 on tree, 1e+50 best solution, best possible 464.18908 (534.16 seconds)
Cbc0010I After 12100 nodes, 550 on tree, 1e+50 best solution, best possible 464.76568 (535.36 seconds)
Cbc0010I After 12200 nodes, 500 on tree, 1e+50 best solution, best possible 466.137 (536.44 seconds)
Cbc0010I After 12300 nodes, 450 on tree, 1e+50 best solution, best possible 466.24003 (537.70 seconds)
Cbc0010I After 12400 nodes, 400 on tree, 1e+50 best solution, best possible 466.5387 (538.80 seconds)
Cbc0010I After 12500 nodes, 350 on tree, 1e+50 best solution, best possible 466.711 (540.08 seconds)
Cbc0010I After 12600 nodes, 300 on tree, 1e+50 best solution, best possible 470.57694 (541.19 seconds)
Cbc0010I After 12700 nodes, 250 on tree, 1e+50 best solution, best possible 471.29625 (542.29 seconds)
Cbc0010I After 12800 nodes, 200 on tree, 1e+50 best solution, best possible 471.65946 (543.49 seconds)
Cbc0010I After 12900 nodes, 150 on tree, 1e+50 best solution, best possible 478.08017 (544.43 seconds)
Cbc0010I After 13000 nodes, 100 on tree, 1e+50 best solution, best possible 478.3577 (545.59 seconds)
Cbc0010I After 13100 nodes, 50 on tree, 1e+50 best solution, best possible 479.48209 (546.70 seconds)
Cbc0001I Search completed - best objective 1e+50, took 367576 iterations and 13200 nodes (547.97 seconds)
Cbc0035I Maximum depth 196, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       2161
Linearization cuts added in total:           2161  (separation time: 0.010152s)
Total solve time:                         548.013s (548.013s in branch-and-bound)
Lower bound:                              464.156
Upper bound:                              464.156  (gap: 0.00%)
Branch-and-bound nodes:                     13200
Stats: /tmp/jl_AfitKr/model.nl 1890 [var]   30 [int] 1920 [con]  149 [aux]   2161 [root]     2161 [tot] 0.010152 [sep]  548.013 [time]  548.015 [bb]         4.641561e+02 [lower]         4.641561e+02 [upper]   13200 [nodes]
Performance of                           FBBT:	    38.4583s,    15354 runs. fix: 2.46083e-05 shrnk:    1.56037 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	     11.091s,       10 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-30-60-9.txt
