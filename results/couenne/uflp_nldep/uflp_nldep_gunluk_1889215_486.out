solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-50-100-8.txt sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 7.1 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 371.76729       60 194.43868
NLP0014I             2         OPT 374.89259       55 5.42907
Couenne: new cutoff value 3.7489269360e+02 (208.357 seconds)
Loaded instance "/tmp/jl_QjymUE/model.nl"
Constraints:         5200
Variables:           5150 (50 integer)
Auxiliaries:          499 (0 integer)

Coin0506I Presolve 5599 (-202) rows, 5249 (-400) columns and 26097 (-602) elements
Clp0006I 0  Obj 0 Primal inf 4019.5558 (249) Dual inf 5.5619565e+12 (380)
Clp0029I End of values pass after 149 iterations
Clp0006I 149  Obj 374.90269 Primal inf 403.71723 (110) Dual inf 1.6369799e+14 (5021)
Clp0006I 412  Obj 374.90269 Primal inf 11.003662 (28) Dual inf 4.1478359e+12 (362)
Clp0006I 609  Obj 330.78324 Dual inf 84.069651 (59)
Clp0006I 679  Obj 307.40699
Clp0000I Optimal - objective value 307.40699
Clp0032I Optimal objective 307.4069871 - 679 iterations time 0.132, Presolve 0.03
Clp0000I Optimal - objective value 307.40699
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 307.40699
Optimality Based BT: 109 improved bounds
Probing: 50 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 34 added rows had average density of 2
Cbc0013I At root node, 34 cuts changed objective from 307.40699 to 353.71849 in 6 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 62 row cuts average 2.0 elements, 7 column cuts (7 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (37.18 seconds)
Optimality Based BT: 113 improved bounds
Optimality Based BT: 113 improved bounds
Optimality Based BT: 117 improved bounds
Optimality Based BT: 119 improved bounds
Optimality Based BT: 106 improved bounds
Optimality Based BT: 110 improved bounds
Optimality Based BT: 106 improved bounds
Cbc0010I After 100 nodes, 46 on tree, 1e+50 best solution, best possible 366.64099 (410.57 seconds)
Cbc0010I After 200 nodes, 94 on tree, 1e+50 best solution, best possible 366.64099 (422.80 seconds)
Cbc0010I After 300 nodes, 142 on tree, 1e+50 best solution, best possible 366.64099 (434.44 seconds)
Cbc0010I After 400 nodes, 191 on tree, 1e+50 best solution, best possible 366.64099 (445.86 seconds)
Cbc0010I After 500 nodes, 241 on tree, 1e+50 best solution, best possible 366.64099 (457.58 seconds)
Couenne: new cutoff value 3.7192636442e+02 (674.948 seconds)
Cbc0004I Integer solution of 371.92636 found after 4547 iterations and 574 nodes (466.12 seconds)
Optimality Based BT: 123 improved bounds
Optimality Based BT: 123 improved bounds
Optimality Based BT: 121 improved bounds
Optimality Based BT: 120 improved bounds
Cbc0010I After 600 nodes, 73 on tree, 371.92636 best solution, best possible 367.33417 (772.32 seconds)
Optimality Based BT: 119 improved bounds
Cbc0010I After 700 nodes, 104 on tree, 371.92636 best solution, best possible 367.38232 (929.15 seconds)
Cbc0010I After 800 nodes, 134 on tree, 371.92636 best solution, best possible 367.46084 (1116.64 seconds)
Cbc0010I After 900 nodes, 164 on tree, 371.92636 best solution, best possible 367.73824 (1131.95 seconds)
Cbc0010I After 1000 nodes, 191 on tree, 371.92636 best solution, best possible 368.06287 (1148.50 seconds)
Cbc0010I After 1100 nodes, 217 on tree, 371.92636 best solution, best possible 368.10606 (1165.07 seconds)
Cbc0010I After 1200 nodes, 247 on tree, 371.92636 best solution, best possible 368.19845 (1181.68 seconds)
Optimality Based BT: 121 improved bounds
Cbc0010I After 1300 nodes, 274 on tree, 371.92636 best solution, best possible 368.21028 (1327.94 seconds)
Cbc0010I After 1400 nodes, 305 on tree, 371.92636 best solution, best possible 368.21054 (1345.39 seconds)
Optimality Based BT: 117 improved bounds
Cbc0010I After 1500 nodes, 333 on tree, 371.92636 best solution, best possible 368.23209 (1370.72 seconds)
Cbc0010I After 1600 nodes, 362 on tree, 371.92636 best solution, best possible 368.27603 (1388.26 seconds)
Cbc0010I After 1700 nodes, 385 on tree, 371.92636 best solution, best possible 368.44774 (1490.73 seconds)
Cbc0010I After 1800 nodes, 411 on tree, 371.92636 best solution, best possible 368.5222 (1510.63 seconds)
Cbc0010I After 1900 nodes, 444 on tree, 371.92636 best solution, best possible 368.54896 (1573.09 seconds)
Cbc0010I After 2000 nodes, 470 on tree, 371.92636 best solution, best possible 368.58439 (1631.36 seconds)
Cbc0010I After 2100 nodes, 491 on tree, 371.92636 best solution, best possible 368.7193 (1648.20 seconds)
Cbc0010I After 2200 nodes, 515 on tree, 371.92636 best solution, best possible 368.71941 (1666.47 seconds)
Cbc0010I After 2300 nodes, 540 on tree, 371.92636 best solution, best possible 368.76315 (1683.81 seconds)
Cbc0010I After 2400 nodes, 569 on tree, 371.92636 best solution, best possible 368.82597 (1704.28 seconds)
Cbc0010I After 2500 nodes, 593 on tree, 371.92636 best solution, best possible 368.85075 (1724.05 seconds)
Optimality Based BT: 123 improved bounds
Cbc0010I After 2600 nodes, 619 on tree, 371.92636 best solution, best possible 368.86409 (1751.58 seconds)
Cbc0010I After 2700 nodes, 647 on tree, 371.92636 best solution, best possible 368.8855 (1769.59 seconds)
Cbc0010I After 2800 nodes, 669 on tree, 371.92636 best solution, best possible 368.94375 (1785.98 seconds)
Cbc0010I After 2900 nodes, 692 on tree, 371.92636 best solution, best possible 369.07774 (1850.02 seconds)
Cbc0010I After 3000 nodes, 713 on tree, 371.92636 best solution, best possible 369.1214 (1870.58 seconds)
Cbc0010I After 3100 nodes, 741 on tree, 371.92636 best solution, best possible 369.14538 (1889.37 seconds)
Cbc0010I After 3200 nodes, 764 on tree, 371.92636 best solution, best possible 369.15939 (1906.82 seconds)
Cbc0010I After 3300 nodes, 784 on tree, 371.92636 best solution, best possible 369.15939 (1920.90 seconds)
Cbc0010I After 3400 nodes, 810 on tree, 371.92636 best solution, best possible 369.17121 (1937.92 seconds)
Cbc0010I After 3500 nodes, 833 on tree, 371.92636 best solution, best possible 369.18821 (1955.11 seconds)
Cbc0010I After 3600 nodes, 855 on tree, 371.92636 best solution, best possible 369.22393 (2018.38 seconds)
Cbc0010I After 3700 nodes, 874 on tree, 371.92636 best solution, best possible 369.24859 (2035.34 seconds)
Cbc0010I After 3800 nodes, 894 on tree, 371.92636 best solution, best possible 369.26524 (2055.62 seconds)
Cbc0010I After 3900 nodes, 915 on tree, 371.92636 best solution, best possible 369.32141 (2077.85 seconds)
Cbc0010I After 4000 nodes, 939 on tree, 371.92636 best solution, best possible 369.33157 (2095.65 seconds)
Cbc0010I After 4100 nodes, 961 on tree, 371.92636 best solution, best possible 369.33545 (2113.26 seconds)
Cbc0010I After 4200 nodes, 988 on tree, 371.92636 best solution, best possible 369.36923 (2132.92 seconds)
Cbc0010I After 4300 nodes, 1008 on tree, 371.92636 best solution, best possible 369.38363 (2149.74 seconds)
Cbc0010I After 4400 nodes, 1040 on tree, 371.92636 best solution, best possible 369.40542 (2170.53 seconds)
Cbc0010I After 4500 nodes, 1059 on tree, 371.92636 best solution, best possible 369.41059 (2187.89 seconds)
Cbc0010I After 4600 nodes, 1082 on tree, 371.92636 best solution, best possible 369.42974 (2205.48 seconds)
Cbc0010I After 4700 nodes, 1102 on tree, 371.92636 best solution, best possible 369.42974 (2219.78 seconds)
Cbc0010I After 4800 nodes, 1119 on tree, 371.92636 best solution, best possible 369.43955 (2235.52 seconds)
Cbc0010I After 4900 nodes, 1144 on tree, 371.92636 best solution, best possible 369.45152 (2252.99 seconds)
Cbc0010I After 5000 nodes, 1168 on tree, 371.92636 best solution, best possible 369.45443 (2269.94 seconds)
Cbc0010I After 5100 nodes, 1187 on tree, 371.92636 best solution, best possible 369.48253 (2291.60 seconds)
Cbc0010I After 5200 nodes, 1206 on tree, 371.92636 best solution, best possible 369.50872 (2308.47 seconds)
Cbc0010I After 5300 nodes, 1219 on tree, 371.92636 best solution, best possible 369.52447 (2327.25 seconds)
Cbc0010I After 5400 nodes, 1243 on tree, 371.92636 best solution, best possible 369.53582 (2344.86 seconds)
Cbc0010I After 5500 nodes, 1258 on tree, 371.92636 best solution, best possible 369.54301 (2361.10 seconds)
Optimality Based BT: 127 improved bounds
Cbc0010I After 5600 nodes, 1271 on tree, 371.92636 best solution, best possible 369.5664 (2386.81 seconds)
Cbc0010I After 5700 nodes, 1293 on tree, 371.92636 best solution, best possible 369.57983 (2404.75 seconds)
Cbc0010I After 5800 nodes, 1319 on tree, 371.92636 best solution, best possible 369.60288 (2423.14 seconds)
Cbc0010I After 5900 nodes, 1338 on tree, 371.92636 best solution, best possible 369.60435 (2438.94 seconds)
Cbc0010I After 6000 nodes, 1355 on tree, 371.92636 best solution, best possible 369.62904 (2456.77 seconds)
Cbc0010I After 6100 nodes, 1376 on tree, 371.92636 best solution, best possible 369.63601 (2473.44 seconds)
Cbc0010I After 6200 nodes, 1399 on tree, 371.92636 best solution, best possible 369.63681 (2488.50 seconds)
Cbc0010I After 6300 nodes, 1418 on tree, 371.92636 best solution, best possible 369.64905 (2503.55 seconds)
Cbc0010I After 6400 nodes, 1439 on tree, 371.92636 best solution, best possible 369.67655 (2590.73 seconds)
Cbc0010I After 6500 nodes, 1460 on tree, 371.92636 best solution, best possible 369.68726 (2607.19 seconds)
Cbc0010I After 6600 nodes, 1482 on tree, 371.92636 best solution, best possible 369.69653 (2625.08 seconds)
Cbc0010I After 6700 nodes, 1503 on tree, 371.92636 best solution, best possible 369.71511 (2643.55 seconds)
Cbc0010I After 6800 nodes, 1524 on tree, 371.92636 best solution, best possible 369.71753 (2660.94 seconds)
Cbc0010I After 6900 nodes, 1543 on tree, 371.92636 best solution, best possible 369.7195 (2678.34 seconds)
Cbc0010I After 7000 nodes, 1563 on tree, 371.92636 best solution, best possible 369.73021 (2696.13 seconds)
Cbc0010I After 7100 nodes, 1581 on tree, 371.92636 best solution, best possible 369.73933 (2713.53 seconds)
Cbc0010I After 7200 nodes, 1600 on tree, 371.92636 best solution, best possible 369.74896 (2730.89 seconds)
Cbc0010I After 7300 nodes, 1617 on tree, 371.92636 best solution, best possible 369.75904 (2747.74 seconds)
Cbc0010I After 7400 nodes, 1635 on tree, 371.92636 best solution, best possible 369.77045 (2765.25 seconds)
Cbc0010I After 7500 nodes, 1648 on tree, 371.92636 best solution, best possible 369.77814 (2782.44 seconds)
Cbc0010I After 7600 nodes, 1669 on tree, 371.92636 best solution, best possible 369.78184 (2799.59 seconds)
Cbc0010I After 7700 nodes, 1689 on tree, 371.92636 best solution, best possible 369.78849 (2816.59 seconds)
Cbc0010I After 7800 nodes, 1706 on tree, 371.92636 best solution, best possible 369.79155 (2830.56 seconds)
Cbc0010I After 7900 nodes, 1729 on tree, 371.92636 best solution, best possible 369.79472 (2847.70 seconds)
Cbc0010I After 8000 nodes, 1749 on tree, 371.92636 best solution, best possible 369.80087 (2864.31 seconds)
Cbc0010I After 8100 nodes, 1765 on tree, 371.92636 best solution, best possible 369.80994 (2881.06 seconds)
Cbc0010I After 8200 nodes, 1786 on tree, 371.92636 best solution, best possible 369.82126 (2900.79 seconds)
Cbc0010I After 8300 nodes, 1805 on tree, 371.92636 best solution, best possible 369.82942 (2918.02 seconds)
Cbc0010I After 8400 nodes, 1818 on tree, 371.92636 best solution, best possible 369.83629 (2934.62 seconds)
Cbc0010I After 8500 nodes, 1842 on tree, 371.92636 best solution, best possible 369.84679 (2954.93 seconds)
Cbc0010I After 8600 nodes, 1866 on tree, 371.92636 best solution, best possible 369.84806 (2972.54 seconds)
Cbc0010I After 8700 nodes, 1890 on tree, 371.92636 best solution, best possible 369.85145 (2990.36 seconds)
Cbc0010I After 8800 nodes, 1906 on tree, 371.92636 best solution, best possible 369.86128 (3006.34 seconds)
Cbc0010I After 8900 nodes, 1925 on tree, 371.92636 best solution, best possible 369.86692 (3024.31 seconds)
Cbc0010I After 9000 nodes, 1946 on tree, 371.92636 best solution, best possible 369.86789 (3041.98 seconds)
Cbc0010I After 9100 nodes, 1967 on tree, 371.92636 best solution, best possible 369.87499 (3060.29 seconds)
Cbc0010I After 9200 nodes, 1988 on tree, 371.92636 best solution, best possible 369.88171 (3128.96 seconds)
Cbc0010I After 9300 nodes, 2011 on tree, 371.92636 best solution, best possible 369.88187 (3147.21 seconds)
Cbc0010I After 9400 nodes, 2030 on tree, 371.92636 best solution, best possible 369.89097 (3163.88 seconds)
Cbc0010I After 9500 nodes, 2051 on tree, 371.92636 best solution, best possible 369.89885 (3183.76 seconds)
Cbc0010I After 9600 nodes, 2070 on tree, 371.92636 best solution, best possible 369.9007 (3200.24 seconds)
Cbc0010I After 9700 nodes, 2094 on tree, 371.92636 best solution, best possible 369.91109 (3221.05 seconds)
Cbc0010I After 9800 nodes, 2115 on tree, 371.92636 best solution, best possible 369.91544 (3241.26 seconds)
Cbc0010I After 9900 nodes, 2139 on tree, 371.92636 best solution, best possible 369.92605 (3259.88 seconds)
Cbc0010I After 10000 nodes, 2159 on tree, 371.92636 best solution, best possible 369.92634 (3275.12 seconds)
Cbc0010I After 10100 nodes, 2175 on tree, 371.92636 best solution, best possible 369.93189 (3291.26 seconds)
Cbc0010I After 10200 nodes, 2194 on tree, 371.92636 best solution, best possible 369.94899 (3311.56 seconds)
Cbc0010I After 10300 nodes, 2215 on tree, 371.92636 best solution, best possible 369.95906 (3331.71 seconds)
Cbc0010I After 10400 nodes, 2232 on tree, 371.92636 best solution, best possible 369.96684 (3348.57 seconds)
Cbc0010I After 10500 nodes, 2247 on tree, 371.92636 best solution, best possible 369.97386 (3365.34 seconds)
Cbc0010I After 10600 nodes, 2271 on tree, 371.92636 best solution, best possible 369.98237 (3382.97 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 371.92636 (best possible 369.98237), took 189850 iterations and 10650 nodes (3397.92 seconds)
Cbc0035I Maximum depth 287, 2026 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       5801
Linearization cuts added in total:           5801  (separation time: 0.054647s)
Total solve time:                         3398.07s (3398.07s in branch-and-bound)
Lower bound:                              369.982
Upper bound:                              371.926  (gap: 0.52%)
Branch-and-bound nodes:                     10650
Stats: /tmp/jl_QjymUE/model.nl 5150 [var]   50 [int] 5200 [con]  499 [aux]   5801 [root]     5801 [tot] 0.054647 [sep]  3398.07 [time]  3398.09 [bb]         3.699824e+02 [lower]         3.719264e+02 [upper]   10650 [nodes]
Performance of                           FBBT:	    205.678s,    14375 runs. fix:  0.0169468 shrnk:    3.18551 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    119.505s,       17 runs. fix:     2.4816 shrnk:    290.998 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-50-100-8.txt
