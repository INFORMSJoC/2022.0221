solving instance uflp nldep holmberg 42 sinabc2
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 9.5959999948e+03 (0.728953 seconds)
0.7 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 2205.5788       28 0.654457
Couenne: new cutoff value 2.2055776887e+03 (1.39115 seconds)
Loaded instance "/tmp/jl_Z2XCx8/model.nl"
Constraints:         1720
Variables:           1660 (20 integer)
Auxiliaries:          179 (0 integer)

Coin0506I Presolve 1931 (-30) rows, 1711 (-128) columns and 8521 (-158) elements
Clp0006I 0  Obj 0 Primal inf 1016.1316 (120)
Clp0006I 113  Obj 1227 Primal inf 108.78157 (72)
Clp0006I 170  Obj 2057.402
Clp0000I Optimal - objective value 2057.402
Clp0032I Optimal objective 2057.401984 - 170 iterations time 0.032, Presolve 0.02
Clp0000I Optimal - objective value 2057.402
NLP Heuristic: NLP0014I             2         OPT 2205.5788       17 0.393329
no solution.
Clp0000I Optimal - objective value 2057.402
Optimality Based BT: 21 improved bounds
Probing: 0 improved bounds
NLP Heuristic: no solution.
Cbc0031I 40 added rows had average density of 2
Cbc0013I At root node, 40 cuts changed objective from 2057.402 to 2171.6431 in 16 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 107 row cuts average 2.0 elements, 17 column cuts (17 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (4.66 seconds)
Optimality Based BT: 23 improved bounds
Optimality Based BT: 29 improved bounds
Cbc0010I After 100 nodes, 25 on tree, 1e+50 best solution, best possible 2205.5747 (19.53 seconds)
Cbc0010I After 200 nodes, 56 on tree, 1e+50 best solution, best possible 2205.575 (21.58 seconds)
Cbc0010I After 300 nodes, 83 on tree, 1e+50 best solution, best possible 2205.575 (23.60 seconds)
Cbc0010I After 400 nodes, 105 on tree, 1e+50 best solution, best possible 2205.5751 (25.47 seconds)
Cbc0010I After 500 nodes, 131 on tree, 1e+50 best solution, best possible 2205.5752 (27.55 seconds)
Cbc0010I After 600 nodes, 146 on tree, 1e+50 best solution, best possible 2205.5754 (29.54 seconds)
Cbc0010I After 700 nodes, 164 on tree, 1e+50 best solution, best possible 2205.5755 (31.60 seconds)
Cbc0010I After 800 nodes, 184 on tree, 1e+50 best solution, best possible 2205.5756 (33.50 seconds)
Cbc0010I After 900 nodes, 204 on tree, 1e+50 best solution, best possible 2205.5757 (35.55 seconds)
Cbc0010I After 1000 nodes, 225 on tree, 1e+50 best solution, best possible 2205.5757 (37.54 seconds)
Cbc0010I After 1100 nodes, 240 on tree, 1e+50 best solution, best possible 2205.5759 (39.61 seconds)
Cbc0010I After 1200 nodes, 253 on tree, 1e+50 best solution, best possible 2205.576 (41.67 seconds)
Cbc0010I After 1300 nodes, 268 on tree, 1e+50 best solution, best possible 2205.576 (43.71 seconds)
Cbc0010I After 1400 nodes, 282 on tree, 1e+50 best solution, best possible 2205.5761 (45.91 seconds)
Cbc0010I After 1500 nodes, 299 on tree, 1e+50 best solution, best possible 2205.5761 (48.05 seconds)
Cbc0010I After 1600 nodes, 317 on tree, 1e+50 best solution, best possible 2205.5762 (50.19 seconds)
Cbc0010I After 1700 nodes, 333 on tree, 1e+50 best solution, best possible 2205.5762 (52.38 seconds)
Cbc0010I After 1800 nodes, 349 on tree, 1e+50 best solution, best possible 2205.5762 (54.52 seconds)
Cbc0010I After 1900 nodes, 360 on tree, 1e+50 best solution, best possible 2205.5763 (56.60 seconds)
Cbc0010I After 2000 nodes, 376 on tree, 1e+50 best solution, best possible 2205.5763 (58.79 seconds)
Cbc0010I After 2100 nodes, 383 on tree, 1e+50 best solution, best possible 2205.5763 (60.77 seconds)
Cbc0010I After 2200 nodes, 388 on tree, 1e+50 best solution, best possible 2205.5764 (63.14 seconds)
Cbc0010I After 2300 nodes, 404 on tree, 1e+50 best solution, best possible 2205.5764 (65.31 seconds)
Cbc0010I After 2400 nodes, 414 on tree, 1e+50 best solution, best possible 2205.5764 (67.39 seconds)
Cbc0010I After 2500 nodes, 427 on tree, 1e+50 best solution, best possible 2205.5764 (69.42 seconds)
Cbc0010I After 2600 nodes, 439 on tree, 1e+50 best solution, best possible 2205.5765 (71.50 seconds)
Cbc0010I After 2700 nodes, 460 on tree, 1e+50 best solution, best possible 2205.5765 (73.69 seconds)
Cbc0010I After 2800 nodes, 470 on tree, 1e+50 best solution, best possible 2205.5765 (75.78 seconds)
Cbc0010I After 2900 nodes, 484 on tree, 1e+50 best solution, best possible 2205.5766 (77.82 seconds)
Cbc0010I After 3000 nodes, 505 on tree, 1e+50 best solution, best possible 2205.5766 (80.03 seconds)
Cbc0010I After 3100 nodes, 514 on tree, 1e+50 best solution, best possible 2205.5766 (82.00 seconds)
Cbc0010I After 3200 nodes, 531 on tree, 1e+50 best solution, best possible 2205.5766 (84.16 seconds)
Cbc0010I After 3300 nodes, 541 on tree, 1e+50 best solution, best possible 2205.5767 (86.65 seconds)
Cbc0010I After 3400 nodes, 555 on tree, 1e+50 best solution, best possible 2205.5767 (88.75 seconds)
Cbc0010I After 3500 nodes, 573 on tree, 1e+50 best solution, best possible 2205.5767 (90.84 seconds)
Cbc0010I After 3600 nodes, 583 on tree, 1e+50 best solution, best possible 2205.5767 (93.36 seconds)
Cbc0010I After 3700 nodes, 603 on tree, 1e+50 best solution, best possible 2205.5767 (95.43 seconds)
Cbc0010I After 3800 nodes, 619 on tree, 1e+50 best solution, best possible 2205.5767 (97.57 seconds)
Cbc0010I After 3900 nodes, 636 on tree, 1e+50 best solution, best possible 2205.5767 (99.68 seconds)
Cbc0010I After 4000 nodes, 652 on tree, 1e+50 best solution, best possible 2205.5768 (101.68 seconds)
Cbc0010I After 4100 nodes, 660 on tree, 1e+50 best solution, best possible 2205.5768 (103.68 seconds)
Cbc0010I After 4200 nodes, 672 on tree, 1e+50 best solution, best possible 2205.5768 (105.79 seconds)
Cbc0010I After 4300 nodes, 680 on tree, 1e+50 best solution, best possible 2205.5768 (107.83 seconds)
Cbc0010I After 4400 nodes, 692 on tree, 1e+50 best solution, best possible 2205.5768 (109.81 seconds)
Cbc0010I After 4500 nodes, 706 on tree, 1e+50 best solution, best possible 2205.5768 (111.79 seconds)
Cbc0010I After 4600 nodes, 716 on tree, 1e+50 best solution, best possible 2205.5768 (113.71 seconds)
Cbc0010I After 4700 nodes, 726 on tree, 1e+50 best solution, best possible 2205.5769 (115.79 seconds)
Cbc0010I After 4800 nodes, 729 on tree, 1e+50 best solution, best possible 2205.5769 (117.71 seconds)
Cbc0010I After 4900 nodes, 740 on tree, 1e+50 best solution, best possible 2205.5769 (119.72 seconds)
Cbc0010I After 5000 nodes, 747 on tree, 1e+50 best solution, best possible 2205.5769 (121.67 seconds)
Cbc0010I After 5100 nodes, 753 on tree, 1e+50 best solution, best possible 2205.5769 (123.72 seconds)
Cbc0010I After 5200 nodes, 766 on tree, 1e+50 best solution, best possible 2205.5769 (125.76 seconds)
Cbc0010I After 5300 nodes, 774 on tree, 1e+50 best solution, best possible 2205.5769 (127.70 seconds)
Cbc0010I After 5400 nodes, 782 on tree, 1e+50 best solution, best possible 2205.5769 (129.84 seconds)
Cbc0010I After 5500 nodes, 786 on tree, 1e+50 best solution, best possible 2205.577 (131.89 seconds)
Cbc0010I After 5600 nodes, 789 on tree, 1e+50 best solution, best possible 2205.577 (133.89 seconds)
Cbc0010I After 5700 nodes, 797 on tree, 1e+50 best solution, best possible 2205.577 (136.14 seconds)
Cbc0010I After 5800 nodes, 789 on tree, 1e+50 best solution, best possible 2205.577 (138.20 seconds)
Cbc0010I After 5900 nodes, 784 on tree, 1e+50 best solution, best possible 2205.5771 (140.89 seconds)
Cbc0010I After 6000 nodes, 776 on tree, 1e+50 best solution, best possible 2205.5771 (142.96 seconds)
Cbc0010I After 6100 nodes, 762 on tree, 1e+50 best solution, best possible 2205.5771 (145.06 seconds)
Cbc0010I After 6200 nodes, 757 on tree, 1e+50 best solution, best possible 2205.5772 (147.17 seconds)
Cbc0010I After 6300 nodes, 741 on tree, 1e+50 best solution, best possible 2205.5772 (149.17 seconds)
Cbc0010I After 6400 nodes, 720 on tree, 1e+50 best solution, best possible 2205.5773 (151.02 seconds)
Cbc0010I After 6500 nodes, 695 on tree, 1e+50 best solution, best possible 2205.5773 (152.84 seconds)
Cbc0010I After 6600 nodes, 668 on tree, 1e+50 best solution, best possible 2205.5774 (154.57 seconds)
Cbc0010I After 6700 nodes, 635 on tree, 1e+50 best solution, best possible 2205.5775 (156.35 seconds)
Cbc0010I After 6800 nodes, 597 on tree, 1e+50 best solution, best possible 2205.5776 (158.28 seconds)
Cbc0010I After 6900 nodes, 550 on tree, 1e+50 best solution, best possible 2205.5777 (159.70 seconds)
Cbc0010I After 7000 nodes, 500 on tree, 1e+50 best solution, best possible 2205.5778 (160.94 seconds)
Cbc0010I After 7100 nodes, 450 on tree, 1e+50 best solution, best possible 2205.578 (162.16 seconds)
Cbc0010I After 7200 nodes, 400 on tree, 1e+50 best solution, best possible 2205.5783 (163.38 seconds)
Cbc0010I After 7300 nodes, 350 on tree, 1e+50 best solution, best possible 2205.5786 (164.61 seconds)
Cbc0010I After 7400 nodes, 300 on tree, 1e+50 best solution, best possible 2205.5789 (165.85 seconds)
Cbc0010I After 7500 nodes, 250 on tree, 1e+50 best solution, best possible 2205.5793 (167.11 seconds)
Cbc0010I After 7600 nodes, 200 on tree, 1e+50 best solution, best possible 2205.5797 (168.34 seconds)
Cbc0010I After 7700 nodes, 150 on tree, 1e+50 best solution, best possible 2205.5805 (169.57 seconds)
Cbc0010I After 7800 nodes, 100 on tree, 1e+50 best solution, best possible 2205.5817 (170.82 seconds)
Cbc0010I After 7900 nodes, 50 on tree, 1e+50 best solution, best possible 2205.5837 (172.00 seconds)
Cbc0001I Search completed - best objective 1e+50, took 57474 iterations and 8000 nodes (173.17 seconds)
Cbc0035I Maximum depth 63, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       1961
Linearization cuts added in total:           1961  (separation time: 0.011908s)
Total solve time:                         173.202s (173.202s in branch-and-bound)
Lower bound:                              2205.58
Upper bound:                              2205.58  (gap: 0.00%)
Branch-and-bound nodes:                      8000
Stats: /tmp/jl_Z2XCx8/model.nl 1660 [var]   20 [int] 1720 [con]  179 [aux]   1961 [root]     1961 [tot] 0.011908 [sep]  173.202 [time]  173.205 [bb]         2.205578e+03 [lower]         2.205578e+03 [upper]    8000 [nodes]
Performance of                           FBBT:	    11.0908s,     4185 runs. fix:          0 shrnk:    2.75615 ubd:          0 2ubd:          0 infeas:          1
Performance of                           OBBT:	    2.11046s,        3 runs. fix:          0 shrnk:    65.9497 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
reading holmberg data file /home/ccontard/git/ipwlb/code/instances/uflp/holmberg/p42
