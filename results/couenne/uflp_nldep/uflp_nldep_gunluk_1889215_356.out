solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-5.txt sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 2.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 378.99016       67 65.882156
NLP0014I             2         OPT 381.20374       39 1.892284
Couenne: new cutoff value 3.8120412458e+02 (71.2115 seconds)
Loaded instance "/tmp/jl_NTQ9OU/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          399 (0 integer)

Coin0506I Presolve 3679 (-162) rows, 3399 (-320) columns and 16877 (-482) elements
Clp0006I 0  Obj -164.16192 Primal inf 4456.1423 (199)
Clp0006I 148  Obj 12.442625 Primal inf 353.74558 (117)
Clp0006I 296  Obj 306.50169 Primal inf 31.608403 (41)
Clp0006I 316  Obj 313.87083
Clp0000I Optimal - objective value 313.87083
Clp0032I Optimal objective 313.8708296 - 316 iterations time 0.042, Presolve 0.02
Clp0000I Optimal - objective value 313.87083
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 313.87083
Optimality Based BT: 77 improved bounds
Probing: 40 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 29 added rows had average density of 2
Cbc0013I At root node, 29 cuts changed objective from 313.87083 to 369.57958 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 60 row cuts average 2.0 elements, 9 column cuts (9 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (16.79 seconds)
Optimality Based BT: 65 improved bounds
Optimality Based BT: 57 improved bounds
Optimality Based BT: 65 improved bounds
Cbc0010I After 100 nodes, 33 on tree, 1e+50 best solution, best possible 375.84248 (101.18 seconds)
Cbc0010I After 200 nodes, 82 on tree, 1e+50 best solution, best possible 375.84248 (109.64 seconds)
Cbc0010I After 300 nodes, 132 on tree, 1e+50 best solution, best possible 375.84248 (117.18 seconds)
Cbc0010I After 400 nodes, 181 on tree, 1e+50 best solution, best possible 375.84248 (124.47 seconds)
Couenne: new cutoff value 3.7899078060e+02 (200.66 seconds)
Cbc0004I Integer solution of 378.99078 found after 2667 iterations and 464 nodes (129.25 seconds)
Cbc0010I After 500 nodes, 58 on tree, 378.99078 best solution, best possible 376.68772 (133.86 seconds)
Cbc0010I After 600 nodes, 75 on tree, 378.99078 best solution, best possible 376.75977 (141.76 seconds)
Cbc0010I After 700 nodes, 100 on tree, 378.99078 best solution, best possible 377.21041 (150.67 seconds)
Cbc0010I After 800 nodes, 121 on tree, 378.99078 best solution, best possible 377.49743 (159.76 seconds)
Cbc0010I After 900 nodes, 141 on tree, 378.99078 best solution, best possible 377.51478 (168.59 seconds)
Cbc0010I After 1000 nodes, 158 on tree, 378.99078 best solution, best possible 377.61909 (177.25 seconds)
Cbc0010I After 1100 nodes, 174 on tree, 378.99078 best solution, best possible 377.7127 (186.65 seconds)
Cbc0010I After 1200 nodes, 189 on tree, 378.99078 best solution, best possible 377.79793 (195.29 seconds)
Cbc0010I After 1300 nodes, 204 on tree, 378.99078 best solution, best possible 377.83049 (204.57 seconds)
Cbc0010I After 1400 nodes, 220 on tree, 378.99078 best solution, best possible 377.85512 (213.34 seconds)
Cbc0010I After 1500 nodes, 231 on tree, 378.99078 best solution, best possible 377.87618 (222.41 seconds)
Cbc0010I After 1600 nodes, 243 on tree, 378.99078 best solution, best possible 377.9157 (231.21 seconds)
Cbc0010I After 1700 nodes, 253 on tree, 378.99078 best solution, best possible 377.94943 (240.56 seconds)
Cbc0010I After 1800 nodes, 262 on tree, 378.99078 best solution, best possible 377.98507 (249.68 seconds)
Cbc0010I After 1900 nodes, 268 on tree, 378.99078 best solution, best possible 378.04109 (258.36 seconds)
Cbc0010I After 2000 nodes, 277 on tree, 378.99078 best solution, best possible 378.08367 (283.46 seconds)
Cbc0010I After 2100 nodes, 284 on tree, 378.99078 best solution, best possible 378.12919 (291.56 seconds)
Cbc0010I After 2200 nodes, 296 on tree, 378.99078 best solution, best possible 378.16216 (299.28 seconds)
Cbc0010I After 2300 nodes, 306 on tree, 378.99078 best solution, best possible 378.17482 (307.69 seconds)
Cbc0010I After 2400 nodes, 313 on tree, 378.99078 best solution, best possible 378.21427 (316.39 seconds)
Cbc0010I After 2500 nodes, 318 on tree, 378.99078 best solution, best possible 378.2493 (325.03 seconds)
Cbc0010I After 2600 nodes, 324 on tree, 378.99078 best solution, best possible 378.25889 (333.29 seconds)
Cbc0010I After 2700 nodes, 332 on tree, 378.99078 best solution, best possible 378.29803 (341.80 seconds)
Cbc0010I After 2800 nodes, 336 on tree, 378.99078 best solution, best possible 378.30808 (349.98 seconds)
Cbc0010I After 2900 nodes, 337 on tree, 378.99078 best solution, best possible 378.3242 (357.89 seconds)
Cbc0010I After 3000 nodes, 342 on tree, 378.99078 best solution, best possible 378.35247 (365.73 seconds)
Cbc0010I After 3100 nodes, 349 on tree, 378.99078 best solution, best possible 378.36339 (373.14 seconds)
Cbc0010I After 3200 nodes, 351 on tree, 378.99078 best solution, best possible 378.38307 (381.12 seconds)
Cbc0010I After 3300 nodes, 351 on tree, 378.99078 best solution, best possible 378.40089 (388.81 seconds)
Cbc0010I After 3400 nodes, 357 on tree, 378.99078 best solution, best possible 378.40969 (396.08 seconds)
Cbc0010I After 3500 nodes, 356 on tree, 378.99078 best solution, best possible 378.43794 (403.90 seconds)
Cbc0010I After 3600 nodes, 364 on tree, 378.99078 best solution, best possible 378.45478 (411.72 seconds)
Cbc0010I After 3700 nodes, 367 on tree, 378.99078 best solution, best possible 378.47378 (419.24 seconds)
Cbc0010I After 3800 nodes, 367 on tree, 378.99078 best solution, best possible 378.49356 (426.70 seconds)
Cbc0010I After 3900 nodes, 364 on tree, 378.99078 best solution, best possible 378.50777 (434.22 seconds)
Cbc0010I After 4000 nodes, 369 on tree, 378.99078 best solution, best possible 378.51775 (441.43 seconds)
Cbc0010I After 4100 nodes, 374 on tree, 378.99078 best solution, best possible 378.5306 (448.96 seconds)
Cbc0010I After 4200 nodes, 374 on tree, 378.99078 best solution, best possible 378.54393 (455.99 seconds)
Cbc0010I After 4300 nodes, 371 on tree, 378.99078 best solution, best possible 378.56859 (463.63 seconds)
Cbc0010I After 4400 nodes, 364 on tree, 378.99078 best solution, best possible 378.58195 (470.75 seconds)
Cbc0010I After 4500 nodes, 353 on tree, 378.99078 best solution, best possible 378.60621 (477.88 seconds)
Cbc0010I After 4600 nodes, 339 on tree, 378.99078 best solution, best possible 378.62011 (485.40 seconds)
Cbc0010I After 4700 nodes, 336 on tree, 378.99078 best solution, best possible 378.63658 (492.59 seconds)
Cbc0010I After 4800 nodes, 319 on tree, 378.99078 best solution, best possible 378.65428 (499.93 seconds)
Cbc0010I After 4900 nodes, 306 on tree, 378.99078 best solution, best possible 378.66864 (507.02 seconds)
Cbc0010I After 5000 nodes, 301 on tree, 378.99078 best solution, best possible 378.68511 (514.00 seconds)
Cbc0010I After 5100 nodes, 290 on tree, 378.99078 best solution, best possible 378.69165 (520.83 seconds)
Cbc0010I After 5200 nodes, 284 on tree, 378.99078 best solution, best possible 378.69595 (527.33 seconds)
Cbc0010I After 5300 nodes, 277 on tree, 378.99078 best solution, best possible 378.70543 (534.36 seconds)
Cbc0010I After 5400 nodes, 262 on tree, 378.99078 best solution, best possible 378.72376 (541.01 seconds)
Cbc0010I After 5500 nodes, 239 on tree, 378.99078 best solution, best possible 378.73868 (547.62 seconds)
Cbc0010I After 5600 nodes, 224 on tree, 378.99078 best solution, best possible 378.7438 (555.07 seconds)
Cbc0010I After 5700 nodes, 216 on tree, 378.99078 best solution, best possible 378.76182 (562.28 seconds)
Cbc0010I After 5800 nodes, 203 on tree, 378.99078 best solution, best possible 378.77633 (569.26 seconds)
Cbc0010I After 5900 nodes, 178 on tree, 378.99078 best solution, best possible 378.80179 (575.62 seconds)
Cbc0010I After 6000 nodes, 163 on tree, 378.99078 best solution, best possible 378.82284 (582.73 seconds)
Cbc0010I After 6100 nodes, 135 on tree, 378.99078 best solution, best possible 378.85447 (589.50 seconds)
Cbc0010I After 6200 nodes, 109 on tree, 378.99078 best solution, best possible 378.88346 (597.31 seconds)
Cbc0010I After 6300 nodes, 81 on tree, 378.99078 best solution, best possible 378.91708 (603.63 seconds)
Cbc0010I After 6400 nodes, 41 on tree, 378.99078 best solution, best possible 378.95016 (608.77 seconds)
Cbc0001I Search completed - best objective 378.9907805985246, took 77958 iterations and 6496 nodes (613.23 seconds)
Cbc0035I Maximum depth 232, 6086 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3841
Linearization cuts added in total:           3841  (separation time: 0.033718s)
Total solve time:                         613.289s (613.289s in branch-and-bound)
Lower bound:                              378.991
Upper bound:                              378.991  (gap: 0.00%)
Branch-and-bound nodes:                      6496
Stats: /tmp/jl_NTQ9OU/model.nl 3320 [var]   40 [int] 3360 [con]  399 [aux]   3841 [root]     3841 [tot] 0.033718 [sep]  613.289 [time]  613.297 [bb]         3.789908e+02 [lower]         3.789908e+02 [upper]    6496 [nodes]
Performance of                           FBBT:	     45.035s,     7084 runs. fix: 0.00767761 shrnk:    8.80688 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    16.2279s,        4 runs. fix:          1 shrnk:    291.448 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-5.txt
