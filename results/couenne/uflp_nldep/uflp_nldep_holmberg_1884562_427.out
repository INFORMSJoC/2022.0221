solving instance uflp nldep holmberg 43 pardivexp
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 1.2 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 1600.6025       55 36.256272
Couenne: new cutoff value 1.6006051565e+03 (37.5805 seconds)
NLP0014I             2         OPT 1600.6026       36 0.906375
Couenne: new cutoff value 1.6005997755e+03 (38.4899 seconds)
Loaded instance "/tmp/jl_dG9Tzq/model.nl"
Constraints:         2230
Variables:           2190 (30 integer)
Auxiliaries:          279 (0 integer)

Coin0506I Presolve 2619 (-92) rows, 2249 (-220) columns and 11427 (-312) elements
Clp0006I 0  Obj 0 Primal inf 6890.2369 (400)
Clp0006I 127  Obj 5.5157005e-14 Primal inf 662.32933 (157)
Clp0006I 254  Obj 1519 Primal inf 7178.9221 (134)
Clp0006I 381  Obj 1583.5922 Primal inf 33930.37 (108)
Clp0006I 418  Obj 1592.9416
Clp0000I Optimal - objective value 1592.9416
Clp0032I Optimal objective 1592.941646 - 418 iterations time 0.032, Presolve 0.01
Clp0000I Optimal - objective value 1592.9416
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 1592.9416
Optimality Based BT: 61 improved bounds
Probing: 6 improved bounds
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 52 added rows had average density of 2
Cbc0013I At root node, 52 cuts changed objective from 1592.9416 to 1600.6033 in 9 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 362 row cuts average 2.0 elements, 10 column cuts (10 active)
Cbc0001I Search completed - best objective 1e+50, took 366 iterations and 0 nodes (8.76 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       2711
Linearization cuts added in total:           2711  (separation time: 0.017699s)
Total solve time:                         8.79592s (8.79592s in branch-and-bound)
Lower bound:                               1600.6
Upper bound:                               1600.6  (gap: 0.00%)
Branch-and-bound nodes:                         0
Stats: /tmp/jl_dG9Tzq/model.nl 2190 [var]   30 [int] 2230 [con]  279 [aux]   2711 [root]     2711 [tot] 0.017699 [sep]  8.79592 [time]   8.8001 [bb]         1.600600e+03 [lower]         1.600600e+03 [upper]       0 [nodes]
Performance of                           FBBT:	   0.043616s,       11 runs. fix:          0 shrnk:    125.954 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    2.27096s,        1 runs. fix:          1 shrnk:    324.673 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
reading holmberg data file /home/ccontard/git/ipwlb/code/instances/uflp/holmberg/p43
f0 = 0.30349091130065775
f0 = 0.2726124755578583
f0 = 0.3846570852531593
f0 = 0.3846570852531593
f0 = 0.4296513773355242
f0 = 0.33260486500101155
f0 = 0.35642537257402834
f0 = 0.41112431588984455
f0 = 0.2708479935154126
f0 = 0.274376957600304
f0 = 0.358189854616474
f0 = 0.3828926032107136
f0 = 0.26643678840929835
f0 = 0.33260486500101155
f0 = 0.2761414396427497
f0 = 0.3378983111283486
f0 = 0.38553932627438214
f0 = 0.36877674687114814
f0 = 0.4287691363143014
f0 = 0.4137710389535131
f0 = 0.35730761359525115
f0 = 0.2805526447488639
f0 = 0.3802458801470451
f0 = 0.3378983111283486
f0 = 0.3881860493380506
f0 = 0.4252401722294101
f0 = 0.39877294159272475
f0 = 0.39877294159272475
f0 = 0.2726124755578583
f0 = 0.39436173648661055
