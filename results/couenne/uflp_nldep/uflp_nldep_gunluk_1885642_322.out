solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-2.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 2.0825972230e+03 (2.81167 seconds)
2.8 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 564.73426       52 2.665461
Couenne: new cutoff value 6.2348495114e+02 (5.98553 seconds)
NLP0014I             2         OPT 598.73103       28 1.759083
Couenne: new cutoff value 5.9873131154e+02 (7.74841 seconds)
Loaded instance "/tmp/jl_4v5qq5/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3681 (0) rows, 3401 (-118) columns and 16921 (-118) elements
Clp0006I 0  Obj -4992.1875 Primal inf 8397856.5 (120)
Clp0006I 148  Obj -4992.1875 Primal inf 1.7594191e+08 (123)
Clp0006I 296  Obj 116.06942 Primal inf 8682.732 (155)
Clp0006I 444  Obj 395.29541 Primal inf 21731.798 (40)
Clp0006I 538  Obj 472.36105
Clp0000I Optimal - objective value 472.36105
Clp0000I Optimal - objective value 472.36105
Clp0032I Optimal objective 472.3610528 - 538 iterations time 0.062, Presolve 0.01
Clp0000I Optimal - objective value 472.36105
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 472.36105
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 16 added rows had average density of 2
Cbc0013I At root node, 16 cuts changed objective from 472.36105 to 472.48088 in 10 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 184 row cuts average 2.0 elements, 657 column cuts (657 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (10.71 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 20 on tree, 1e+50 best solution, best possible 472.56441 (70.23 seconds)
Cbc0010I After 200 nodes, 70 on tree, 1e+50 best solution, best possible 472.56441 (78.49 seconds)
Cbc0010I After 300 nodes, 120 on tree, 1e+50 best solution, best possible 472.56441 (85.81 seconds)
Couenne: new cutoff value 5.6473479420e+02 (98.205 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 400 nodes, 157 on tree, 1e+50 best solution, best possible 523.99369 (123.49 seconds)
Cbc0010I After 500 nodes, 164 on tree, 1e+50 best solution, best possible 554.73008 (133.70 seconds)
Cbc0010I After 600 nodes, 167 on tree, 1e+50 best solution, best possible 559.4641 (140.77 seconds)
Cbc0010I After 700 nodes, 167 on tree, 1e+50 best solution, best possible 561.24788 (147.10 seconds)
Cbc0010I After 800 nodes, 172 on tree, 1e+50 best solution, best possible 562.82443 (154.14 seconds)
Cbc0010I After 900 nodes, 188 on tree, 1e+50 best solution, best possible 563.25354 (161.69 seconds)
Cbc0010I After 1000 nodes, 195 on tree, 1e+50 best solution, best possible 563.40501 (168.65 seconds)
Cbc0010I After 1100 nodes, 198 on tree, 1e+50 best solution, best possible 563.53792 (175.30 seconds)
Cbc0010I After 1200 nodes, 202 on tree, 1e+50 best solution, best possible 563.54728 (182.34 seconds)
Cbc0010I After 1300 nodes, 206 on tree, 1e+50 best solution, best possible 563.74336 (189.36 seconds)
Cbc0010I After 1400 nodes, 205 on tree, 1e+50 best solution, best possible 563.86689 (196.09 seconds)
Cbc0010I After 1500 nodes, 199 on tree, 1e+50 best solution, best possible 563.96721 (202.34 seconds)
Cbc0010I After 1600 nodes, 194 on tree, 1e+50 best solution, best possible 564.12369 (208.84 seconds)
Cbc0010I After 1700 nodes, 178 on tree, 1e+50 best solution, best possible 564.25779 (215.11 seconds)
Cbc0010I After 1800 nodes, 135 on tree, 1e+50 best solution, best possible 564.71122 (219.13 seconds)
Cbc0010I After 1900 nodes, 88 on tree, 1e+50 best solution, best possible 564.75348 (222.20 seconds)
Cbc0010I After 2000 nodes, 38 on tree, 1e+50 best solution, best possible 565.10632 (224.78 seconds)
Cbc0001I Search completed - best objective 1e+50, took 74352 iterations and 2076 nodes (226.37 seconds)
Cbc0035I Maximum depth 189, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.017937s)
Total solve time:                         226.439s (226.439s in branch-and-bound)
Lower bound:                              564.735
Upper bound:                              564.735  (gap: 0.00%)
Branch-and-bound nodes:                      2076
Stats: /tmp/jl_4v5qq5/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.017937 [sep]  226.439 [time]  226.445 [bb]         5.647348e+02 [lower]         5.647348e+02 [upper]    2076 [nodes]
Performance of                           FBBT:	    11.4363s,     2327 runs. fix:          0 shrnk:    11.2783 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    12.5486s,        6 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-2.txt
