solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-1.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.6589459100e+03 (2.78923 seconds)
2.8 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 571.01159       54 2.778717
Couenne: new cutoff value 7.6164329980e+02 (6.15988 seconds)
NLP0014I             2         OPT 627.49911       33 2.063276
Couenne: new cutoff value 6.2749923578e+02 (8.22683 seconds)
Loaded instance "/tmp/jl_eBm5kR/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3681 (0) rows, 3401 (-118) columns and 16921 (-118) elements
Clp0006I 0  Obj -5962.5 Primal inf 8796882.6 (120)
Clp0006I 148  Obj -5962.5 Primal inf 54222132 (118)
Clp0006I 296  Obj 0 Primal inf 161.81323 (80)
Clp0006I 444  Obj 246.27443 Primal inf 41455.716 (236)
Clp0006I 592  Obj 428.2607 Primal inf 21314.402 (39)
Clp0006I 654  Obj 466.30484
Clp0000I Optimal - objective value 466.30412
Clp0000I Optimal - objective value 466.30412
Clp0032I Optimal objective 466.3041177 - 654 iterations time 0.072, Presolve 0.01
Clp0000I Optimal - objective value 466.30412
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 466.30412
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 15 added rows had average density of 2
Cbc0013I At root node, 15 cuts changed objective from 466.30412 to 466.35244 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 141 row cuts average 2.0 elements, 514 column cuts (514 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (10.67 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 22 on tree, 1e+50 best solution, best possible 491.00826 (67.42 seconds)
Cbc0010I After 200 nodes, 70 on tree, 1e+50 best solution, best possible 491.00826 (75.66 seconds)
Cbc0010I After 300 nodes, 120 on tree, 1e+50 best solution, best possible 491.00826 (83.48 seconds)
Couenne: new cutoff value 5.8105753278e+02 (97.5106 seconds)
Cbc0010I After 400 nodes, 167 on tree, 1e+50 best solution, best possible 491.00826 (89.22 seconds)
Cbc0010I After 500 nodes, 182 on tree, 1e+50 best solution, best possible 502.55394 (97.58 seconds)
Cbc0010I After 600 nodes, 189 on tree, 1e+50 best solution, best possible 507.08673 (105.98 seconds)
Cbc0010I After 700 nodes, 211 on tree, 1e+50 best solution, best possible 507.08673 (114.55 seconds)
Cbc0010I After 800 nodes, 258 on tree, 1e+50 best solution, best possible 507.08673 (123.17 seconds)
Cbc0010I After 900 nodes, 307 on tree, 1e+50 best solution, best possible 507.08673 (131.21 seconds)
Couenne: new cutoff value 5.7804325651e+02 (141.626 seconds)
Cbc0010I After 1000 nodes, 326 on tree, 1e+50 best solution, best possible 507.09941 (138.40 seconds)
Cbc0010I After 1100 nodes, 363 on tree, 1e+50 best solution, best possible 507.09941 (147.62 seconds)
Cbc0010I After 1200 nodes, 411 on tree, 1e+50 best solution, best possible 507.09941 (157.09 seconds)
Couenne: new cutoff value 5.7577209536e+02 (171.566 seconds)
Cbc0010I After 1300 nodes, 450 on tree, 1e+50 best solution, best possible 512.65849 (164.90 seconds)
Cbc0010I After 1400 nodes, 459 on tree, 1e+50 best solution, best possible 514.70173 (172.38 seconds)
Cbc0010I After 1500 nodes, 466 on tree, 1e+50 best solution, best possible 519.27722 (180.15 seconds)
Cbc0010I After 1600 nodes, 477 on tree, 1e+50 best solution, best possible 519.6643 (190.34 seconds)
Cbc0010I After 1700 nodes, 484 on tree, 1e+50 best solution, best possible 521.35827 (198.11 seconds)
Cbc0010I After 1800 nodes, 494 on tree, 1e+50 best solution, best possible 524.74354 (205.43 seconds)
Cbc0010I After 1900 nodes, 503 on tree, 1e+50 best solution, best possible 525.03173 (212.78 seconds)
Cbc0010I After 2000 nodes, 514 on tree, 1e+50 best solution, best possible 526.1469 (220.14 seconds)
Cbc0010I After 2100 nodes, 548 on tree, 1e+50 best solution, best possible 526.1469 (228.74 seconds)
Cbc0010I After 2200 nodes, 597 on tree, 1e+50 best solution, best possible 526.1469 (237.59 seconds)
Couenne: new cutoff value 5.7459400322e+02 (251.734 seconds)
Couenne: new cutoff value 5.7456983703e+02 (251.977 seconds)
Cbc0010I After 2300 nodes, 636 on tree, 1e+50 best solution, best possible 526.27365 (244.97 seconds)
Cbc0010I After 2400 nodes, 645 on tree, 1e+50 best solution, best possible 526.9597 (252.21 seconds)
Cbc0010I After 2500 nodes, 678 on tree, 1e+50 best solution, best possible 526.9597 (261.00 seconds)
Cbc0010I After 2600 nodes, 728 on tree, 1e+50 best solution, best possible 526.9597 (270.10 seconds)
Couenne: new cutoff value 5.7327212117e+02 (284.426 seconds)
Cbc0010I After 2700 nodes, 768 on tree, 1e+50 best solution, best possible 527.0664 (277.47 seconds)
Cbc0010I After 2800 nodes, 777 on tree, 1e+50 best solution, best possible 529.54832 (287.43 seconds)
Cbc0010I After 2900 nodes, 789 on tree, 1e+50 best solution, best possible 531.38939 (295.37 seconds)
Cbc0010I After 3000 nodes, 796 on tree, 1e+50 best solution, best possible 532.32589 (302.90 seconds)
Cbc0010I After 3100 nodes, 800 on tree, 1e+50 best solution, best possible 532.74358 (310.01 seconds)
Cbc0010I After 3200 nodes, 806 on tree, 1e+50 best solution, best possible 533.03635 (317.51 seconds)
Cbc0010I After 3300 nodes, 811 on tree, 1e+50 best solution, best possible 533.92397 (325.00 seconds)
Cbc0010I After 3400 nodes, 824 on tree, 1e+50 best solution, best possible 534.55099 (332.44 seconds)
Cbc0010I After 3500 nodes, 837 on tree, 1e+50 best solution, best possible 534.61389 (340.27 seconds)
Cbc0010I After 3600 nodes, 842 on tree, 1e+50 best solution, best possible 536.32289 (347.94 seconds)
Cbc0010I After 3700 nodes, 848 on tree, 1e+50 best solution, best possible 537.68482 (355.13 seconds)
Cbc0010I After 3800 nodes, 856 on tree, 1e+50 best solution, best possible 538.03798 (362.57 seconds)
Cbc0010I After 3900 nodes, 866 on tree, 1e+50 best solution, best possible 538.15096 (369.87 seconds)
Cbc0010I After 4000 nodes, 884 on tree, 1e+50 best solution, best possible 538.35377 (377.64 seconds)
Cbc0010I After 4100 nodes, 888 on tree, 1e+50 best solution, best possible 538.50773 (387.68 seconds)
Cbc0010I After 4200 nodes, 915 on tree, 1e+50 best solution, best possible 538.50773 (396.21 seconds)
Cbc0010I After 4300 nodes, 957 on tree, 1e+50 best solution, best possible 538.50773 (404.67 seconds)
Cbc0010I After 4400 nodes, 1007 on tree, 1e+50 best solution, best possible 538.50773 (412.44 seconds)
Couenne: new cutoff value 5.7232261335e+02 (421.831 seconds)
Couenne: new cutoff value 5.7230986111e+02 (422.079 seconds)
Cbc0010I After 4500 nodes, 1019 on tree, 1e+50 best solution, best possible 539.57087 (419.40 seconds)
Cbc0010I After 4600 nodes, 1031 on tree, 1e+50 best solution, best possible 539.59113 (426.73 seconds)
Cbc0010I After 4700 nodes, 1036 on tree, 1e+50 best solution, best possible 541.12261 (434.36 seconds)
Cbc0010I After 4800 nodes, 1039 on tree, 1e+50 best solution, best possible 542.13367 (441.53 seconds)
Cbc0010I After 4900 nodes, 1066 on tree, 1e+50 best solution, best possible 542.13367 (449.90 seconds)
Cbc0010I After 5000 nodes, 1111 on tree, 1e+50 best solution, best possible 542.13367 (458.68 seconds)
Couenne: new cutoff value 5.7101214511e+02 (474.819 seconds)
Cbc0010I After 5100 nodes, 1161 on tree, 1e+50 best solution, best possible 542.13367 (466.39 seconds)
Cbc0010I After 5200 nodes, 1166 on tree, 1e+50 best solution, best possible 542.51067 (473.72 seconds)
Cbc0010I After 5300 nodes, 1171 on tree, 1e+50 best solution, best possible 542.83487 (481.43 seconds)
Cbc0010I After 5400 nodes, 1173 on tree, 1e+50 best solution, best possible 543.32593 (488.41 seconds)
Cbc0010I After 5500 nodes, 1178 on tree, 1e+50 best solution, best possible 543.65367 (495.76 seconds)
Cbc0010I After 5600 nodes, 1182 on tree, 1e+50 best solution, best possible 544.13887 (503.05 seconds)
Cbc0010I After 5700 nodes, 1184 on tree, 1e+50 best solution, best possible 544.5103 (510.13 seconds)
Cbc0010I After 5800 nodes, 1186 on tree, 1e+50 best solution, best possible 545.14937 (517.19 seconds)
Cbc0010I After 5900 nodes, 1186 on tree, 1e+50 best solution, best possible 546.94227 (528.27 seconds)
Cbc0010I After 6000 nodes, 1184 on tree, 1e+50 best solution, best possible 547.84268 (535.49 seconds)
Cbc0010I After 6100 nodes, 1187 on tree, 1e+50 best solution, best possible 548.55671 (543.07 seconds)
Cbc0010I After 6200 nodes, 1186 on tree, 1e+50 best solution, best possible 549.64664 (550.15 seconds)
Cbc0010I After 6300 nodes, 1182 on tree, 1e+50 best solution, best possible 550.35978 (557.02 seconds)
Cbc0010I After 6400 nodes, 1181 on tree, 1e+50 best solution, best possible 551.51342 (564.93 seconds)
Cbc0010I After 6500 nodes, 1184 on tree, 1e+50 best solution, best possible 552.18392 (572.37 seconds)
Cbc0010I After 6600 nodes, 1185 on tree, 1e+50 best solution, best possible 552.72579 (584.03 seconds)
Cbc0010I After 6700 nodes, 1188 on tree, 1e+50 best solution, best possible 553.1304 (591.21 seconds)
Cbc0010I After 6800 nodes, 1192 on tree, 1e+50 best solution, best possible 553.71964 (600.27 seconds)
Cbc0010I After 6900 nodes, 1193 on tree, 1e+50 best solution, best possible 554.65934 (607.68 seconds)
Cbc0010I After 7000 nodes, 1191 on tree, 1e+50 best solution, best possible 555.06069 (614.51 seconds)
Cbc0010I After 7100 nodes, 1202 on tree, 1e+50 best solution, best possible 555.49881 (622.07 seconds)
Cbc0010I After 7200 nodes, 1208 on tree, 1e+50 best solution, best possible 555.9389 (629.62 seconds)
Cbc0010I After 7300 nodes, 1214 on tree, 1e+50 best solution, best possible 556.28176 (637.08 seconds)
Cbc0010I After 7400 nodes, 1211 on tree, 1e+50 best solution, best possible 556.69842 (644.09 seconds)
Cbc0010I After 7500 nodes, 1218 on tree, 1e+50 best solution, best possible 557.11588 (651.52 seconds)
Cbc0010I After 7600 nodes, 1224 on tree, 1e+50 best solution, best possible 557.36283 (658.78 seconds)
Cbc0010I After 7700 nodes, 1226 on tree, 1e+50 best solution, best possible 557.94186 (666.23 seconds)
Cbc0010I After 7800 nodes, 1231 on tree, 1e+50 best solution, best possible 558.32911 (673.37 seconds)
Cbc0010I After 7900 nodes, 1233 on tree, 1e+50 best solution, best possible 558.81638 (680.80 seconds)
Cbc0010I After 8000 nodes, 1247 on tree, 1e+50 best solution, best possible 559.0187 (689.03 seconds)
Cbc0010I After 8100 nodes, 1249 on tree, 1e+50 best solution, best possible 559.29306 (696.15 seconds)
Cbc0010I After 8200 nodes, 1248 on tree, 1e+50 best solution, best possible 559.76821 (703.48 seconds)
Cbc0010I After 8300 nodes, 1251 on tree, 1e+50 best solution, best possible 560.51415 (711.06 seconds)
Cbc0010I After 8400 nodes, 1259 on tree, 1e+50 best solution, best possible 560.83265 (718.87 seconds)
Cbc0010I After 8500 nodes, 1266 on tree, 1e+50 best solution, best possible 561.30435 (754.09 seconds)
Cbc0010I After 8600 nodes, 1273 on tree, 1e+50 best solution, best possible 561.49017 (762.04 seconds)
Cbc0010I After 8700 nodes, 1283 on tree, 1e+50 best solution, best possible 561.95478 (769.97 seconds)
Cbc0010I After 8800 nodes, 1292 on tree, 1e+50 best solution, best possible 562.10529 (777.95 seconds)
Cbc0010I After 8900 nodes, 1294 on tree, 1e+50 best solution, best possible 562.34241 (850.85 seconds)
Cbc0010I After 9000 nodes, 1299 on tree, 1e+50 best solution, best possible 562.62804 (858.62 seconds)
Cbc0010I After 9100 nodes, 1302 on tree, 1e+50 best solution, best possible 562.90248 (866.25 seconds)
Cbc0010I After 9200 nodes, 1309 on tree, 1e+50 best solution, best possible 563.31871 (874.26 seconds)
Cbc0010I After 9300 nodes, 1314 on tree, 1e+50 best solution, best possible 563.89682 (882.65 seconds)
Cbc0010I After 9400 nodes, 1320 on tree, 1e+50 best solution, best possible 564.13672 (891.61 seconds)
Cbc0010I After 9500 nodes, 1322 on tree, 1e+50 best solution, best possible 564.28185 (899.63 seconds)
Cbc0010I After 9600 nodes, 1320 on tree, 1e+50 best solution, best possible 564.50946 (907.21 seconds)
Cbc0010I After 9700 nodes, 1313 on tree, 1e+50 best solution, best possible 564.99833 (914.90 seconds)
Cbc0010I After 9800 nodes, 1304 on tree, 1e+50 best solution, best possible 565.33706 (922.09 seconds)
Cbc0010I After 9900 nodes, 1307 on tree, 1e+50 best solution, best possible 565.53426 (929.84 seconds)
Cbc0010I After 10000 nodes, 1304 on tree, 1e+50 best solution, best possible 565.78996 (937.58 seconds)
Cbc0010I After 10100 nodes, 1298 on tree, 1e+50 best solution, best possible 566.2515 (944.98 seconds)
Cbc0010I After 10200 nodes, 1297 on tree, 1e+50 best solution, best possible 566.39135 (953.06 seconds)
Cbc0010I After 10300 nodes, 1289 on tree, 1e+50 best solution, best possible 566.57804 (960.27 seconds)
Cbc0010I After 10400 nodes, 1282 on tree, 1e+50 best solution, best possible 566.75815 (967.79 seconds)
Cbc0010I After 10500 nodes, 1275 on tree, 1e+50 best solution, best possible 567.11111 (975.87 seconds)
Cbc0010I After 10600 nodes, 1271 on tree, 1e+50 best solution, best possible 567.30305 (983.35 seconds)
Cbc0010I After 10700 nodes, 1261 on tree, 1e+50 best solution, best possible 567.4806 (990.11 seconds)
Cbc0010I After 10800 nodes, 1256 on tree, 1e+50 best solution, best possible 567.62514 (997.35 seconds)
Cbc0010I After 10900 nodes, 1250 on tree, 1e+50 best solution, best possible 567.81604 (1004.89 seconds)
Cbc0010I After 11000 nodes, 1230 on tree, 1e+50 best solution, best possible 568.0139 (1014.36 seconds)
Cbc0010I After 11100 nodes, 1207 on tree, 1e+50 best solution, best possible 568.29135 (1021.16 seconds)
Cbc0010I After 11200 nodes, 1199 on tree, 1e+50 best solution, best possible 568.41466 (1028.87 seconds)
Cbc0010I After 11300 nodes, 1197 on tree, 1e+50 best solution, best possible 568.51325 (1036.76 seconds)
Cbc0010I After 11400 nodes, 1181 on tree, 1e+50 best solution, best possible 568.66754 (1044.01 seconds)
Cbc0010I After 11500 nodes, 1189 on tree, 1e+50 best solution, best possible 568.74619 (1052.60 seconds)
Cbc0010I After 11600 nodes, 1188 on tree, 1e+50 best solution, best possible 568.85142 (1060.67 seconds)
Cbc0010I After 11700 nodes, 1187 on tree, 1e+50 best solution, best possible 568.95394 (1068.69 seconds)
Cbc0010I After 11800 nodes, 1188 on tree, 1e+50 best solution, best possible 569.02842 (1076.84 seconds)
Cbc0010I After 11900 nodes, 1178 on tree, 1e+50 best solution, best possible 569.14525 (1084.17 seconds)
Cbc0010I After 12000 nodes, 1172 on tree, 1e+50 best solution, best possible 569.24961 (1091.82 seconds)
Cbc0010I After 12100 nodes, 1169 on tree, 1e+50 best solution, best possible 569.35798 (1099.65 seconds)
Cbc0010I After 12200 nodes, 1162 on tree, 1e+50 best solution, best possible 569.43673 (1107.42 seconds)
Cbc0010I After 12300 nodes, 1145 on tree, 1e+50 best solution, best possible 569.62298 (1114.59 seconds)
Cbc0010I After 12400 nodes, 1136 on tree, 1e+50 best solution, best possible 569.69519 (1121.90 seconds)
Cbc0010I After 12500 nodes, 1123 on tree, 1e+50 best solution, best possible 569.88936 (1128.82 seconds)
Cbc0010I After 12600 nodes, 1104 on tree, 1e+50 best solution, best possible 570.0654 (1135.76 seconds)
Cbc0010I After 12700 nodes, 1085 on tree, 1e+50 best solution, best possible 570.21209 (1142.10 seconds)
Cbc0010I After 12800 nodes, 1063 on tree, 1e+50 best solution, best possible 570.30635 (1158.10 seconds)
Cbc0010I After 12900 nodes, 1033 on tree, 1e+50 best solution, best possible 570.43085 (1164.22 seconds)
Cbc0010I After 13000 nodes, 1015 on tree, 1e+50 best solution, best possible 570.56034 (1170.88 seconds)
Cbc0010I After 13100 nodes, 982 on tree, 1e+50 best solution, best possible 570.70811 (1176.45 seconds)
Cbc0010I After 13200 nodes, 952 on tree, 1e+50 best solution, best possible 570.80833 (1181.98 seconds)
Cbc0010I After 13300 nodes, 914 on tree, 1e+50 best solution, best possible 570.93684 (1186.85 seconds)
Cbc0010I After 13400 nodes, 871 on tree, 1e+50 best solution, best possible 571.01695 (1191.20 seconds)
Cbc0010I After 13500 nodes, 821 on tree, 1e+50 best solution, best possible 571.12213 (1193.89 seconds)
Cbc0010I After 13600 nodes, 771 on tree, 1e+50 best solution, best possible 572.00332 (1195.71 seconds)
Cbc0010I After 13700 nodes, 721 on tree, 1e+50 best solution, best possible 572.3161 (1197.52 seconds)
Cbc0010I After 13800 nodes, 671 on tree, 1e+50 best solution, best possible 572.45344 (1199.50 seconds)
Cbc0010I After 13900 nodes, 621 on tree, 1e+50 best solution, best possible 573.20288 (1201.33 seconds)
Cbc0010I After 14000 nodes, 571 on tree, 1e+50 best solution, best possible 573.30835 (1203.61 seconds)
Cbc0010I After 14100 nodes, 521 on tree, 1e+50 best solution, best possible 573.7682 (1205.74 seconds)
Cbc0010I After 14200 nodes, 471 on tree, 1e+50 best solution, best possible 574.57683 (1207.61 seconds)
Cbc0010I After 14300 nodes, 421 on tree, 1e+50 best solution, best possible 574.7347 (1209.72 seconds)
Cbc0010I After 14400 nodes, 371 on tree, 1e+50 best solution, best possible 575.77356 (1211.61 seconds)
Cbc0010I After 14500 nodes, 321 on tree, 1e+50 best solution, best possible 575.85177 (1213.97 seconds)
Cbc0010I After 14600 nodes, 271 on tree, 1e+50 best solution, best possible 577.18416 (1216.13 seconds)
Cbc0010I After 14700 nodes, 221 on tree, 1e+50 best solution, best possible 578.06137 (1218.45 seconds)
Cbc0010I After 14800 nodes, 171 on tree, 1e+50 best solution, best possible 578.46715 (1221.06 seconds)
Cbc0010I After 14900 nodes, 121 on tree, 1e+50 best solution, best possible 581.05772 (1222.84 seconds)
Cbc0010I After 15000 nodes, 71 on tree, 1e+50 best solution, best possible 581.10324 (1224.94 seconds)
Cbc0010I After 15100 nodes, 21 on tree, 1e+50 best solution, best possible 584.5053 (1227.15 seconds)
Cbc0001I Search completed - best objective 1e+50, took 944045 iterations and 15142 nodes (1227.87 seconds)
Cbc0035I Maximum depth 199, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.019799s)
Total solve time:                         1227.94s (1227.94s in branch-and-bound)
Lower bound:                              571.012
Upper bound:                              571.012  (gap: 0.00%)
Branch-and-bound nodes:                     15142
Stats: /tmp/jl_eBm5kR/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.019799 [sep]  1227.94 [time]  1227.95 [bb]         5.710121e+02 [lower]         5.710121e+02 [upper]   15142 [nodes]
Performance of                           FBBT:	    86.8826s,    16988 runs. fix: 0.000109526 shrnk:    1.99779 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    11.5018s,        5 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-1.txt
