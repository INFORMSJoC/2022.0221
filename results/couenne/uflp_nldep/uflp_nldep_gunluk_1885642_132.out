solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-20-40-3.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Couenne: new cutoff value 8.0575558814e+02 (0.20395 seconds)
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 366.7739       34 0.453138
NLP0014I             2         OPT 393.33853       26 0.25815
Loaded instance "/tmp/jl_htpGx3/model.nl"
Constraints:          880
Variables:            860 (20 integer)
Auxiliaries:           99 (0 integer)

Coin0506I Presolve 1041 (0) rows, 901 (-58) columns and 4461 (-58) elements
Clp0006I 0  Obj -3085.3125 Primal inf 264.99994 (60)
Clp0006I 95  Obj 0.36917236 Primal inf 43.778159 (42)
Clp0006I 190  Obj 244.26581 Primal inf 354.83197 (13)
Clp0006I 209  Obj 252.3555
Clp0000I Optimal - objective value 252.3555
Clp0000I Optimal - objective value 252.3555
Clp0032I Optimal objective 252.3554986 - 209 iterations time 0.012, Presolve 0.00
Clp0000I Optimal - objective value 252.3555
NLP Heuristic: NLP0014I             3         OPT 404.81292       26 0.231797
no solution.
Clp0000I Optimal - objective value 252.3555
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 16 added rows had average density of 2
Cbc0013I At root node, 16 cuts changed objective from 252.3555 to 252.86073 in 15 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 173 row cuts average 2.0 elements, 122 column cuts (122 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (1.78 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 50 on tree, 1e+50 best solution, best possible 257.67868 (13.69 seconds)
Cbc0010I After 200 nodes, 100 on tree, 1e+50 best solution, best possible 257.67868 (15.25 seconds)
Couenne: new cutoff value 3.8624795309e+02 (16.8106 seconds)
Couenne: new cutoff value 3.8621638910e+02 (16.8653 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 300 nodes, 136 on tree, 1e+50 best solution, best possible 259.12455 (23.07 seconds)
Cbc0010I After 400 nodes, 184 on tree, 1e+50 best solution, best possible 259.12455 (25.18 seconds)
Cbc0010I After 500 nodes, 234 on tree, 1e+50 best solution, best possible 259.12455 (26.91 seconds)
Couenne: new cutoff value 3.6677400138e+02 (27.9171 seconds)
Cbc0010I After 600 nodes, 247 on tree, 1e+50 best solution, best possible 260.36664 (32.19 seconds)
Cbc0010I After 700 nodes, 262 on tree, 1e+50 best solution, best possible 262.9613 (35.35 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 800 nodes, 266 on tree, 1e+50 best solution, best possible 266.86853 (43.46 seconds)
Cbc0010I After 900 nodes, 277 on tree, 1e+50 best solution, best possible 286.44915 (46.64 seconds)
Optimality Based BT: 7 improved bounds
Cbc0010I After 1000 nodes, 281 on tree, 1e+50 best solution, best possible 331.64572 (51.33 seconds)
Cbc0010I After 1100 nodes, 293 on tree, 1e+50 best solution, best possible 342.80022 (53.35 seconds)
Cbc0010I After 1200 nodes, 315 on tree, 1e+50 best solution, best possible 345.93964 (55.27 seconds)
Cbc0010I After 1300 nodes, 337 on tree, 1e+50 best solution, best possible 347.71363 (57.20 seconds)
Cbc0010I After 1400 nodes, 353 on tree, 1e+50 best solution, best possible 350.56568 (59.09 seconds)
Cbc0010I After 1500 nodes, 373 on tree, 1e+50 best solution, best possible 351.63677 (60.94 seconds)
Cbc0010I After 1600 nodes, 398 on tree, 1e+50 best solution, best possible 352.27632 (62.84 seconds)
Cbc0010I After 1700 nodes, 418 on tree, 1e+50 best solution, best possible 352.97138 (64.82 seconds)
Cbc0010I After 1800 nodes, 428 on tree, 1e+50 best solution, best possible 353.33067 (66.63 seconds)
Cbc0010I After 1900 nodes, 439 on tree, 1e+50 best solution, best possible 353.74511 (68.40 seconds)
Cbc0010I After 2000 nodes, 459 on tree, 1e+50 best solution, best possible 354.05172 (70.31 seconds)
Cbc0010I After 2100 nodes, 473 on tree, 1e+50 best solution, best possible 354.28798 (72.18 seconds)
Cbc0010I After 2200 nodes, 487 on tree, 1e+50 best solution, best possible 354.57841 (73.92 seconds)
Cbc0010I After 2300 nodes, 504 on tree, 1e+50 best solution, best possible 354.81467 (75.87 seconds)
Cbc0010I After 2400 nodes, 522 on tree, 1e+50 best solution, best possible 355.2145 (77.82 seconds)
Cbc0010I After 2500 nodes, 540 on tree, 1e+50 best solution, best possible 355.39112 (79.91 seconds)
Cbc0010I After 2600 nodes, 550 on tree, 1e+50 best solution, best possible 355.64386 (81.75 seconds)
Cbc0010I After 2700 nodes, 560 on tree, 1e+50 best solution, best possible 355.93455 (83.58 seconds)
Cbc0010I After 2800 nodes, 562 on tree, 1e+50 best solution, best possible 356.18009 (85.51 seconds)
Cbc0010I After 2900 nodes, 577 on tree, 1e+50 best solution, best possible 356.36602 (87.38 seconds)
Cbc0010I After 3000 nodes, 584 on tree, 1e+50 best solution, best possible 356.57101 (89.16 seconds)
Cbc0010I After 3100 nodes, 589 on tree, 1e+50 best solution, best possible 356.73476 (90.89 seconds)
Cbc0010I After 3200 nodes, 594 on tree, 1e+50 best solution, best possible 357.01329 (92.61 seconds)
Cbc0010I After 3300 nodes, 585 on tree, 1e+50 best solution, best possible 357.22694 (94.23 seconds)
Cbc0010I After 3400 nodes, 583 on tree, 1e+50 best solution, best possible 357.45609 (95.95 seconds)
Cbc0010I After 3500 nodes, 577 on tree, 1e+50 best solution, best possible 357.62221 (97.53 seconds)
Cbc0010I After 3600 nodes, 584 on tree, 1e+50 best solution, best possible 357.78461 (99.36 seconds)
Cbc0010I After 3700 nodes, 580 on tree, 1e+50 best solution, best possible 358.00404 (101.00 seconds)
Cbc0010I After 3800 nodes, 578 on tree, 1e+50 best solution, best possible 358.16453 (102.63 seconds)
Cbc0010I After 3900 nodes, 584 on tree, 1e+50 best solution, best possible 358.26294 (104.35 seconds)
Cbc0010I After 4000 nodes, 587 on tree, 1e+50 best solution, best possible 358.43499 (106.04 seconds)
Cbc0010I After 4100 nodes, 598 on tree, 1e+50 best solution, best possible 358.49132 (107.87 seconds)
Cbc0010I After 4200 nodes, 588 on tree, 1e+50 best solution, best possible 358.64335 (109.44 seconds)
Cbc0010I After 4300 nodes, 594 on tree, 1e+50 best solution, best possible 358.76965 (111.19 seconds)
Cbc0010I After 4400 nodes, 596 on tree, 1e+50 best solution, best possible 358.93404 (112.88 seconds)
Cbc0010I After 4500 nodes, 602 on tree, 1e+50 best solution, best possible 359.00124 (114.63 seconds)
Cbc0010I After 4600 nodes, 607 on tree, 1e+50 best solution, best possible 359.06474 (116.36 seconds)
Cbc0010I After 4700 nodes, 598 on tree, 1e+50 best solution, best possible 359.1905 (117.91 seconds)
Cbc0010I After 4800 nodes, 596 on tree, 1e+50 best solution, best possible 359.27558 (119.83 seconds)
Cbc0010I After 4900 nodes, 598 on tree, 1e+50 best solution, best possible 359.37946 (121.54 seconds)
Cbc0010I After 5000 nodes, 594 on tree, 1e+50 best solution, best possible 359.49168 (123.16 seconds)
Cbc0010I After 5100 nodes, 594 on tree, 1e+50 best solution, best possible 359.60251 (124.81 seconds)
Cbc0010I After 5200 nodes, 598 on tree, 1e+50 best solution, best possible 359.67474 (126.51 seconds)
Cbc0010I After 5300 nodes, 595 on tree, 1e+50 best solution, best possible 359.76716 (128.10 seconds)
Cbc0010I After 5400 nodes, 586 on tree, 1e+50 best solution, best possible 359.90966 (129.64 seconds)
Cbc0010I After 5500 nodes, 595 on tree, 1e+50 best solution, best possible 359.96987 (131.41 seconds)
Cbc0010I After 5600 nodes, 602 on tree, 1e+50 best solution, best possible 360.0369 (133.15 seconds)
Cbc0010I After 5700 nodes, 603 on tree, 1e+50 best solution, best possible 360.11362 (134.75 seconds)
Cbc0010I After 5800 nodes, 609 on tree, 1e+50 best solution, best possible 360.16285 (136.41 seconds)
Cbc0010I After 5900 nodes, 608 on tree, 1e+50 best solution, best possible 360.24938 (138.06 seconds)
Cbc0010I After 6000 nodes, 610 on tree, 1e+50 best solution, best possible 360.30394 (139.95 seconds)
Cbc0010I After 6100 nodes, 607 on tree, 1e+50 best solution, best possible 360.38369 (141.53 seconds)
Cbc0010I After 6200 nodes, 610 on tree, 1e+50 best solution, best possible 360.47172 (143.17 seconds)
Cbc0010I After 6300 nodes, 608 on tree, 1e+50 best solution, best possible 360.57364 (144.78 seconds)
Cbc0010I After 6400 nodes, 602 on tree, 1e+50 best solution, best possible 360.67479 (146.30 seconds)
Cbc0010I After 6500 nodes, 591 on tree, 1e+50 best solution, best possible 360.77939 (147.75 seconds)
Cbc0010I After 6600 nodes, 588 on tree, 1e+50 best solution, best possible 360.86339 (149.32 seconds)
Cbc0010I After 6700 nodes, 595 on tree, 1e+50 best solution, best possible 360.92548 (151.00 seconds)
Cbc0010I After 6800 nodes, 604 on tree, 1e+50 best solution, best possible 360.98038 (152.65 seconds)
Cbc0010I After 6900 nodes, 602 on tree, 1e+50 best solution, best possible 361.0686 (154.35 seconds)
Cbc0010I After 7000 nodes, 591 on tree, 1e+50 best solution, best possible 361.19999 (155.81 seconds)
Cbc0010I After 7100 nodes, 589 on tree, 1e+50 best solution, best possible 361.28109 (157.37 seconds)
Cbc0010I After 7200 nodes, 587 on tree, 1e+50 best solution, best possible 361.35154 (158.93 seconds)
Cbc0010I After 7300 nodes, 577 on tree, 1e+50 best solution, best possible 361.51754 (160.43 seconds)
Cbc0010I After 7400 nodes, 570 on tree, 1e+50 best solution, best possible 361.61979 (162.00 seconds)
Cbc0010I After 7500 nodes, 558 on tree, 1e+50 best solution, best possible 361.75138 (163.42 seconds)
Cbc0010I After 7600 nodes, 554 on tree, 1e+50 best solution, best possible 361.80409 (164.99 seconds)
Cbc0010I After 7700 nodes, 542 on tree, 1e+50 best solution, best possible 361.93473 (166.38 seconds)
Cbc0010I After 7800 nodes, 532 on tree, 1e+50 best solution, best possible 362.01431 (167.82 seconds)
Cbc0010I After 7900 nodes, 523 on tree, 1e+50 best solution, best possible 362.14683 (169.37 seconds)
Cbc0010I After 8000 nodes, 513 on tree, 1e+50 best solution, best possible 362.28742 (170.81 seconds)
Cbc0010I After 8100 nodes, 510 on tree, 1e+50 best solution, best possible 362.38871 (172.36 seconds)
Cbc0010I After 8200 nodes, 502 on tree, 1e+50 best solution, best possible 362.53254 (173.89 seconds)
Cbc0010I After 8300 nodes, 493 on tree, 1e+50 best solution, best possible 362.62394 (175.39 seconds)
Cbc0010I After 8400 nodes, 491 on tree, 1e+50 best solution, best possible 362.72223 (176.97 seconds)
Cbc0010I After 8500 nodes, 472 on tree, 1e+50 best solution, best possible 362.8356 (178.31 seconds)
Cbc0010I After 8600 nodes, 470 on tree, 1e+50 best solution, best possible 362.90637 (179.92 seconds)
Cbc0010I After 8700 nodes, 461 on tree, 1e+50 best solution, best possible 362.97657 (181.40 seconds)
Cbc0010I After 8800 nodes, 456 on tree, 1e+50 best solution, best possible 363.07316 (183.00 seconds)
Cbc0010I After 8900 nodes, 442 on tree, 1e+50 best solution, best possible 363.19155 (184.39 seconds)
Cbc0010I After 9000 nodes, 427 on tree, 1e+50 best solution, best possible 363.31765 (185.82 seconds)
Cbc0010I After 9100 nodes, 421 on tree, 1e+50 best solution, best possible 363.4039 (187.37 seconds)
Cbc0010I After 9200 nodes, 403 on tree, 1e+50 best solution, best possible 363.56679 (188.78 seconds)
Cbc0010I After 9300 nodes, 388 on tree, 1e+50 best solution, best possible 363.75415 (190.27 seconds)
Cbc0010I After 9400 nodes, 369 on tree, 1e+50 best solution, best possible 363.85837 (191.72 seconds)
Cbc0010I After 9500 nodes, 340 on tree, 1e+50 best solution, best possible 364.04142 (193.03 seconds)
Cbc0010I After 9600 nodes, 308 on tree, 1e+50 best solution, best possible 364.18868 (194.39 seconds)
Cbc0010I After 9700 nodes, 284 on tree, 1e+50 best solution, best possible 364.41281 (195.80 seconds)
Cbc0010I After 9800 nodes, 243 on tree, 1e+50 best solution, best possible 365.07784 (197.03 seconds)
Cbc0010I After 9900 nodes, 200 on tree, 1e+50 best solution, best possible 366.72633 (198.18 seconds)
Cbc0010I After 10000 nodes, 157 on tree, 1e+50 best solution, best possible 366.88387 (198.90 seconds)
Cbc0010I After 10100 nodes, 107 on tree, 1e+50 best solution, best possible 383.05756 (199.36 seconds)
Cbc0010I After 10200 nodes, 57 on tree, 1e+50 best solution, best possible 386.33111 (199.75 seconds)
Cbc0010I After 10300 nodes, 7 on tree, 1e+50 best solution, best possible 423.67243 (200.23 seconds)
Cbc0001I Search completed - best objective 1e+50, took 235762 iterations and 10314 nodes (200.30 seconds)
Cbc0035I Maximum depth 128, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       1041
Linearization cuts added in total:           1041  (separation time: 0.003714s)
Total solve time:                         200.307s (200.307s in branch-and-bound)
Lower bound:                              366.774
Upper bound:                              366.774  (gap: 0.00%)
Branch-and-bound nodes:                     10314
Stats: /tmp/jl_htpGx3/model.nl  860 [var]   20 [int]  880 [con]   99 [aux]   1041 [root]     1041 [tot] 0.003714 [sep]  200.307 [time]  200.308 [bb]         3.667740e+02 [lower]         3.667740e+02 [upper]   10314 [nodes]
Performance of                           FBBT:	    12.8734s,    13367 runs. fix:          0 shrnk:   0.741748 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    5.03397s,       12 runs. fix:          0 shrnk:    1.68029 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-20-40-3.txt
