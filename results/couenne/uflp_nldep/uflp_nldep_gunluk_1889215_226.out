solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-30-60-2.txt sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 0.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 302.77961       57 24.903508
NLP0014I             2         OPT 304.05207       61 1.463942
Couenne: new cutoff value 3.0405235171e+02 (27.5587 seconds)
Loaded instance "/tmp/jl_iglBTz/model.nl"
Constraints:         1920
Variables:           1890 (30 integer)
Auxiliaries:          299 (0 integer)

Coin0506I Presolve 2159 (-122) rows, 1949 (-240) columns and 9657 (-362) elements
Clp0006I 0  Obj -109.15343 Primal inf 3372.9385 (149)
Clp0006I 118  Obj 68.726411 Primal inf 251.68445 (98)
Clp0006I 236  Obj 251.33569 Primal inf 3.3723675 (3)
Clp0006I 239  Obj 251.39129
Clp0000I Optimal - objective value 251.39129
Clp0032I Optimal objective 251.3912926 - 239 iterations time 0.022, Presolve 0.01
Clp0000I Optimal - objective value 251.39129
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 251.39129
Optimality Based BT: 69 improved bounds
Probing: 30 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 29 added rows had average density of 2
Cbc0013I At root node, 29 cuts changed objective from 251.39129 to 298.00058 in 15 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 89 row cuts average 2.0 elements, 16 column cuts (16 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (6.62 seconds)
Optimality Based BT: 60 improved bounds
Optimality Based BT: 62 improved bounds
Optimality Based BT: 49 improved bounds
Optimality Based BT: 51 improved bounds
Cbc0010I After 100 nodes, 34 on tree, 1e+50 best solution, best possible 300.0758 (53.38 seconds)
Cbc0010I After 200 nodes, 79 on tree, 1e+50 best solution, best possible 300.0758 (57.25 seconds)
Cbc0010I After 300 nodes, 127 on tree, 1e+50 best solution, best possible 300.0758 (61.07 seconds)
Couenne: new cutoff value 3.0292008685e+02 (91.2448 seconds)
Couenne: new cutoff value 3.0291522079e+02 (91.2889 seconds)
Cbc0004I Integer solution of 302.91522 found after 1938 iterations and 366 nodes (63.65 seconds)
Optimality Based BT: 53 improved bounds
Optimality Based BT: 57 improved bounds
Cbc0010I After 400 nodes, 58 on tree, 302.91522 best solution, best possible 300.79035 (106.38 seconds)
Optimality Based BT: 53 improved bounds
Cbc0010I After 500 nodes, 80 on tree, 302.91522 best solution, best possible 300.97317 (132.51 seconds)
Cbc0010I After 600 nodes, 113 on tree, 302.91522 best solution, best possible 300.97317 (136.46 seconds)
Couenne: new cutoff value 3.0290739960e+02 (164.727 seconds)
Cbc0004I Integer solution of 302.9074 found after 4118 iterations and 615 nodes (137.08 seconds)
Optimality Based BT: 54 improved bounds
Optimality Based BT: 54 improved bounds
Optimality Based BT: 53 improved bounds
Cbc0010I After 700 nodes, 96 on tree, 302.9074 best solution, best possible 301.26257 (188.17 seconds)
Optimality Based BT: 57 improved bounds
Cbc0010I After 800 nodes, 118 on tree, 302.9074 best solution, best possible 301.35018 (205.72 seconds)
Cbc0010I After 900 nodes, 139 on tree, 302.9074 best solution, best possible 301.50638 (210.68 seconds)
Cbc0010I After 1000 nodes, 157 on tree, 302.9074 best solution, best possible 301.65457 (216.48 seconds)
Cbc0010I After 1100 nodes, 181 on tree, 302.9074 best solution, best possible 301.70925 (221.78 seconds)
Cbc0010I After 1200 nodes, 200 on tree, 302.9074 best solution, best possible 301.7945 (226.98 seconds)
Cbc0010I After 1300 nodes, 217 on tree, 302.9074 best solution, best possible 301.82521 (231.81 seconds)
Cbc0010I After 1400 nodes, 236 on tree, 302.9074 best solution, best possible 301.8318 (238.36 seconds)
Cbc0010I After 1500 nodes, 253 on tree, 302.9074 best solution, best possible 301.89532 (243.49 seconds)
Optimality Based BT: 63 improved bounds
Cbc0010I After 1600 nodes, 267 on tree, 302.9074 best solution, best possible 301.93748 (258.98 seconds)
Cbc0010I After 1700 nodes, 283 on tree, 302.9074 best solution, best possible 301.95338 (264.12 seconds)
Cbc0010I After 1800 nodes, 294 on tree, 302.9074 best solution, best possible 301.98119 (275.79 seconds)
Optimality Based BT: 62 improved bounds
Cbc0010I After 1900 nodes, 304 on tree, 302.9074 best solution, best possible 302.03709 (289.07 seconds)
Optimality Based BT: 65 improved bounds
Cbc0010I After 2000 nodes, 308 on tree, 302.9074 best solution, best possible 302.06963 (299.33 seconds)
Cbc0010I After 2100 nodes, 328 on tree, 302.9074 best solution, best possible 302.09808 (304.64 seconds)
Cbc0010I After 2200 nodes, 338 on tree, 302.9074 best solution, best possible 302.1267 (309.74 seconds)
Cbc0010I After 2300 nodes, 346 on tree, 302.9074 best solution, best possible 302.14986 (317.03 seconds)
Cbc0010I After 2400 nodes, 352 on tree, 302.9074 best solution, best possible 302.17081 (322.81 seconds)
Cbc0010I After 2500 nodes, 364 on tree, 302.9074 best solution, best possible 302.19539 (329.43 seconds)
Cbc0010I After 2600 nodes, 368 on tree, 302.9074 best solution, best possible 302.22909 (334.28 seconds)
Cbc0010I After 2700 nodes, 374 on tree, 302.9074 best solution, best possible 302.25847 (339.18 seconds)
Cbc0010I After 2800 nodes, 381 on tree, 302.9074 best solution, best possible 302.29882 (344.19 seconds)
Cbc0010I After 2900 nodes, 382 on tree, 302.9074 best solution, best possible 302.32239 (348.97 seconds)
Cbc0010I After 3000 nodes, 387 on tree, 302.9074 best solution, best possible 302.35674 (354.17 seconds)
Cbc0010I After 3100 nodes, 406 on tree, 302.9074 best solution, best possible 302.37953 (358.94 seconds)
Couenne: new cutoff value 3.0290541540e+02 (389.007 seconds)
Cbc0004I Integer solution of 302.90542 found after 34248 iterations and 3166 nodes (361.36 seconds)
Cbc0010I After 3200 nodes, 402 on tree, 302.90542 best solution, best possible 302.38676 (363.05 seconds)
Cbc0010I After 3300 nodes, 404 on tree, 302.90542 best solution, best possible 302.40451 (367.91 seconds)
Cbc0010I After 3400 nodes, 408 on tree, 302.90542 best solution, best possible 302.41838 (373.02 seconds)
Cbc0010I After 3500 nodes, 405 on tree, 302.90542 best solution, best possible 302.44206 (377.89 seconds)
Cbc0010I After 3600 nodes, 400 on tree, 302.90542 best solution, best possible 302.46492 (382.62 seconds)
Cbc0010I After 3700 nodes, 399 on tree, 302.90542 best solution, best possible 302.48333 (387.99 seconds)
Cbc0010I After 3800 nodes, 399 on tree, 302.90542 best solution, best possible 302.49709 (394.88 seconds)
Cbc0010I After 3900 nodes, 397 on tree, 302.90542 best solution, best possible 302.52637 (399.72 seconds)
Cbc0010I After 4000 nodes, 395 on tree, 302.90542 best solution, best possible 302.54022 (404.50 seconds)
Cbc0010I After 4100 nodes, 391 on tree, 302.90542 best solution, best possible 302.55692 (409.85 seconds)
Cbc0010I After 4200 nodes, 385 on tree, 302.90542 best solution, best possible 302.57282 (415.87 seconds)
Cbc0010I After 4300 nodes, 383 on tree, 302.90542 best solution, best possible 302.58627 (420.65 seconds)
Cbc0010I After 4400 nodes, 379 on tree, 302.90542 best solution, best possible 302.59859 (425.01 seconds)
Cbc0010I After 4500 nodes, 372 on tree, 302.90542 best solution, best possible 302.60986 (429.53 seconds)
Cbc0010I After 4600 nodes, 367 on tree, 302.90542 best solution, best possible 302.62954 (434.33 seconds)
Cbc0010I After 4700 nodes, 360 on tree, 302.90542 best solution, best possible 302.64303 (438.90 seconds)
Cbc0010I After 4800 nodes, 354 on tree, 302.90542 best solution, best possible 302.65191 (443.45 seconds)
Cbc0010I After 4900 nodes, 337 on tree, 302.90542 best solution, best possible 302.66127 (448.00 seconds)
Cbc0010I After 5000 nodes, 325 on tree, 302.90542 best solution, best possible 302.67422 (452.18 seconds)
Cbc0010I After 5100 nodes, 312 on tree, 302.90542 best solution, best possible 302.68517 (456.50 seconds)
Cbc0010I After 5200 nodes, 298 on tree, 302.90542 best solution, best possible 302.6979 (460.55 seconds)
Cbc0010I After 5300 nodes, 276 on tree, 302.90542 best solution, best possible 302.71771 (464.52 seconds)
Cbc0010I After 5400 nodes, 246 on tree, 302.90542 best solution, best possible 302.74195 (468.45 seconds)
Cbc0010I After 5500 nodes, 215 on tree, 302.90542 best solution, best possible 302.7628 (472.49 seconds)
Cbc0010I After 5600 nodes, 186 on tree, 302.90542 best solution, best possible 302.78609 (476.31 seconds)
Cbc0010I After 5700 nodes, 150 on tree, 302.90542 best solution, best possible 302.81149 (479.84 seconds)
Optimality Based BT: 79 improved bounds
Cbc0010I After 5800 nodes, 109 on tree, 302.90542 best solution, best possible 302.84413 (484.51 seconds)
Cbc0010I After 5900 nodes, 71 on tree, 302.90542 best solution, best possible 302.87604 (487.84 seconds)
Couenne: new cutoff value 3.0290534595e+02 (518.272 seconds)
Cbc0004I Integer solution of 302.90535 found after 77230 iterations and 5995 nodes (490.63 seconds)
Cbc0010I After 6000 nodes, 45 on tree, 302.90535 best solution, best possible 302.89168 (490.77 seconds)
Couenne: new cutoff value 3.0290531768e+02 (521.046 seconds)
Cbc0004I Integer solution of 302.90532 found after 78233 iterations and 6098 nodes (493.40 seconds)
Cbc0010I After 6100 nodes, 11 on tree, 302.90532 best solution, best possible 302.90479 (493.47 seconds)
Cbc0001I Search completed - best objective 302.9053176764626, took 78504 iterations and 6128 nodes (494.25 seconds)
Cbc0035I Maximum depth 182, 2003 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       2281
Linearization cuts added in total:           2281  (separation time: 0.016716s)
Total solve time:                         494.288s (494.288s in branch-and-bound)
Lower bound:                              302.905
Upper bound:                              302.905  (gap: 0.00%)
Branch-and-bound nodes:                      6128
Stats: /tmp/jl_iglBTz/model.nl 1890 [var]   30 [int] 1920 [con]  299 [aux]   2281 [root]     2281 [tot] 0.016716 [sep]  494.288 [time]  494.292 [bb]         3.029053e+02 [lower]         3.029053e+02 [upper]    6128 [nodes]
Performance of                           FBBT:	    25.1071s,     7918 runs. fix:  0.0512379 shrnk:     2.8436 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    31.0735s,       16 runs. fix:    5.28021 shrnk:    187.474 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-30-60-2.txt
