solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-50-100-2.txt sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 7.0 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 433.22721       68 219.69645
NLP0014I             2         OPT 435.99105       43 4.401003
Couenne: new cutoff value 4.3599216062e+02 (232.558 seconds)
Loaded instance "/tmp/jl_gJJQEc/model.nl"
Constraints:         5200
Variables:           5150 (50 integer)
Auxiliaries:          499 (0 integer)

Coin0506I Presolve 5599 (-202) rows, 5249 (-400) columns and 26097 (-602) elements
Clp0006I 0  Obj 0 Primal inf 3802.4354 (249) Dual inf 4.3261778e+12 (364)
Clp0029I End of values pass after 149 iterations
Clp0006I 149  Obj 436.00216 Primal inf 342.73766 (100) Dual inf 1.5235831e+14 (5001)
Clp0006I 406  Obj 436.00216 Primal inf 18.535928 (24) Dual inf 2.7410457e+12 (394)
Clp0006I 598  Obj 391.44274 Dual inf 66.229946 (50)
Clp0006I 661  Obj 377.14003
Clp0000I Optimal - objective value 377.14003
Clp0032I Optimal objective 377.1400341 - 661 iterations time 0.152, Presolve 0.03
Clp0000I Optimal - objective value 377.14003
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 377.14003
Optimality Based BT: 93 improved bounds
Probing: 50 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 38 added rows had average density of 2
Cbc0013I At root node, 38 cuts changed objective from 377.14003 to 424.46083 in 13 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 118 row cuts average 2.0 elements, 14 column cuts (14 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (37.35 seconds)
Optimality Based BT: 106 improved bounds
Optimality Based BT: 102 improved bounds
Cbc0010I After 100 nodes, 37 on tree, 1e+50 best solution, best possible 429.83186 (254.79 seconds)
Cbc0010I After 200 nodes, 79 on tree, 1e+50 best solution, best possible 429.83186 (266.60 seconds)
Cbc0010I After 300 nodes, 126 on tree, 1e+50 best solution, best possible 429.83186 (278.72 seconds)
Cbc0010I After 400 nodes, 175 on tree, 1e+50 best solution, best possible 429.83186 (291.44 seconds)
Cbc0010I After 500 nodes, 225 on tree, 1e+50 best solution, best possible 429.83186 (304.04 seconds)
Couenne: new cutoff value 4.3322835948e+02 (545.136 seconds)
Cbc0004I Integer solution of 433.22836 found after 3048 iterations and 565 nodes (312.08 seconds)
Cbc0010I After 600 nodes, 50 on tree, 433.22836 best solution, best possible 430.12898 (321.37 seconds)
Optimality Based BT: 106 improved bounds
Cbc0010I After 700 nodes, 71 on tree, 433.22836 best solution, best possible 430.4845 (352.93 seconds)
Cbc0010I After 800 nodes, 91 on tree, 433.22836 best solution, best possible 430.59465 (371.47 seconds)
Cbc0010I After 900 nodes, 121 on tree, 433.22836 best solution, best possible 430.66422 (390.54 seconds)
Cbc0010I After 1000 nodes, 139 on tree, 433.22836 best solution, best possible 430.68092 (406.13 seconds)
Cbc0010I After 1100 nodes, 160 on tree, 433.22836 best solution, best possible 430.74802 (422.82 seconds)
Optimality Based BT: 116 improved bounds
Cbc0010I After 1200 nodes, 183 on tree, 433.22836 best solution, best possible 430.87196 (449.22 seconds)
Cbc0010I After 1300 nodes, 205 on tree, 433.22836 best solution, best possible 431.02838 (468.20 seconds)
Cbc0010I After 1400 nodes, 229 on tree, 433.22836 best solution, best possible 431.043 (487.39 seconds)
Cbc0010I After 1500 nodes, 251 on tree, 433.22836 best solution, best possible 431.06795 (504.68 seconds)
Cbc0010I After 1600 nodes, 271 on tree, 433.22836 best solution, best possible 431.07914 (521.31 seconds)
Cbc0010I After 1700 nodes, 295 on tree, 433.22836 best solution, best possible 431.15373 (538.81 seconds)
Cbc0010I After 1800 nodes, 316 on tree, 433.22836 best solution, best possible 431.2722 (556.59 seconds)
Cbc0010I After 1900 nodes, 339 on tree, 433.22836 best solution, best possible 431.28769 (578.31 seconds)
Cbc0010I After 2000 nodes, 362 on tree, 433.22836 best solution, best possible 431.29512 (597.39 seconds)
Cbc0010I After 2100 nodes, 389 on tree, 433.22836 best solution, best possible 431.31857 (616.69 seconds)
Cbc0010I After 2200 nodes, 412 on tree, 433.22836 best solution, best possible 431.33011 (635.09 seconds)
Cbc0010I After 2300 nodes, 435 on tree, 433.22836 best solution, best possible 431.35505 (654.76 seconds)
Cbc0010I After 2400 nodes, 455 on tree, 433.22836 best solution, best possible 431.36473 (673.58 seconds)
Cbc0010I After 2500 nodes, 472 on tree, 433.22836 best solution, best possible 431.37724 (691.87 seconds)
Cbc0010I After 2600 nodes, 498 on tree, 433.22836 best solution, best possible 431.39799 (711.46 seconds)
Cbc0010I After 2700 nodes, 523 on tree, 433.22836 best solution, best possible 431.41226 (733.16 seconds)
Cbc0010I After 2800 nodes, 543 on tree, 433.22836 best solution, best possible 431.46873 (752.80 seconds)
Cbc0010I After 2900 nodes, 569 on tree, 433.22836 best solution, best possible 431.48501 (776.79 seconds)
Cbc0010I After 3000 nodes, 593 on tree, 433.22836 best solution, best possible 431.50527 (795.66 seconds)
Cbc0010I After 3100 nodes, 618 on tree, 433.22836 best solution, best possible 431.51526 (817.39 seconds)
Cbc0010I After 3200 nodes, 642 on tree, 433.22836 best solution, best possible 431.53624 (842.52 seconds)
Cbc0010I After 3300 nodes, 666 on tree, 433.22836 best solution, best possible 431.57877 (862.33 seconds)
Cbc0010I After 3400 nodes, 683 on tree, 433.22836 best solution, best possible 431.58947 (883.23 seconds)
Cbc0010I After 3500 nodes, 703 on tree, 433.22836 best solution, best possible 431.60081 (901.91 seconds)
Cbc0010I After 3600 nodes, 723 on tree, 433.22836 best solution, best possible 431.6127 (922.44 seconds)
Cbc0010I After 3700 nodes, 742 on tree, 433.22836 best solution, best possible 431.65123 (941.84 seconds)
Cbc0010I After 3800 nodes, 762 on tree, 433.22836 best solution, best possible 431.67949 (964.33 seconds)
Cbc0010I After 3900 nodes, 780 on tree, 433.22836 best solution, best possible 431.69036 (985.60 seconds)
Cbc0010I After 4000 nodes, 803 on tree, 433.22836 best solution, best possible 431.69396 (1003.67 seconds)
Cbc0010I After 4100 nodes, 824 on tree, 433.22836 best solution, best possible 431.69791 (1022.82 seconds)
Cbc0010I After 4200 nodes, 840 on tree, 433.22836 best solution, best possible 431.70089 (1041.05 seconds)
Cbc0010I After 4300 nodes, 856 on tree, 433.22836 best solution, best possible 431.70493 (1059.66 seconds)
Cbc0010I After 4400 nodes, 873 on tree, 433.22836 best solution, best possible 431.71003 (1080.85 seconds)
Cbc0010I After 4500 nodes, 891 on tree, 433.22836 best solution, best possible 431.71406 (1102.45 seconds)
Cbc0010I After 4600 nodes, 908 on tree, 433.22836 best solution, best possible 431.7341 (1121.26 seconds)
Cbc0010I After 4700 nodes, 929 on tree, 433.22836 best solution, best possible 431.7422 (1140.65 seconds)
Cbc0010I After 4800 nodes, 950 on tree, 433.22836 best solution, best possible 431.74913 (1159.94 seconds)
Cbc0010I After 4900 nodes, 971 on tree, 433.22836 best solution, best possible 431.75443 (1179.98 seconds)
Cbc0010I After 5000 nodes, 990 on tree, 433.22836 best solution, best possible 431.76656 (1204.16 seconds)
Cbc0010I After 5100 nodes, 1010 on tree, 433.22836 best solution, best possible 431.77454 (1228.96 seconds)
Cbc0010I After 5200 nodes, 1029 on tree, 433.22836 best solution, best possible 431.78544 (1251.32 seconds)
Cbc0010I After 5300 nodes, 1051 on tree, 433.22836 best solution, best possible 431.79409 (1271.96 seconds)
Cbc0010I After 5400 nodes, 1069 on tree, 433.22836 best solution, best possible 431.81646 (1295.18 seconds)
Cbc0010I After 5500 nodes, 1093 on tree, 433.22836 best solution, best possible 431.85009 (1315.21 seconds)
Cbc0010I After 5600 nodes, 1115 on tree, 433.22836 best solution, best possible 431.89356 (1335.22 seconds)
Cbc0010I After 5700 nodes, 1132 on tree, 433.22836 best solution, best possible 431.92738 (1355.01 seconds)
Cbc0010I After 5800 nodes, 1152 on tree, 433.22836 best solution, best possible 431.94262 (1374.78 seconds)
Cbc0010I After 5900 nodes, 1169 on tree, 433.22836 best solution, best possible 431.95564 (1393.53 seconds)
Cbc0010I After 6000 nodes, 1184 on tree, 433.22836 best solution, best possible 431.96614 (1415.27 seconds)
Cbc0010I After 6100 nodes, 1200 on tree, 433.22836 best solution, best possible 431.97383 (1434.11 seconds)
Cbc0010I After 6200 nodes, 1214 on tree, 433.22836 best solution, best possible 431.98237 (1455.49 seconds)
Cbc0010I After 6300 nodes, 1222 on tree, 433.22836 best solution, best possible 432.0071 (1475.41 seconds)
Cbc0010I After 6400 nodes, 1232 on tree, 433.22836 best solution, best possible 432.01625 (1494.82 seconds)
Cbc0010I After 6500 nodes, 1246 on tree, 433.22836 best solution, best possible 432.02744 (1514.97 seconds)
Cbc0010I After 6600 nodes, 1262 on tree, 433.22836 best solution, best possible 432.03762 (1535.23 seconds)
Cbc0010I After 6700 nodes, 1279 on tree, 433.22836 best solution, best possible 432.05669 (1555.23 seconds)
Cbc0010I After 6800 nodes, 1295 on tree, 433.22836 best solution, best possible 432.06501 (1576.96 seconds)
Cbc0010I After 6900 nodes, 1313 on tree, 433.22836 best solution, best possible 432.07011 (1596.29 seconds)
Cbc0010I After 7000 nodes, 1328 on tree, 433.22836 best solution, best possible 432.07502 (1614.70 seconds)
Cbc0010I After 7100 nodes, 1345 on tree, 433.22836 best solution, best possible 432.08182 (1634.25 seconds)
Cbc0010I After 7200 nodes, 1360 on tree, 433.22836 best solution, best possible 432.08741 (1653.81 seconds)
Cbc0010I After 7300 nodes, 1372 on tree, 433.22836 best solution, best possible 432.09438 (1672.79 seconds)
Cbc0010I After 7400 nodes, 1384 on tree, 433.22836 best solution, best possible 432.10504 (1692.49 seconds)
Cbc0010I After 7500 nodes, 1396 on tree, 433.22836 best solution, best possible 432.11075 (1711.94 seconds)
Cbc0010I After 7600 nodes, 1407 on tree, 433.22836 best solution, best possible 432.11682 (1732.04 seconds)
Cbc0010I After 7700 nodes, 1420 on tree, 433.22836 best solution, best possible 432.12074 (1755.96 seconds)
Cbc0010I After 7800 nodes, 1430 on tree, 433.22836 best solution, best possible 432.12879 (1775.84 seconds)
Cbc0010I After 7900 nodes, 1445 on tree, 433.22836 best solution, best possible 432.13548 (1795.31 seconds)
Cbc0010I After 8000 nodes, 1455 on tree, 433.22836 best solution, best possible 432.14692 (1814.97 seconds)
Cbc0010I After 8100 nodes, 1465 on tree, 433.22836 best solution, best possible 432.1531 (1837.14 seconds)
Cbc0010I After 8200 nodes, 1475 on tree, 433.22836 best solution, best possible 432.1642 (1857.45 seconds)
Cbc0010I After 8300 nodes, 1489 on tree, 433.22836 best solution, best possible 432.17595 (1879.89 seconds)
Cbc0010I After 8400 nodes, 1505 on tree, 433.22836 best solution, best possible 432.18696 (1899.60 seconds)
Cbc0010I After 8500 nodes, 1518 on tree, 433.22836 best solution, best possible 432.19245 (1918.47 seconds)
Cbc0010I After 8600 nodes, 1528 on tree, 433.22836 best solution, best possible 432.20164 (1938.33 seconds)
Cbc0010I After 8700 nodes, 1538 on tree, 433.22836 best solution, best possible 432.21084 (1957.12 seconds)
Cbc0010I After 8800 nodes, 1549 on tree, 433.22836 best solution, best possible 432.21229 (1975.34 seconds)
Cbc0010I After 8900 nodes, 1557 on tree, 433.22836 best solution, best possible 432.21709 (1993.92 seconds)
Cbc0010I After 9000 nodes, 1567 on tree, 433.22836 best solution, best possible 432.22055 (2012.17 seconds)
Cbc0010I After 9100 nodes, 1578 on tree, 433.22836 best solution, best possible 432.22468 (2033.01 seconds)
Cbc0010I After 9200 nodes, 1591 on tree, 433.22836 best solution, best possible 432.23861 (2053.12 seconds)
Cbc0010I After 9300 nodes, 1600 on tree, 433.22836 best solution, best possible 432.26582 (2072.20 seconds)
Cbc0010I After 9400 nodes, 1608 on tree, 433.22836 best solution, best possible 432.2845 (2090.86 seconds)
Cbc0010I After 9500 nodes, 1621 on tree, 433.22836 best solution, best possible 432.29566 (2113.43 seconds)
Cbc0010I After 9600 nodes, 1629 on tree, 433.22836 best solution, best possible 432.32231 (2134.41 seconds)
Cbc0010I After 9700 nodes, 1637 on tree, 433.22836 best solution, best possible 432.3305 (2152.62 seconds)
Cbc0010I After 9800 nodes, 1642 on tree, 433.22836 best solution, best possible 432.33852 (2170.42 seconds)
Cbc0010I After 9900 nodes, 1649 on tree, 433.22836 best solution, best possible 432.34746 (2188.79 seconds)
Cbc0010I After 10000 nodes, 1659 on tree, 433.22836 best solution, best possible 432.36172 (2209.34 seconds)
Cbc0010I After 10100 nodes, 1662 on tree, 433.22836 best solution, best possible 432.37821 (2229.06 seconds)
Cbc0010I After 10200 nodes, 1663 on tree, 433.22836 best solution, best possible 432.39033 (2246.07 seconds)
Cbc0010I After 10300 nodes, 1672 on tree, 433.22836 best solution, best possible 432.3963 (2263.70 seconds)
Cbc0010I After 10400 nodes, 1679 on tree, 433.22836 best solution, best possible 432.40261 (2281.93 seconds)
Cbc0010I After 10500 nodes, 1689 on tree, 433.22836 best solution, best possible 432.40861 (2300.00 seconds)
Cbc0010I After 10600 nodes, 1695 on tree, 433.22836 best solution, best possible 432.42275 (2319.26 seconds)
Cbc0010I After 10700 nodes, 1698 on tree, 433.22836 best solution, best possible 432.43919 (2338.74 seconds)
Cbc0010I After 10800 nodes, 1702 on tree, 433.22836 best solution, best possible 432.44595 (2357.93 seconds)
Cbc0010I After 10900 nodes, 1702 on tree, 433.22836 best solution, best possible 432.45261 (2375.97 seconds)
Cbc0010I After 11000 nodes, 1707 on tree, 433.22836 best solution, best possible 432.45635 (2393.74 seconds)
Cbc0010I After 11100 nodes, 1708 on tree, 433.22836 best solution, best possible 432.46349 (2411.38 seconds)
Cbc0010I After 11200 nodes, 1710 on tree, 433.22836 best solution, best possible 432.47115 (2431.90 seconds)
Cbc0010I After 11300 nodes, 1707 on tree, 433.22836 best solution, best possible 432.48648 (2452.91 seconds)
Cbc0010I After 11400 nodes, 1702 on tree, 433.22836 best solution, best possible 432.49608 (2471.41 seconds)
Cbc0010I After 11500 nodes, 1708 on tree, 433.22836 best solution, best possible 432.5021 (2488.47 seconds)
Cbc0010I After 11600 nodes, 1712 on tree, 433.22836 best solution, best possible 432.50477 (2504.54 seconds)
Cbc0010I After 11700 nodes, 1714 on tree, 433.22836 best solution, best possible 432.5101 (2521.28 seconds)
Cbc0010I After 11800 nodes, 1723 on tree, 433.22836 best solution, best possible 432.5134 (2538.30 seconds)
Cbc0010I After 11900 nodes, 1724 on tree, 433.22836 best solution, best possible 432.51939 (2555.47 seconds)
Cbc0010I After 12000 nodes, 1727 on tree, 433.22836 best solution, best possible 432.52384 (2572.55 seconds)
Cbc0010I After 12100 nodes, 1728 on tree, 433.22836 best solution, best possible 432.53109 (2591.04 seconds)
Cbc0010I After 12200 nodes, 1727 on tree, 433.22836 best solution, best possible 432.53822 (2608.02 seconds)
Cbc0010I After 12300 nodes, 1729 on tree, 433.22836 best solution, best possible 432.54481 (2625.20 seconds)
Cbc0010I After 12400 nodes, 1731 on tree, 433.22836 best solution, best possible 432.55079 (2644.78 seconds)
Cbc0010I After 12500 nodes, 1735 on tree, 433.22836 best solution, best possible 432.55515 (2662.64 seconds)
Cbc0010I After 12600 nodes, 1736 on tree, 433.22836 best solution, best possible 432.55857 (2679.67 seconds)
Cbc0010I After 12700 nodes, 1737 on tree, 433.22836 best solution, best possible 432.5605 (2695.39 seconds)
Cbc0010I After 12800 nodes, 1737 on tree, 433.22836 best solution, best possible 432.56415 (2712.73 seconds)
Cbc0010I After 12900 nodes, 1738 on tree, 433.22836 best solution, best possible 432.56919 (2730.36 seconds)
Cbc0010I After 13000 nodes, 1739 on tree, 433.22836 best solution, best possible 432.57152 (2747.34 seconds)
Cbc0010I After 13100 nodes, 1736 on tree, 433.22836 best solution, best possible 432.57717 (2764.02 seconds)
Cbc0010I After 13200 nodes, 1734 on tree, 433.22836 best solution, best possible 432.58185 (2779.72 seconds)
Cbc0010I After 13300 nodes, 1733 on tree, 433.22836 best solution, best possible 432.5852 (2797.92 seconds)
Cbc0010I After 13400 nodes, 1736 on tree, 433.22836 best solution, best possible 432.58804 (2813.94 seconds)
Cbc0010I After 13500 nodes, 1739 on tree, 433.22836 best solution, best possible 432.5905 (2830.35 seconds)
Cbc0010I After 13600 nodes, 1744 on tree, 433.22836 best solution, best possible 432.59434 (2846.99 seconds)
Cbc0010I After 13700 nodes, 1743 on tree, 433.22836 best solution, best possible 432.59831 (2863.22 seconds)
Cbc0010I After 13800 nodes, 1742 on tree, 433.22836 best solution, best possible 432.59999 (2879.05 seconds)
Cbc0010I After 13900 nodes, 1744 on tree, 433.22836 best solution, best possible 432.60338 (2895.35 seconds)
Cbc0010I After 14000 nodes, 1745 on tree, 433.22836 best solution, best possible 432.60529 (2911.06 seconds)
Cbc0010I After 14100 nodes, 1748 on tree, 433.22836 best solution, best possible 432.60733 (2927.31 seconds)
Cbc0010I After 14200 nodes, 1749 on tree, 433.22836 best solution, best possible 432.60984 (2943.82 seconds)
Cbc0010I After 14300 nodes, 1753 on tree, 433.22836 best solution, best possible 432.6115 (2959.61 seconds)
Cbc0010I After 14400 nodes, 1748 on tree, 433.22836 best solution, best possible 432.6144 (2976.10 seconds)
Cbc0010I After 14500 nodes, 1750 on tree, 433.22836 best solution, best possible 432.61649 (2992.81 seconds)
Cbc0010I After 14600 nodes, 1750 on tree, 433.22836 best solution, best possible 432.61865 (3012.54 seconds)
Cbc0010I After 14700 nodes, 1749 on tree, 433.22836 best solution, best possible 432.62292 (3029.65 seconds)
Cbc0010I After 14800 nodes, 1750 on tree, 433.22836 best solution, best possible 432.62437 (3046.69 seconds)
Cbc0010I After 14900 nodes, 1749 on tree, 433.22836 best solution, best possible 432.62804 (3063.33 seconds)
Cbc0010I After 15000 nodes, 1747 on tree, 433.22836 best solution, best possible 432.63201 (3080.26 seconds)
Cbc0010I After 15100 nodes, 1747 on tree, 433.22836 best solution, best possible 432.63495 (3097.31 seconds)
Cbc0010I After 15200 nodes, 1751 on tree, 433.22836 best solution, best possible 432.63686 (3115.82 seconds)
Cbc0010I After 15300 nodes, 1752 on tree, 433.22836 best solution, best possible 432.64305 (3132.07 seconds)
Cbc0010I After 15400 nodes, 1756 on tree, 433.22836 best solution, best possible 432.64629 (3148.59 seconds)
Cbc0010I After 15500 nodes, 1758 on tree, 433.22836 best solution, best possible 432.6516 (3164.72 seconds)
Cbc0010I After 15600 nodes, 1759 on tree, 433.22836 best solution, best possible 432.65484 (3183.10 seconds)
Cbc0010I After 15700 nodes, 1760 on tree, 433.22836 best solution, best possible 432.65965 (3201.32 seconds)
Cbc0010I After 15800 nodes, 1757 on tree, 433.22836 best solution, best possible 432.66351 (3216.83 seconds)
Cbc0010I After 15900 nodes, 1756 on tree, 433.22836 best solution, best possible 432.66877 (3232.22 seconds)
Cbc0010I After 16000 nodes, 1756 on tree, 433.22836 best solution, best possible 432.67308 (3247.94 seconds)
Cbc0010I After 16100 nodes, 1751 on tree, 433.22836 best solution, best possible 432.67626 (3263.46 seconds)
Cbc0010I After 16200 nodes, 1753 on tree, 433.22836 best solution, best possible 432.67855 (3279.31 seconds)
Cbc0010I After 16300 nodes, 1752 on tree, 433.22836 best solution, best possible 432.68389 (3295.15 seconds)
Cbc0010I After 16400 nodes, 1750 on tree, 433.22836 best solution, best possible 432.68905 (3310.69 seconds)
Cbc0010I After 16500 nodes, 1747 on tree, 433.22836 best solution, best possible 432.69789 (3328.62 seconds)
Cbc0010I After 16600 nodes, 1745 on tree, 433.22836 best solution, best possible 432.70457 (3344.99 seconds)
Cbc0010I After 16700 nodes, 1738 on tree, 433.22836 best solution, best possible 432.70886 (3359.53 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 433.22836 (best possible 432.70886), took 323110 iterations and 16747 nodes (3371.59 seconds)
Cbc0035I Maximum depth 282, 12535 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       5801
Linearization cuts added in total:           5801  (separation time: 0.055852s)
Total solve time:                         3371.77s (3371.77s in branch-and-bound)
Lower bound:                              432.709
Upper bound:                              433.228  (gap: 0.12%)
Branch-and-bound nodes:                     16747
Stats: /tmp/jl_gJJQEc/model.nl 5150 [var]   50 [int] 5200 [con]  499 [aux]   5801 [root]     5801 [tot] 0.055852 [sep]  3371.77 [time]  3371.78 [bb]         4.327089e+02 [lower]         4.332284e+02 [upper]   16747 [nodes]
Performance of                           FBBT:	    335.145s,    23915 runs. fix:  0.0826035 shrnk:    1.92648 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    37.4025s,        5 runs. fix:        0.9 shrnk:    396.628 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-50-100-2.txt
