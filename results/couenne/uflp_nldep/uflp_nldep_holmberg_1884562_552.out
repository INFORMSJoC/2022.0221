solving instance uflp nldep holmberg 56 cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 9.7671000000e+04 (10.0702 seconds)
10.1 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 13097.369       32 4.066216
Couenne: new cutoff value 1.3097361411e+04 (14.1652 seconds)
Loaded instance "/tmp/jl_x8SB2p/model.nl"
Constraints:         6260
Variables:           6090 (30 integer)
Auxiliaries:          289 (0 integer)

Coin0506I Presolve 6500 (-1) rows, 6150 (-229) columns and 30689 (-230) elements
Clp0006I 0  Obj 0 Primal inf 53528.119 (200) Dual inf 2.0125167e+13 (6001)
Clp0029I End of values pass after 30 iterations
Clp0006I 30  Obj 0 Primal inf 53528.119 (200) Dual inf 2.0125167e+13 (6030)
Clp0006I 242  Obj 7005.5241 Primal inf 39052.792 (172) Dual inf 1.2151885e+13 (5045)
Clp0006I 470  Obj 11948.609 Dual inf 16.768065 (129)
Clp0006I 571  Obj 11742.903
Clp0000I Optimal - objective value 11742.903
Clp0000I Optimal - objective value 11742.903
Clp0032I Optimal objective 11742.90275 - 571 iterations time 0.102, Presolve 0.03
Clp0000I Optimal - objective value 11742.903
NLP Heuristic: NLP0014I             2         OPT 13097.369        9 1.187767
no solution.
Clp0000I Optimal - objective value 11742.903
Optimality Based BT: 2 improved bounds
Probing: 0 improved bounds
NLP Heuristic: no solution.
Cbc0031I 32 added rows had average density of 2
Cbc0013I At root node, 32 cuts changed objective from 11742.903 to 11823.187 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 266 row cuts average 2.0 elements, 242 column cuts (242 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (47.75 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (185.35 seconds)
Cbc0010I After 200 nodes, 7 on tree, 1e+50 best solution, best possible 13010.959 (196.00 seconds)
Cbc0010I After 300 nodes, 25 on tree, 1e+50 best solution, best possible 13010.959 (210.58 seconds)
Cbc0010I After 400 nodes, 31 on tree, 1e+50 best solution, best possible 13010.959 (222.23 seconds)
Cbc0010I After 500 nodes, 47 on tree, 1e+50 best solution, best possible 13028.264 (235.99 seconds)
Cbc0010I After 600 nodes, 51 on tree, 1e+50 best solution, best possible 13029.336 (248.67 seconds)
Cbc0010I After 700 nodes, 52 on tree, 1e+50 best solution, best possible 13034.866 (260.51 seconds)
Cbc0010I After 800 nodes, 54 on tree, 1e+50 best solution, best possible 13043.472 (272.76 seconds)
Cbc0010I After 900 nodes, 52 on tree, 1e+50 best solution, best possible 13052.68 (284.03 seconds)
Cbc0010I After 1000 nodes, 47 on tree, 1e+50 best solution, best possible 13065.872 (295.69 seconds)
Cbc0010I After 1100 nodes, 58 on tree, 1e+50 best solution, best possible 13068.998 (309.90 seconds)
Cbc0010I After 1200 nodes, 65 on tree, 1e+50 best solution, best possible 13073.002 (324.72 seconds)
Cbc0010I After 1300 nodes, 83 on tree, 1e+50 best solution, best possible 13073.491 (341.31 seconds)
Cbc0010I After 1400 nodes, 99 on tree, 1e+50 best solution, best possible 13074.313 (357.41 seconds)
Cbc0010I After 1500 nodes, 117 on tree, 1e+50 best solution, best possible 13075.379 (373.53 seconds)
Cbc0010I After 1600 nodes, 134 on tree, 1e+50 best solution, best possible 13076.077 (389.61 seconds)
Cbc0010I After 1700 nodes, 146 on tree, 1e+50 best solution, best possible 13077.207 (406.27 seconds)
Cbc0010I After 1800 nodes, 157 on tree, 1e+50 best solution, best possible 13078.145 (422.37 seconds)
Cbc0010I After 1900 nodes, 170 on tree, 1e+50 best solution, best possible 13078.303 (439.29 seconds)
Cbc0010I After 2000 nodes, 184 on tree, 1e+50 best solution, best possible 13079.167 (456.00 seconds)
Cbc0010I After 2100 nodes, 192 on tree, 1e+50 best solution, best possible 13079.539 (472.81 seconds)
Cbc0010I After 2200 nodes, 208 on tree, 1e+50 best solution, best possible 13080.157 (490.56 seconds)
Cbc0010I After 2300 nodes, 215 on tree, 1e+50 best solution, best possible 13080.679 (506.85 seconds)
Cbc0010I After 2400 nodes, 229 on tree, 1e+50 best solution, best possible 13081.284 (523.60 seconds)
Cbc0010I After 2500 nodes, 239 on tree, 1e+50 best solution, best possible 13081.981 (539.88 seconds)
Cbc0010I After 2600 nodes, 247 on tree, 1e+50 best solution, best possible 13082.23 (556.48 seconds)
Cbc0010I After 2700 nodes, 254 on tree, 1e+50 best solution, best possible 13082.541 (573.67 seconds)
Cbc0010I After 2800 nodes, 258 on tree, 1e+50 best solution, best possible 13083.138 (590.00 seconds)
Cbc0010I After 2900 nodes, 262 on tree, 1e+50 best solution, best possible 13083.351 (606.71 seconds)
Cbc0010I After 3000 nodes, 266 on tree, 1e+50 best solution, best possible 13083.829 (623.02 seconds)
Cbc0010I After 3100 nodes, 267 on tree, 1e+50 best solution, best possible 13084.376 (638.98 seconds)
Cbc0010I After 3200 nodes, 270 on tree, 1e+50 best solution, best possible 13084.84 (656.00 seconds)
Cbc0010I After 3300 nodes, 272 on tree, 1e+50 best solution, best possible 13085.158 (672.00 seconds)
Cbc0010I After 3400 nodes, 275 on tree, 1e+50 best solution, best possible 13085.721 (688.58 seconds)
Cbc0010I After 3500 nodes, 275 on tree, 1e+50 best solution, best possible 13086.157 (704.67 seconds)
Cbc0010I After 3600 nodes, 272 on tree, 1e+50 best solution, best possible 13086.602 (721.32 seconds)
Cbc0010I After 3700 nodes, 272 on tree, 1e+50 best solution, best possible 13086.832 (736.99 seconds)
Cbc0010I After 3800 nodes, 268 on tree, 1e+50 best solution, best possible 13087.222 (752.51 seconds)
Cbc0010I After 3900 nodes, 268 on tree, 1e+50 best solution, best possible 13087.64 (768.12 seconds)
Cbc0010I After 4000 nodes, 273 on tree, 1e+50 best solution, best possible 13087.677 (782.65 seconds)
Cbc0010I After 4100 nodes, 273 on tree, 1e+50 best solution, best possible 13087.845 (792.88 seconds)
Cbc0010I After 4200 nodes, 273 on tree, 1e+50 best solution, best possible 13087.953 (807.52 seconds)
Cbc0010I After 4300 nodes, 264 on tree, 1e+50 best solution, best possible 13088.3 (823.45 seconds)
Cbc0010I After 4400 nodes, 253 on tree, 1e+50 best solution, best possible 13088.828 (838.63 seconds)
Cbc0010I After 4500 nodes, 246 on tree, 1e+50 best solution, best possible 13089.205 (853.85 seconds)
Cbc0010I After 4600 nodes, 243 on tree, 1e+50 best solution, best possible 13089.485 (868.72 seconds)
Cbc0010I After 4700 nodes, 229 on tree, 1e+50 best solution, best possible 13090.407 (882.39 seconds)
Cbc0010I After 4800 nodes, 223 on tree, 1e+50 best solution, best possible 13090.62 (896.90 seconds)
Cbc0010I After 4900 nodes, 216 on tree, 1e+50 best solution, best possible 13090.784 (910.49 seconds)
Cbc0010I After 5000 nodes, 198 on tree, 1e+50 best solution, best possible 13091.299 (924.23 seconds)
Cbc0010I After 5100 nodes, 185 on tree, 1e+50 best solution, best possible 13091.729 (938.61 seconds)
Cbc0010I After 5200 nodes, 165 on tree, 1e+50 best solution, best possible 13092.515 (953.41 seconds)
Cbc0010I After 5300 nodes, 152 on tree, 1e+50 best solution, best possible 13092.896 (967.05 seconds)
Cbc0010I After 5400 nodes, 125 on tree, 1e+50 best solution, best possible 13093.59 (979.75 seconds)
Cbc0010I After 5500 nodes, 98 on tree, 1e+50 best solution, best possible 13094.503 (992.01 seconds)
Cbc0010I After 5600 nodes, 65 on tree, 1e+50 best solution, best possible 13095.806 (1003.58 seconds)
Cbc0010I After 5700 nodes, 68 on tree, 1e+50 best solution, best possible 13095.829 (1014.54 seconds)
Cbc0010I After 5800 nodes, 73 on tree, 1e+50 best solution, best possible 13095.829 (1025.52 seconds)
Cbc0010I After 5900 nodes, 53 on tree, 1e+50 best solution, best possible 13096.452 (1037.25 seconds)
Cbc0010I After 6000 nodes, 37 on tree, 1e+50 best solution, best possible 13097.075 (1048.84 seconds)
Cbc0010I After 6100 nodes, 28 on tree, 1e+50 best solution, best possible 13097.195 (1058.94 seconds)
Cbc0010I After 6200 nodes, 21 on tree, 1e+50 best solution, best possible 13097.21 (1068.57 seconds)
Cbc0010I After 6300 nodes, 13 on tree, 1e+50 best solution, best possible 13097.244 (1078.56 seconds)
Cbc0001I Search completed - best objective 1e+50, took 141618 iterations and 6380 nodes (1085.63 seconds)
Cbc0035I Maximum depth 217, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       6501
Linearization cuts added in total:           6501  (separation time: 0.048053s)
Total solve time:                         1085.74s (1085.74s in branch-and-bound)
Lower bound:                              13097.4
Upper bound:                              13097.4  (gap: 0.00%)
Branch-and-bound nodes:                      6380
Stats: /tmp/jl_x8SB2p/model.nl 6090 [var]   30 [int] 6260 [con]  289 [aux]   6501 [root]     6501 [tot] 0.048053 [sep]  1085.74 [time]  1085.75 [bb]         1.309736e+04 [lower]         1.309736e+04 [upper]    6380 [nodes]
Performance of                           FBBT:	    94.2479s,     7343 runs. fix:          0 shrnk:    6.70042 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    7.80281s,        3 runs. fix:          0 shrnk:     12.417 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
reading holmberg data file /home/ccontard/git/ipwlb/code/instances/uflp/holmberg/p56
