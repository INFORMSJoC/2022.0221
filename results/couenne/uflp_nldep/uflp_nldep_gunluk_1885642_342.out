solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-4.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 2.3113567237e+03 (2.95629 seconds)
2.9 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 552.50962       55 2.898662
Couenne: new cutoff value 7.8624731533e+02 (6.46764 seconds)
NLP0014I             2         OPT 613.74788       36 2.236691
Couenne: new cutoff value 6.1374852827e+02 (8.70832 seconds)
Loaded instance "/tmp/jl_CAgIm4/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3680 (-1) rows, 3400 (-119) columns and 16919 (-120) elements
Clp0006I 0  Obj -5197.5 Primal inf 9092035 (120)
Clp0006I 148  Obj -3238.8346 Primal inf 5010923.3 (193)
Clp0006I 296  Obj -4.5855904 Primal inf 25717.549 (88)
Clp0006I 444  Obj 331.46647 Primal inf 18779.58 (73)
Clp0006I 570  Obj 470.52318
Clp0000I Optimal - objective value 470.52318
Clp0000I Optimal - objective value 470.52318
Clp0032I Optimal objective 470.5231752 - 570 iterations time 0.052, Presolve 0.02
Clp0000I Optimal - objective value 470.52318
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 470.52318
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 17 added rows had average density of 2
Cbc0013I At root node, 17 cuts changed objective from 470.52318 to 470.59271 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 138 row cuts average 2.0 elements, 512 column cuts (512 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (11.92 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 26 on tree, 1e+50 best solution, best possible 524.13093 (80.96 seconds)
Cbc0010I After 200 nodes, 72 on tree, 1e+50 best solution, best possible 524.13093 (90.15 seconds)
Cbc0010I After 300 nodes, 122 on tree, 1e+50 best solution, best possible 524.13093 (98.74 seconds)
Cbc0010I After 400 nodes, 172 on tree, 1e+50 best solution, best possible 524.13093 (105.28 seconds)
Couenne: new cutoff value 5.5306886198e+02 (114.814 seconds)
Cbc0010I After 500 nodes, 190 on tree, 1e+50 best solution, best possible 528.92464 (112.92 seconds)
Cbc0010I After 600 nodes, 198 on tree, 1e+50 best solution, best possible 537.9428 (120.71 seconds)
Cbc0010I After 700 nodes, 211 on tree, 1e+50 best solution, best possible 540.75701 (128.79 seconds)
Cbc0010I After 800 nodes, 230 on tree, 1e+50 best solution, best possible 540.75701 (137.39 seconds)
Cbc0010I After 900 nodes, 273 on tree, 1e+50 best solution, best possible 540.75701 (145.81 seconds)
Couenne: new cutoff value 5.5297893350e+02 (156.745 seconds)
Couenne: new cutoff value 5.5297743507e+02 (156.877 seconds)
Cbc0010I After 1000 nodes, 299 on tree, 1e+50 best solution, best possible 540.80569 (154.08 seconds)
Cbc0010I After 1100 nodes, 314 on tree, 1e+50 best solution, best possible 541.45071 (162.38 seconds)
Cbc0010I After 1200 nodes, 329 on tree, 1e+50 best solution, best possible 542.1205 (170.58 seconds)
Cbc0010I After 1300 nodes, 344 on tree, 1e+50 best solution, best possible 542.25516 (178.87 seconds)
Cbc0010I After 1400 nodes, 367 on tree, 1e+50 best solution, best possible 542.52124 (187.39 seconds)
Cbc0010I After 1500 nodes, 384 on tree, 1e+50 best solution, best possible 542.68396 (195.82 seconds)
Cbc0010I After 1600 nodes, 395 on tree, 1e+50 best solution, best possible 542.94239 (204.06 seconds)
Cbc0010I After 1700 nodes, 412 on tree, 1e+50 best solution, best possible 543.18623 (212.39 seconds)
Cbc0010I After 1800 nodes, 429 on tree, 1e+50 best solution, best possible 543.416 (220.96 seconds)
Cbc0010I After 1900 nodes, 441 on tree, 1e+50 best solution, best possible 543.45112 (228.90 seconds)
Cbc0010I After 2000 nodes, 461 on tree, 1e+50 best solution, best possible 543.5997 (237.36 seconds)
Cbc0010I After 2100 nodes, 480 on tree, 1e+50 best solution, best possible 544.62828 (245.96 seconds)
Cbc0010I After 2200 nodes, 519 on tree, 1e+50 best solution, best possible 544.62828 (255.83 seconds)
Couenne: new cutoff value 5.5270024680e+02 (272.751 seconds)
Cbc0010I After 2300 nodes, 563 on tree, 1e+50 best solution, best possible 544.64961 (264.33 seconds)
Cbc0010I After 2400 nodes, 568 on tree, 1e+50 best solution, best possible 545.33405 (272.21 seconds)
Cbc0010I After 2500 nodes, 574 on tree, 1e+50 best solution, best possible 545.61645 (280.01 seconds)
Cbc0010I After 2600 nodes, 581 on tree, 1e+50 best solution, best possible 546.15644 (287.80 seconds)
Cbc0010I After 2700 nodes, 581 on tree, 1e+50 best solution, best possible 546.77361 (295.02 seconds)
Cbc0010I After 2800 nodes, 574 on tree, 1e+50 best solution, best possible 548.07118 (302.37 seconds)
Cbc0010I After 2900 nodes, 577 on tree, 1e+50 best solution, best possible 549.24622 (310.01 seconds)
Cbc0010I After 3000 nodes, 610 on tree, 1e+50 best solution, best possible 549.24622 (319.16 seconds)
Cbc0010I After 3100 nodes, 657 on tree, 1e+50 best solution, best possible 549.24622 (327.97 seconds)
Couenne: new cutoff value 5.5228056845e+02 (340.033 seconds)
Couenne: new cutoff value 5.5227967224e+02 (340.104 seconds)
Cbc0010I After 3200 nodes, 687 on tree, 1e+50 best solution, best possible 549.46683 (336.42 seconds)
Cbc0010I After 3300 nodes, 703 on tree, 1e+50 best solution, best possible 549.63197 (344.78 seconds)
Cbc0010I After 3400 nodes, 727 on tree, 1e+50 best solution, best possible 549.63197 (353.80 seconds)
Cbc0010I After 3500 nodes, 772 on tree, 1e+50 best solution, best possible 549.63197 (361.60 seconds)
Couenne: new cutoff value 5.5216841164e+02 (371.382 seconds)
Cbc0010I After 3600 nodes, 791 on tree, 1e+50 best solution, best possible 549.69681 (369.76 seconds)
Cbc0010I After 3700 nodes, 807 on tree, 1e+50 best solution, best possible 549.71643 (378.28 seconds)
Cbc0010I After 3800 nodes, 832 on tree, 1e+50 best solution, best possible 549.71643 (386.19 seconds)
Couenne: new cutoff value 5.5212115186e+02 (398.128 seconds)
Cbc0010I After 3900 nodes, 857 on tree, 1e+50 best solution, best possible 549.74939 (394.30 seconds)
Cbc0010I After 4000 nodes, 879 on tree, 1e+50 best solution, best possible 549.74939 (403.15 seconds)
Couenne: new cutoff value 5.5208313277e+02 (417.557 seconds)
Cbc0010I After 4100 nodes, 908 on tree, 1e+50 best solution, best possible 549.79982 (411.35 seconds)
Cbc0010I After 4200 nodes, 921 on tree, 1e+50 best solution, best possible 549.90883 (419.36 seconds)
Cbc0010I After 4300 nodes, 936 on tree, 1e+50 best solution, best possible 550.02911 (427.46 seconds)
Cbc0010I After 4400 nodes, 953 on tree, 1e+50 best solution, best possible 550.09637 (435.79 seconds)
Cbc0010I After 4500 nodes, 963 on tree, 1e+50 best solution, best possible 550.16867 (443.93 seconds)
Cbc0010I After 4600 nodes, 999 on tree, 1e+50 best solution, best possible 550.16867 (453.85 seconds)
Cbc0010I After 4700 nodes, 1048 on tree, 1e+50 best solution, best possible 550.16867 (462.27 seconds)
Couenne: new cutoff value 5.5177972297e+02 (471.745 seconds)
Couenne: new cutoff value 5.5177967439e+02 (471.868 seconds)
Cbc0010I After 4800 nodes, 1059 on tree, 1e+50 best solution, best possible 550.22736 (469.94 seconds)
Cbc0010I After 4900 nodes, 1074 on tree, 1e+50 best solution, best possible 550.2426 (478.46 seconds)
Cbc0010I After 5000 nodes, 1085 on tree, 1e+50 best solution, best possible 550.31579 (486.75 seconds)
Cbc0010I After 5100 nodes, 1097 on tree, 1e+50 best solution, best possible 550.34 (495.59 seconds)
Cbc0010I After 5200 nodes, 1113 on tree, 1e+50 best solution, best possible 550.38259 (504.43 seconds)
Cbc0010I After 5300 nodes, 1126 on tree, 1e+50 best solution, best possible 550.42918 (513.30 seconds)
Cbc0010I After 5400 nodes, 1137 on tree, 1e+50 best solution, best possible 550.48787 (521.88 seconds)
Cbc0010I After 5500 nodes, 1146 on tree, 1e+50 best solution, best possible 550.54228 (530.18 seconds)
Cbc0010I After 5600 nodes, 1157 on tree, 1e+50 best solution, best possible 550.56115 (538.94 seconds)
Cbc0010I After 5700 nodes, 1167 on tree, 1e+50 best solution, best possible 550.57351 (547.08 seconds)
Cbc0010I After 5800 nodes, 1175 on tree, 1e+50 best solution, best possible 550.60435 (555.67 seconds)
Cbc0010I After 5900 nodes, 1182 on tree, 1e+50 best solution, best possible 550.64771 (564.83 seconds)
Cbc0010I After 6000 nodes, 1185 on tree, 1e+50 best solution, best possible 550.72392 (573.22 seconds)
Cbc0010I After 6100 nodes, 1185 on tree, 1e+50 best solution, best possible 550.76157 (581.65 seconds)
Cbc0010I After 6200 nodes, 1190 on tree, 1e+50 best solution, best possible 550.77748 (590.14 seconds)
Cbc0010I After 6300 nodes, 1191 on tree, 1e+50 best solution, best possible 550.80742 (598.81 seconds)
Cbc0010I After 6400 nodes, 1185 on tree, 1e+50 best solution, best possible 550.84442 (606.97 seconds)
Cbc0010I After 6500 nodes, 1189 on tree, 1e+50 best solution, best possible 550.86761 (615.61 seconds)
Cbc0010I After 6600 nodes, 1182 on tree, 1e+50 best solution, best possible 550.897 (623.70 seconds)
Cbc0010I After 6700 nodes, 1177 on tree, 1e+50 best solution, best possible 550.94063 (631.67 seconds)
Cbc0010I After 6800 nodes, 1173 on tree, 1e+50 best solution, best possible 550.97663 (639.62 seconds)
Cbc0010I After 6900 nodes, 1167 on tree, 1e+50 best solution, best possible 551.00185 (653.91 seconds)
Cbc0010I After 7000 nodes, 1161 on tree, 1e+50 best solution, best possible 551.02978 (662.00 seconds)
Cbc0010I After 7100 nodes, 1149 on tree, 1e+50 best solution, best possible 551.05774 (669.53 seconds)
Cbc0010I After 7200 nodes, 1137 on tree, 1e+50 best solution, best possible 551.07676 (677.42 seconds)
Cbc0010I After 7300 nodes, 1127 on tree, 1e+50 best solution, best possible 551.11325 (685.68 seconds)
Cbc0010I After 7400 nodes, 1111 on tree, 1e+50 best solution, best possible 551.14301 (694.06 seconds)
Cbc0010I After 7500 nodes, 1100 on tree, 1e+50 best solution, best possible 551.16765 (702.41 seconds)
Cbc0010I After 7600 nodes, 1081 on tree, 1e+50 best solution, best possible 551.19696 (709.90 seconds)
Cbc0010I After 7700 nodes, 1066 on tree, 1e+50 best solution, best possible 551.2118 (717.40 seconds)
Cbc0010I After 7800 nodes, 1042 on tree, 1e+50 best solution, best possible 551.24192 (724.70 seconds)
Cbc0010I After 7900 nodes, 1024 on tree, 1e+50 best solution, best possible 551.27498 (731.56 seconds)
Cbc0010I After 8000 nodes, 994 on tree, 1e+50 best solution, best possible 551.30822 (739.09 seconds)
Cbc0010I After 8100 nodes, 957 on tree, 1e+50 best solution, best possible 551.37052 (745.87 seconds)
Cbc0010I After 8200 nodes, 914 on tree, 1e+50 best solution, best possible 551.44187 (752.59 seconds)
Cbc0010I After 8300 nodes, 865 on tree, 1e+50 best solution, best possible 551.58214 (757.19 seconds)
Cbc0010I After 8400 nodes, 816 on tree, 1e+50 best solution, best possible 551.7129 (761.36 seconds)
Cbc0010I After 8500 nodes, 767 on tree, 1e+50 best solution, best possible 551.7853 (764.74 seconds)
Cbc0010I After 8600 nodes, 717 on tree, 1e+50 best solution, best possible 551.86466 (767.06 seconds)
Cbc0010I After 8700 nodes, 667 on tree, 1e+50 best solution, best possible 552.07345 (768.90 seconds)
Cbc0010I After 8800 nodes, 617 on tree, 1e+50 best solution, best possible 552.10173 (770.88 seconds)
Cbc0010I After 8900 nodes, 567 on tree, 1e+50 best solution, best possible 552.13695 (772.84 seconds)
Cbc0010I After 9000 nodes, 517 on tree, 1e+50 best solution, best possible 552.17616 (774.83 seconds)
Cbc0010I After 9100 nodes, 467 on tree, 1e+50 best solution, best possible 552.24657 (776.66 seconds)
Cbc0010I After 9200 nodes, 417 on tree, 1e+50 best solution, best possible 552.29249 (778.82 seconds)
Cbc0010I After 9300 nodes, 367 on tree, 1e+50 best solution, best possible 552.37566 (780.89 seconds)
Cbc0010I After 9400 nodes, 317 on tree, 1e+50 best solution, best possible 552.70136 (782.76 seconds)
Cbc0010I After 9500 nodes, 267 on tree, 1e+50 best solution, best possible 552.73234 (784.76 seconds)
Cbc0010I After 9600 nodes, 217 on tree, 1e+50 best solution, best possible 552.97752 (786.65 seconds)
Cbc0010I After 9700 nodes, 167 on tree, 1e+50 best solution, best possible 553.00089 (788.84 seconds)
Cbc0010I After 9800 nodes, 117 on tree, 1e+50 best solution, best possible 553.07675 (791.11 seconds)
Cbc0010I After 9900 nodes, 67 on tree, 1e+50 best solution, best possible 553.17035 (793.73 seconds)
Cbc0010I After 10000 nodes, 17 on tree, 1e+50 best solution, best possible 561.03967 (796.46 seconds)
Cbc0001I Search completed - best objective 1e+50, took 225962 iterations and 10034 nodes (797.04 seconds)
Cbc0035I Maximum depth 207, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.023432s)
Total solve time:                         797.094s (797.094s in branch-and-bound)
Lower bound:                               551.78
Upper bound:                               551.78  (gap: 0.00%)
Branch-and-bound nodes:                     10034
Stats: /tmp/jl_CAgIm4/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.023432 [sep]  797.094 [time]  797.101 [bb]         5.517797e+02 [lower]         5.517797e+02 [upper]   10034 [nodes]
Performance of                           FBBT:	    64.7931s,    11120 runs. fix:          0 shrnk:    4.51168 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    6.35506s,        3 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-4.txt
