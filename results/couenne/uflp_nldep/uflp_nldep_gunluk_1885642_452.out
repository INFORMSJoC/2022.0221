solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-50-100-5.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 2.0676248353e+03 (6.6979 seconds)
6.7 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 571.75631       61 4.368429
Couenne: new cutoff value 8.5189627324e+02 (12.9749 seconds)
NLP0014I             2         OPT 687.37785       29 3.491235
Couenne: new cutoff value 6.8737845513e+02 (16.4715 seconds)
Loaded instance "/tmp/jl_l7GZbf/model.nl"
Constraints:         5200
Variables:           5150 (50 integer)
Auxiliaries:          249 (0 integer)

Coin0506I Presolve 5600 (-1) rows, 5250 (-149) columns and 26149 (-150) elements
Clp0006I 0  Obj 0 Primal inf 19067.955 (100) Dual inf 5.6565172e+13 (5001)
Clp0029I End of values pass after 50 iterations
Clp0006I 50  Obj 0 Primal inf 19067.955 (100) Dual inf 5.6565172e+13 (5050)
Clp0006I 237  Obj 245.52632 Primal inf 15919.93 (88) Dual inf 2.9351749e+13 (3931)
Clp0006I 440  Obj 691.25372 Primal inf 3335.1612 (37) Dual inf 1.9129353e+09 (646)
Clp0006I 621  Obj 687.38846 Primal inf 321.8039 (8) Dual inf 3.1235286e+09 (509)
Clp0006I 760  Obj 604.75506 Dual inf 5.6342563 (189)
Clp0006I 902  Obj 530.51865 Dual inf 0.59940777 (87)
Clp0006I 997  Obj 508.83345
Clp0000I Optimal - objective value 508.83345
Clp0000I Optimal - objective value 508.83345
Clp0032I Optimal objective 508.8334462 - 997 iterations time 0.252, Presolve 0.02
Clp0000I Optimal - objective value 508.83345
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 508.83345
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 20 added rows had average density of 2
Cbc0013I At root node, 20 cuts changed objective from 508.83345 to 508.86967 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 170 row cuts average 2.0 elements, 648 column cuts (648 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (23.48 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 21 on tree, 1e+50 best solution, best possible 517.9736 (122.67 seconds)
Cbc0010I After 200 nodes, 66 on tree, 1e+50 best solution, best possible 517.9736 (135.41 seconds)
Cbc0010I After 300 nodes, 116 on tree, 1e+50 best solution, best possible 517.9736 (147.09 seconds)
Cbc0010I After 400 nodes, 166 on tree, 1e+50 best solution, best possible 517.9736 (158.11 seconds)
Cbc0010I After 500 nodes, 216 on tree, 1e+50 best solution, best possible 517.9736 (166.47 seconds)
Couenne: new cutoff value 5.8701053414e+02 (183.701 seconds)
Cbc0010I After 600 nodes, 223 on tree, 1e+50 best solution, best possible 528.96587 (177.75 seconds)
Cbc0010I After 700 nodes, 262 on tree, 1e+50 best solution, best possible 528.96587 (189.33 seconds)
Cbc0010I After 800 nodes, 312 on tree, 1e+50 best solution, best possible 528.96587 (201.54 seconds)
Cbc0010I After 900 nodes, 362 on tree, 1e+50 best solution, best possible 528.96587 (212.35 seconds)
Couenne: new cutoff value 5.7233598230e+02 (233.808 seconds)
Cbc0010I After 1000 nodes, 385 on tree, 1e+50 best solution, best possible 545.30434 (221.04 seconds)
Cbc0010I After 1100 nodes, 403 on tree, 1e+50 best solution, best possible 545.30434 (231.79 seconds)
Cbc0010I After 1200 nodes, 424 on tree, 1e+50 best solution, best possible 545.30434 (243.53 seconds)
Cbc0010I After 1300 nodes, 465 on tree, 1e+50 best solution, best possible 545.30434 (255.86 seconds)
Couenne: new cutoff value 5.7199064440e+02 (282.637 seconds)
Cbc0010I After 1400 nodes, 512 on tree, 1e+50 best solution, best possible 545.30434 (400.14 seconds)
Cbc0010I After 1500 nodes, 524 on tree, 1e+50 best solution, best possible 545.30434 (808.38 seconds)
Cbc0010I After 1600 nodes, 528 on tree, 1e+50 best solution, best possible 546.9661 (1013.43 seconds)
Cbc0010I After 1700 nodes, 527 on tree, 1e+50 best solution, best possible 548.12997 (1022.37 seconds)
Cbc0010I After 1800 nodes, 524 on tree, 1e+50 best solution, best possible 548.76296 (1030.87 seconds)
Cbc0010I After 1900 nodes, 522 on tree, 1e+50 best solution, best possible 550.84946 (1039.87 seconds)
Cbc0010I After 2000 nodes, 517 on tree, 1e+50 best solution, best possible 558.67916 (1053.37 seconds)
Cbc0010I After 2100 nodes, 523 on tree, 1e+50 best solution, best possible 561.57936 (1062.60 seconds)
Cbc0010I After 2200 nodes, 533 on tree, 1e+50 best solution, best possible 563.01379 (1072.44 seconds)
Cbc0010I After 2300 nodes, 535 on tree, 1e+50 best solution, best possible 565.54697 (1081.92 seconds)
Cbc0010I After 2400 nodes, 532 on tree, 1e+50 best solution, best possible 567.11191 (1091.09 seconds)
Cbc0010I After 2500 nodes, 551 on tree, 1e+50 best solution, best possible 567.11191 (1102.07 seconds)
Cbc0010I After 2600 nodes, 584 on tree, 1e+50 best solution, best possible 567.11191 (1114.28 seconds)
Cbc0010I After 2700 nodes, 634 on tree, 1e+50 best solution, best possible 567.11191 (1124.97 seconds)
Couenne: new cutoff value 5.7175725034e+02 (1144.79 seconds)
Cbc0010I After 2800 nodes, 649 on tree, 1e+50 best solution, best possible 567.59056 (1134.50 seconds)
Cbc0010I After 2900 nodes, 640 on tree, 1e+50 best solution, best possible 568.98708 (1143.22 seconds)
Cbc0010I After 3000 nodes, 649 on tree, 1e+50 best solution, best possible 569.64229 (1153.74 seconds)
Cbc0010I After 3100 nodes, 661 on tree, 1e+50 best solution, best possible 569.88373 (1164.36 seconds)
Cbc0010I After 3200 nodes, 669 on tree, 1e+50 best solution, best possible 570.01556 (1174.67 seconds)
Cbc0010I After 3300 nodes, 673 on tree, 1e+50 best solution, best possible 570.28368 (1184.82 seconds)
Cbc0010I After 3400 nodes, 680 on tree, 1e+50 best solution, best possible 570.45476 (1195.12 seconds)
Cbc0010I After 3500 nodes, 681 on tree, 1e+50 best solution, best possible 570.52863 (1205.08 seconds)
Cbc0010I After 3600 nodes, 688 on tree, 1e+50 best solution, best possible 570.64156 (1215.14 seconds)
Cbc0010I After 3700 nodes, 687 on tree, 1e+50 best solution, best possible 570.7004 (1224.75 seconds)
Cbc0010I After 3800 nodes, 691 on tree, 1e+50 best solution, best possible 570.79031 (1234.90 seconds)
Cbc0010I After 3900 nodes, 686 on tree, 1e+50 best solution, best possible 570.87893 (1244.23 seconds)
Cbc0010I After 4000 nodes, 685 on tree, 1e+50 best solution, best possible 570.94353 (1253.82 seconds)
Cbc0010I After 4100 nodes, 680 on tree, 1e+50 best solution, best possible 571.04321 (1263.21 seconds)
Cbc0010I After 4200 nodes, 672 on tree, 1e+50 best solution, best possible 571.12671 (1272.01 seconds)
Cbc0010I After 4300 nodes, 653 on tree, 1e+50 best solution, best possible 571.27779 (1280.27 seconds)
Cbc0010I After 4400 nodes, 623 on tree, 1e+50 best solution, best possible 571.40985 (1287.93 seconds)
Cbc0010I After 4500 nodes, 584 on tree, 1e+50 best solution, best possible 571.69781 (1294.45 seconds)
Cbc0010I After 4600 nodes, 553 on tree, 1e+50 best solution, best possible 571.7613 (1300.85 seconds)
Cbc0010I After 4700 nodes, 503 on tree, 1e+50 best solution, best possible 571.79913 (1304.56 seconds)
Cbc0010I After 4800 nodes, 453 on tree, 1e+50 best solution, best possible 571.99326 (1307.30 seconds)
Cbc0010I After 4900 nodes, 403 on tree, 1e+50 best solution, best possible 572.03075 (1310.41 seconds)
Cbc0010I After 5000 nodes, 353 on tree, 1e+50 best solution, best possible 572.33602 (1313.07 seconds)
Cbc0010I After 5100 nodes, 303 on tree, 1e+50 best solution, best possible 572.37577 (1316.64 seconds)
Cbc0010I After 5200 nodes, 253 on tree, 1e+50 best solution, best possible 572.86779 (1319.99 seconds)
Cbc0010I After 5300 nodes, 203 on tree, 1e+50 best solution, best possible 583.51464 (1322.43 seconds)
Cbc0010I After 5400 nodes, 153 on tree, 1e+50 best solution, best possible 587.01497 (1324.75 seconds)
Cbc0010I After 5500 nodes, 103 on tree, 1e+50 best solution, best possible 587.08409 (1327.91 seconds)
Cbc0010I After 5600 nodes, 53 on tree, 1e+50 best solution, best possible 587.94699 (1331.06 seconds)
Cbc0010I After 5700 nodes, 3 on tree, 1e+50 best solution, best possible 664.03775 (1333.44 seconds)
Cbc0001I Search completed - best objective 1e+50, took 1536382 iterations and 5706 nodes (1333.63 seconds)
Cbc0035I Maximum depth 253, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       5601
Linearization cuts added in total:           5601  (separation time: 0.036161s)
Total solve time:                         1333.88s (1333.88s in branch-and-bound)
Lower bound:                              571.757
Upper bound:                              571.757  (gap: 0.00%)
Branch-and-bound nodes:                      5706
Stats: /tmp/jl_l7GZbf/model.nl 5150 [var]   50 [int] 5200 [con]  249 [aux]   5601 [root]     5601 [tot] 0.036161 [sep]  1333.88 [time]  1333.89 [bb]         5.717573e+02 [lower]         5.717573e+02 [upper]    5706 [nodes]
Performance of                           FBBT:	    44.4122s,     5863 runs. fix: 0.000146896 shrnk:    8.76732 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    16.5701s,        5 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-50-100-5.txt
