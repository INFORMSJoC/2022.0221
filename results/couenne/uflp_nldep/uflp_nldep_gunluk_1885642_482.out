solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-50-100-8.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 2.0926211967e+03 (6.65723 seconds)
6.6 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 581.99861       71 5.156012
NLP0014I             2         OPT 681.72892       34 4.026576
Loaded instance "/tmp/jl_jUbtal/model.nl"
Constraints:         5200
Variables:           5150 (50 integer)
Auxiliaries:          249 (0 integer)

Coin0506I Presolve 5600 (-1) rows, 5250 (-149) columns and 26149 (-150) elements
Clp0006I 0  Obj 0 Primal inf 19232.95 (100) Dual inf 6.2020674e+13 (5001)
Clp0029I End of values pass after 50 iterations
Clp0006I 50  Obj 0 Primal inf 19232.95 (100) Dual inf 6.2020674e+13 (5050)
Clp0006I 237  Obj 106.13831 Primal inf 18902.177 (101) Dual inf 3.4861734e+13 (4485)
Clp0006I 429  Obj 647.81123 Primal inf 6212.5883 (56) Dual inf 2.2930992e+09 (2672)
Clp0006I 620  Obj 900.14925 Primal inf 309.2206 (21) Dual inf 7.0268199e+08 (1952)
Clp0006I 764  Obj 834.74308 Dual inf 36.048575 (539)
Clp0006I 951  Obj 671.63014 Dual inf 12.80553 (319)
Clp0006I 1138  Obj 520.06807 Dual inf 4.2941885 (166)
Clp0006I 1264  Obj 488.43583
Clp0000I Optimal - objective value 488.43583
Clp0000I Optimal - objective value 488.43583
Clp0032I Optimal objective 488.4358314 - 1264 iterations time 0.272, Presolve 0.02
Clp0000I Optimal - objective value 488.43583
NLP Heuristic: NLP0014I             3         OPT 581.99861       85 6.759703
no solution.
Clp0000I Optimal - objective value 488.43583
Optimality Based BT: 0 improved bounds
Probing: Couenne: new cutoff value 5.8639045500e+02 (27.9489 seconds)
0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 19 added rows had average density of 2
Cbc0013I At root node, 19 cuts changed objective from 488.43583 to 488.46814 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 157 row cuts average 2.0 elements, 651 column cuts (651 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (28.52 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 5 on tree, 1e+50 best solution, best possible 548.44006 (123.80 seconds)
Cbc0010I After 200 nodes, 30 on tree, 1e+50 best solution, best possible 548.44006 (135.61 seconds)
Cbc0010I After 300 nodes, 68 on tree, 1e+50 best solution, best possible 548.44006 (148.54 seconds)
Cbc0010I After 400 nodes, 117 on tree, 1e+50 best solution, best possible 548.44006 (161.73 seconds)
Cbc0010I After 500 nodes, 167 on tree, 1e+50 best solution, best possible 548.44006 (173.06 seconds)
Couenne: new cutoff value 5.8451834746e+02 (191.726 seconds)
Cbc0010I After 600 nodes, 178 on tree, 1e+50 best solution, best possible 548.53048 (262.76 seconds)
Cbc0010I After 700 nodes, 221 on tree, 1e+50 best solution, best possible 548.53048 (274.94 seconds)
Cbc0010I After 800 nodes, 270 on tree, 1e+50 best solution, best possible 548.53048 (287.72 seconds)
Cbc0010I After 900 nodes, 320 on tree, 1e+50 best solution, best possible 548.53048 (298.72 seconds)
Couenne: new cutoff value 5.8155168272e+02 (320.393 seconds)
Cbc0010I After 1000 nodes, 343 on tree, 1e+50 best solution, best possible 548.82026 (308.57 seconds)
Cbc0010I After 1100 nodes, 355 on tree, 1e+50 best solution, best possible 560.41837 (318.38 seconds)
Cbc0010I After 1200 nodes, 365 on tree, 1e+50 best solution, best possible 561.4041 (328.26 seconds)
Cbc0010I After 1300 nodes, 374 on tree, 1e+50 best solution, best possible 562.16017 (337.71 seconds)
Cbc0010I After 1400 nodes, 386 on tree, 1e+50 best solution, best possible 564.30413 (347.55 seconds)
Cbc0010I After 1500 nodes, 394 on tree, 1e+50 best solution, best possible 569.84807 (357.24 seconds)
Cbc0010I After 1600 nodes, 405 on tree, 1e+50 best solution, best possible 570.17086 (366.92 seconds)
Cbc0010I After 1700 nodes, 415 on tree, 1e+50 best solution, best possible 571.152 (376.62 seconds)
Cbc0010I After 1800 nodes, 421 on tree, 1e+50 best solution, best possible 572.47064 (385.81 seconds)
Cbc0010I After 1900 nodes, 427 on tree, 1e+50 best solution, best possible 572.52485 (395.25 seconds)
Cbc0010I After 2000 nodes, 429 on tree, 1e+50 best solution, best possible 572.68892 (404.41 seconds)
Cbc0010I After 2100 nodes, 432 on tree, 1e+50 best solution, best possible 572.75646 (413.67 seconds)
Cbc0010I After 2200 nodes, 440 on tree, 1e+50 best solution, best possible 574.17237 (423.92 seconds)
Cbc0010I After 2300 nodes, 442 on tree, 1e+50 best solution, best possible 574.47628 (433.12 seconds)
Cbc0010I After 2400 nodes, 451 on tree, 1e+50 best solution, best possible 574.70725 (442.78 seconds)
Cbc0010I After 2500 nodes, 461 on tree, 1e+50 best solution, best possible 574.98382 (452.33 seconds)
Cbc0010I After 2600 nodes, 461 on tree, 1e+50 best solution, best possible 575.06665 (461.42 seconds)
Cbc0010I After 2700 nodes, 463 on tree, 1e+50 best solution, best possible 575.36127 (470.58 seconds)
Cbc0010I After 2800 nodes, 463 on tree, 1e+50 best solution, best possible 575.87153 (480.08 seconds)
Cbc0010I After 2900 nodes, 466 on tree, 1e+50 best solution, best possible 576.27452 (489.37 seconds)
Cbc0010I After 3000 nodes, 459 on tree, 1e+50 best solution, best possible 576.94005 (498.41 seconds)
Cbc0010I After 3100 nodes, 453 on tree, 1e+50 best solution, best possible 577.81669 (507.43 seconds)
Cbc0010I After 3200 nodes, 458 on tree, 1e+50 best solution, best possible 578.39157 (519.29 seconds)
Cbc0010I After 3300 nodes, 467 on tree, 1e+50 best solution, best possible 578.54178 (529.91 seconds)
Cbc0010I After 3400 nodes, 470 on tree, 1e+50 best solution, best possible 578.72703 (539.80 seconds)
Cbc0010I After 3500 nodes, 486 on tree, 1e+50 best solution, best possible 578.86918 (550.31 seconds)
Cbc0010I After 3600 nodes, 486 on tree, 1e+50 best solution, best possible 579.31179 (560.10 seconds)
Cbc0010I After 3700 nodes, 497 on tree, 1e+50 best solution, best possible 579.35247 (570.51 seconds)
Cbc0010I After 3800 nodes, 511 on tree, 1e+50 best solution, best possible 579.40075 (581.49 seconds)
Cbc0010I After 3900 nodes, 522 on tree, 1e+50 best solution, best possible 579.41845 (592.05 seconds)
Cbc0010I After 4000 nodes, 528 on tree, 1e+50 best solution, best possible 579.41845 (602.80 seconds)
Cbc0010I After 4100 nodes, 548 on tree, 1e+50 best solution, best possible 579.41845 (612.75 seconds)
Couenne: new cutoff value 5.8153964443e+02 (631.832 seconds)
Cbc0010I After 4200 nodes, 562 on tree, 1e+50 best solution, best possible 579.47717 (622.78 seconds)
Cbc0010I After 4300 nodes, 576 on tree, 1e+50 best solution, best possible 579.52783 (632.79 seconds)
Cbc0010I After 4400 nodes, 593 on tree, 1e+50 best solution, best possible 579.58656 (643.23 seconds)
Cbc0010I After 4500 nodes, 606 on tree, 1e+50 best solution, best possible 579.63077 (653.80 seconds)
Cbc0010I After 4600 nodes, 612 on tree, 1e+50 best solution, best possible 579.65973 (664.06 seconds)
Cbc0010I After 4700 nodes, 624 on tree, 1e+50 best solution, best possible 579.69806 (674.69 seconds)
Cbc0010I After 4800 nodes, 635 on tree, 1e+50 best solution, best possible 579.74753 (685.22 seconds)
Cbc0010I After 4900 nodes, 646 on tree, 1e+50 best solution, best possible 579.77545 (695.04 seconds)
Cbc0010I After 5000 nodes, 652 on tree, 1e+50 best solution, best possible 579.83989 (704.68 seconds)
Cbc0010I After 5100 nodes, 656 on tree, 1e+50 best solution, best possible 579.87503 (714.57 seconds)
Cbc0010I After 5200 nodes, 657 on tree, 1e+50 best solution, best possible 579.9467 (724.17 seconds)
Cbc0010I After 5300 nodes, 661 on tree, 1e+50 best solution, best possible 579.98976 (734.42 seconds)
Cbc0010I After 5400 nodes, 666 on tree, 1e+50 best solution, best possible 580.01877 (744.27 seconds)
Cbc0010I After 5500 nodes, 673 on tree, 1e+50 best solution, best possible 580.03725 (754.43 seconds)
Cbc0010I After 5600 nodes, 682 on tree, 1e+50 best solution, best possible 580.05712 (765.05 seconds)
Cbc0010I After 5700 nodes, 690 on tree, 1e+50 best solution, best possible 580.08793 (774.99 seconds)
Cbc0010I After 5800 nodes, 692 on tree, 1e+50 best solution, best possible 580.1118 (784.41 seconds)
Cbc0010I After 5900 nodes, 697 on tree, 1e+50 best solution, best possible 580.1329 (794.26 seconds)
Cbc0010I After 6000 nodes, 701 on tree, 1e+50 best solution, best possible 580.17274 (804.21 seconds)
Cbc0010I After 6100 nodes, 705 on tree, 1e+50 best solution, best possible 580.21829 (813.89 seconds)
Cbc0010I After 6200 nodes, 708 on tree, 1e+50 best solution, best possible 580.24915 (823.58 seconds)
Cbc0010I After 6300 nodes, 713 on tree, 1e+50 best solution, best possible 580.28526 (833.71 seconds)
Cbc0010I After 6400 nodes, 714 on tree, 1e+50 best solution, best possible 580.31538 (843.21 seconds)
Cbc0010I After 6500 nodes, 709 on tree, 1e+50 best solution, best possible 580.33832 (852.15 seconds)
Cbc0010I After 6600 nodes, 706 on tree, 1e+50 best solution, best possible 580.36993 (861.61 seconds)
Cbc0010I After 6700 nodes, 704 on tree, 1e+50 best solution, best possible 580.4035 (870.89 seconds)
Cbc0010I After 6800 nodes, 705 on tree, 1e+50 best solution, best possible 580.421 (879.89 seconds)
Cbc0010I After 6900 nodes, 698 on tree, 1e+50 best solution, best possible 580.44313 (889.37 seconds)
Cbc0010I After 7000 nodes, 701 on tree, 1e+50 best solution, best possible 580.46516 (898.89 seconds)
Cbc0010I After 7100 nodes, 697 on tree, 1e+50 best solution, best possible 580.48794 (908.66 seconds)
Cbc0010I After 7200 nodes, 697 on tree, 1e+50 best solution, best possible 580.50898 (918.09 seconds)
Cbc0010I After 7300 nodes, 696 on tree, 1e+50 best solution, best possible 580.53857 (927.56 seconds)
Cbc0010I After 7400 nodes, 689 on tree, 1e+50 best solution, best possible 580.56064 (936.64 seconds)
Cbc0010I After 7500 nodes, 683 on tree, 1e+50 best solution, best possible 580.60025 (946.01 seconds)
Cbc0010I After 7600 nodes, 682 on tree, 1e+50 best solution, best possible 580.64642 (955.75 seconds)
Cbc0010I After 7700 nodes, 683 on tree, 1e+50 best solution, best possible 580.67251 (965.28 seconds)
Cbc0010I After 7800 nodes, 684 on tree, 1e+50 best solution, best possible 580.68267 (975.00 seconds)
Cbc0010I After 7900 nodes, 677 on tree, 1e+50 best solution, best possible 580.70137 (983.85 seconds)
Cbc0010I After 8000 nodes, 673 on tree, 1e+50 best solution, best possible 580.71339 (993.16 seconds)
Cbc0010I After 8100 nodes, 663 on tree, 1e+50 best solution, best possible 580.73647 (1002.05 seconds)
Cbc0010I After 8200 nodes, 659 on tree, 1e+50 best solution, best possible 580.75701 (1011.80 seconds)
Cbc0010I After 8300 nodes, 650 on tree, 1e+50 best solution, best possible 580.78606 (1021.34 seconds)
Cbc0010I After 8400 nodes, 640 on tree, 1e+50 best solution, best possible 580.82814 (1030.79 seconds)
Cbc0010I After 8500 nodes, 628 on tree, 1e+50 best solution, best possible 580.84653 (1040.57 seconds)
Cbc0010I After 8600 nodes, 615 on tree, 1e+50 best solution, best possible 580.87482 (1049.94 seconds)
Cbc0010I After 8700 nodes, 593 on tree, 1e+50 best solution, best possible 580.90258 (1058.99 seconds)
Cbc0010I After 8800 nodes, 576 on tree, 1e+50 best solution, best possible 580.92887 (1068.12 seconds)
Cbc0010I After 8900 nodes, 558 on tree, 1e+50 best solution, best possible 580.96484 (1077.74 seconds)
Cbc0010I After 9000 nodes, 529 on tree, 1e+50 best solution, best possible 581.02906 (1086.94 seconds)
Cbc0010I After 9100 nodes, 508 on tree, 1e+50 best solution, best possible 581.08309 (1096.03 seconds)
Cbc0010I After 9200 nodes, 488 on tree, 1e+50 best solution, best possible 581.13621 (1104.79 seconds)
Cbc0010I After 9300 nodes, 456 on tree, 1e+50 best solution, best possible 581.21198 (1112.79 seconds)
Cbc0010I After 9400 nodes, 412 on tree, 1e+50 best solution, best possible 581.35333 (1119.42 seconds)
Cbc0010I After 9500 nodes, 363 on tree, 1e+50 best solution, best possible 581.45922 (1125.13 seconds)
Cbc0010I After 9600 nodes, 330 on tree, 1e+50 best solution, best possible 581.53965 (1132.10 seconds)
Cbc0010I After 9700 nodes, 281 on tree, 1e+50 best solution, best possible 581.55352 (1136.20 seconds)
Cbc0010I After 9800 nodes, 231 on tree, 1e+50 best solution, best possible 581.60174 (1140.50 seconds)
Cbc0010I After 9900 nodes, 181 on tree, 1e+50 best solution, best possible 582.33544 (1144.31 seconds)
Cbc0010I After 10000 nodes, 131 on tree, 1e+50 best solution, best possible 584.51617 (1146.96 seconds)
Cbc0010I After 10100 nodes, 81 on tree, 1e+50 best solution, best possible 584.54792 (1150.94 seconds)
Cbc0010I After 10200 nodes, 31 on tree, 1e+50 best solution, best possible 584.75141 (1154.60 seconds)
Cbc0001I Search completed - best objective 1e+50, took 427250 iterations and 10262 nodes (1156.47 seconds)
Cbc0035I Maximum depth 255, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       5601
Linearization cuts added in total:           5601  (separation time: 0.03142s)
Total solve time:                         1156.74s (1156.74s in branch-and-bound)
Lower bound:                               581.54
Upper bound:                               581.54  (gap: 0.00%)
Branch-and-bound nodes:                     10262
Stats: /tmp/jl_jUbtal/model.nl 5150 [var]   50 [int] 5200 [con]  249 [aux]   5601 [root]     5601 [tot] 0.03142 [sep]  1156.74 [time]  1156.75 [bb]         5.815396e+02 [lower]         5.815396e+02 [upper]   10262 [nodes]
Performance of                           FBBT:	    91.0632s,    11958 runs. fix:          0 shrnk:    5.73056 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    14.5537s,        4 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-50-100-8.txt
