solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-7.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 2.1046490896e+03 (2.83807 seconds)
2.8 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 578.51815       53 2.824091
NLP0014I             2         OPT 660.23967       29 1.850721
Loaded instance "/tmp/jl_gY3zHm/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3681 (0) rows, 3401 (-118) columns and 16921 (-118) elements
Clp0006I 0  Obj -6142.5 Primal inf 9307192.3 (120)
Clp0006I 148  Obj -6142.5 Primal inf 28028422 (118)
Clp0006I 266  Obj -22.887203 Primal inf 970878.81 (147)
Clp0006I 414  Obj 151.89935 Primal inf 635.63347 (71)
Clp0006I 562  Obj 403.79704 Primal inf 59374.206 (294)
Clp0006I 678  Obj 472.24362
Clp0000I Optimal - objective value 472.2588
Clp0000I Optimal - objective value 472.2588
Clp0032I Optimal objective 472.2588022 - 678 iterations time 0.082, Presolve 0.01
Clp0000I Optimal - objective value 472.2588
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 472.2588
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 14 added rows had average density of 2
Cbc0013I At root node, 14 cuts changed objective from 472.2588 to 472.36123 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 112 row cuts average 2.0 elements, 524 column cuts (524 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (11.20 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 50 on tree, 1e+50 best solution, best possible 479.3215 (109.66 seconds)
Cbc0010I After 200 nodes, 100 on tree, 1e+50 best solution, best possible 479.3215 (115.71 seconds)
Cbc0010I After 300 nodes, 150 on tree, 1e+50 best solution, best possible 479.3215 (121.28 seconds)
Couenne: new cutoff value 5.8342097103e+02 (133.031 seconds)
Couenne: new cutoff value 5.8341910948e+02 (133.08 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 400 nodes, 191 on tree, 1e+50 best solution, best possible 496.68085 (136.29 seconds)
Cbc0010I After 500 nodes, 213 on tree, 1e+50 best solution, best possible 496.68085 (151.63 seconds)
Cbc0010I After 600 nodes, 262 on tree, 1e+50 best solution, best possible 496.68085 (159.30 seconds)
Cbc0010I After 700 nodes, 312 on tree, 1e+50 best solution, best possible 496.68085 (166.33 seconds)
Couenne: new cutoff value 5.7854225343e+02 (177.247 seconds)
Couenne: new cutoff value 5.7853871287e+02 (177.3 seconds)
Cbc0010I After 800 nodes, 337 on tree, 1e+50 best solution, best possible 527.96129 (186.82 seconds)
Cbc0010I After 900 nodes, 341 on tree, 1e+50 best solution, best possible 536.79421 (201.80 seconds)
Cbc0010I After 1000 nodes, 343 on tree, 1e+50 best solution, best possible 540.64448 (214.42 seconds)
Cbc0010I After 1100 nodes, 344 on tree, 1e+50 best solution, best possible 543.08292 (220.35 seconds)
Cbc0010I After 1200 nodes, 343 on tree, 1e+50 best solution, best possible 559.17092 (226.16 seconds)
Cbc0010I After 1300 nodes, 351 on tree, 1e+50 best solution, best possible 564.83632 (232.11 seconds)
Cbc0010I After 1400 nodes, 362 on tree, 1e+50 best solution, best possible 566.46009 (238.23 seconds)
Cbc0010I After 1500 nodes, 374 on tree, 1e+50 best solution, best possible 568.06987 (244.12 seconds)
Cbc0010I After 1600 nodes, 385 on tree, 1e+50 best solution, best possible 568.87776 (249.93 seconds)
Cbc0010I After 1700 nodes, 391 on tree, 1e+50 best solution, best possible 570.93812 (255.64 seconds)
Cbc0010I After 1800 nodes, 386 on tree, 1e+50 best solution, best possible 572.80808 (261.19 seconds)
Cbc0010I After 1900 nodes, 387 on tree, 1e+50 best solution, best possible 574.41873 (267.11 seconds)
Cbc0010I After 2000 nodes, 408 on tree, 1e+50 best solution, best possible 574.54148 (273.79 seconds)
Cbc0010I After 2100 nodes, 424 on tree, 1e+50 best solution, best possible 574.89798 (280.09 seconds)
Cbc0010I After 2200 nodes, 442 on tree, 1e+50 best solution, best possible 574.94319 (286.75 seconds)
Cbc0010I After 2300 nodes, 459 on tree, 1e+50 best solution, best possible 575.05917 (293.33 seconds)
Cbc0010I After 2400 nodes, 472 on tree, 1e+50 best solution, best possible 575.44945 (299.92 seconds)
Cbc0010I After 2500 nodes, 481 on tree, 1e+50 best solution, best possible 575.63619 (306.51 seconds)
Cbc0010I After 2600 nodes, 489 on tree, 1e+50 best solution, best possible 575.75752 (312.66 seconds)
Cbc0010I After 2700 nodes, 497 on tree, 1e+50 best solution, best possible 575.84824 (318.76 seconds)
Cbc0010I After 2800 nodes, 508 on tree, 1e+50 best solution, best possible 575.90199 (325.03 seconds)
Cbc0010I After 2900 nodes, 514 on tree, 1e+50 best solution, best possible 576.18287 (331.21 seconds)
Cbc0010I After 3000 nodes, 525 on tree, 1e+50 best solution, best possible 576.35084 (340.44 seconds)
Cbc0010I After 3100 nodes, 534 on tree, 1e+50 best solution, best possible 576.46267 (346.35 seconds)
Cbc0010I After 3200 nodes, 550 on tree, 1e+50 best solution, best possible 576.46267 (352.92 seconds)
Cbc0010I After 3300 nodes, 586 on tree, 1e+50 best solution, best possible 576.46267 (359.68 seconds)
Couenne: new cutoff value 5.7851873083e+02 (369.088 seconds)
Cbc0010I After 3400 nodes, 602 on tree, 1e+50 best solution, best possible 576.49104 (365.58 seconds)
Cbc0010I After 3500 nodes, 610 on tree, 1e+50 best solution, best possible 576.54549 (371.39 seconds)
Cbc0010I After 3600 nodes, 615 on tree, 1e+50 best solution, best possible 576.58609 (377.21 seconds)
Cbc0010I After 3700 nodes, 623 on tree, 1e+50 best solution, best possible 576.61108 (382.84 seconds)
Cbc0010I After 3800 nodes, 624 on tree, 1e+50 best solution, best possible 576.68129 (388.29 seconds)
Cbc0010I After 3900 nodes, 625 on tree, 1e+50 best solution, best possible 576.7357 (393.79 seconds)
Cbc0010I After 4000 nodes, 629 on tree, 1e+50 best solution, best possible 576.87619 (399.51 seconds)
Cbc0010I After 4100 nodes, 632 on tree, 1e+50 best solution, best possible 576.9537 (405.10 seconds)
Cbc0010I After 4200 nodes, 632 on tree, 1e+50 best solution, best possible 577.02362 (411.00 seconds)
Cbc0010I After 4300 nodes, 628 on tree, 1e+50 best solution, best possible 577.09997 (416.44 seconds)
Cbc0010I After 4400 nodes, 624 on tree, 1e+50 best solution, best possible 577.21645 (421.87 seconds)
Cbc0010I After 4500 nodes, 624 on tree, 1e+50 best solution, best possible 577.26497 (427.41 seconds)
Cbc0010I After 4600 nodes, 622 on tree, 1e+50 best solution, best possible 577.31963 (432.79 seconds)
Cbc0010I After 4700 nodes, 621 on tree, 1e+50 best solution, best possible 577.3474 (438.36 seconds)
Cbc0010I After 4800 nodes, 615 on tree, 1e+50 best solution, best possible 577.42261 (443.77 seconds)
Cbc0010I After 4900 nodes, 620 on tree, 1e+50 best solution, best possible 577.43293 (449.79 seconds)
Cbc0010I After 5000 nodes, 615 on tree, 1e+50 best solution, best possible 577.48005 (455.08 seconds)
Cbc0010I After 5100 nodes, 612 on tree, 1e+50 best solution, best possible 577.52898 (460.64 seconds)
Cbc0010I After 5200 nodes, 607 on tree, 1e+50 best solution, best possible 577.57896 (466.07 seconds)
Cbc0010I After 5300 nodes, 600 on tree, 1e+50 best solution, best possible 577.63786 (471.31 seconds)
Cbc0010I After 5400 nodes, 594 on tree, 1e+50 best solution, best possible 577.69355 (476.52 seconds)
Cbc0010I After 5500 nodes, 582 on tree, 1e+50 best solution, best possible 577.7644 (481.69 seconds)
Cbc0010I After 5600 nodes, 573 on tree, 1e+50 best solution, best possible 577.83516 (487.06 seconds)
Cbc0010I After 5700 nodes, 560 on tree, 1e+50 best solution, best possible 577.88576 (492.55 seconds)
Cbc0010I After 5800 nodes, 536 on tree, 1e+50 best solution, best possible 577.96193 (497.64 seconds)
Cbc0010I After 5900 nodes, 512 on tree, 1e+50 best solution, best possible 578.08777 (502.51 seconds)
Cbc0010I After 6000 nodes, 498 on tree, 1e+50 best solution, best possible 578.18035 (507.61 seconds)
Cbc0010I After 6100 nodes, 495 on tree, 1e+50 best solution, best possible 578.20203 (513.02 seconds)
Cbc0010I After 6200 nodes, 484 on tree, 1e+50 best solution, best possible 578.2487 (518.23 seconds)
Cbc0010I After 6300 nodes, 467 on tree, 1e+50 best solution, best possible 578.30632 (523.12 seconds)
Cbc0010I After 6400 nodes, 455 on tree, 1e+50 best solution, best possible 578.33847 (528.25 seconds)
Cbc0010I After 6500 nodes, 451 on tree, 1e+50 best solution, best possible 578.35325 (533.64 seconds)
Cbc0010I After 6600 nodes, 426 on tree, 1e+50 best solution, best possible 578.42655 (538.17 seconds)
Cbc0010I After 6700 nodes, 402 on tree, 1e+50 best solution, best possible 578.45765 (542.55 seconds)
Cbc0010I After 6800 nodes, 381 on tree, 1e+50 best solution, best possible 578.48131 (547.09 seconds)
Cbc0010I After 6900 nodes, 356 on tree, 1e+50 best solution, best possible 578.51159 (551.46 seconds)
Cbc0010I After 7000 nodes, 321 on tree, 1e+50 best solution, best possible 578.52287 (554.69 seconds)
Cbc0010I After 7100 nodes, 271 on tree, 1e+50 best solution, best possible 578.54014 (556.65 seconds)
Cbc0010I After 7200 nodes, 221 on tree, 1e+50 best solution, best possible 578.64192 (558.86 seconds)
Cbc0010I After 7300 nodes, 171 on tree, 1e+50 best solution, best possible 582.46069 (560.60 seconds)
Cbc0010I After 7400 nodes, 121 on tree, 1e+50 best solution, best possible 583.42575 (562.18 seconds)
Cbc0010I After 7500 nodes, 71 on tree, 1e+50 best solution, best possible 583.61207 (564.11 seconds)
Cbc0010I After 7600 nodes, 21 on tree, 1e+50 best solution, best possible 662.98588 (565.76 seconds)
Cbc0001I Search completed - best objective 1e+50, took 227457 iterations and 7642 nodes (567.51 seconds)
Cbc0035I Maximum depth 194, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.01902s)
Total solve time:                         567.593s (567.593s in branch-and-bound)
Lower bound:                              578.519
Upper bound:                              578.519  (gap: 0.00%)
Branch-and-bound nodes:                      7642
Stats: /tmp/jl_gY3zHm/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.01902 [sep]  567.593 [time]  567.597 [bb]         5.785187e+02 [lower]         5.785187e+02 [upper]    7642 [nodes]
Performance of                           FBBT:	    37.8935s,     8761 runs. fix: 0.000115778 shrnk:    3.96084 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    15.0248s,        7 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-7.txt
