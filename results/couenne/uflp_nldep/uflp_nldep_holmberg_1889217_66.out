solving instance uflp nldep holmberg 7 sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 5330.0251       41 1.27409
Couenne: new cutoff value 5.3300258115e+03 (1.36676 seconds)
Loaded instance "/tmp/jl_zWHv29/model.nl"
Constraints:          570
Variables:            530 (10 integer)
Auxiliaries:          129 (0 integer)

Coin0506I Presolve 651 (-40) rows, 551 (-108) columns and 2721 (-148) elements
Clp0006I 0  Obj -431.77782 Primal inf 1209.7837 (80)
Clp0006I 88  Obj 3864.5184 Primal inf 109.2401 (65)
Clp0006I 121  Obj 4585.4768
Clp0000I Optimal - objective value 4585.4768
Clp0032I Optimal objective 4585.476834 - 121 iterations time 0.012, Presolve 0.00
Clp0000I Optimal - objective value 4585.4768
NLP Heuristic: NLP0014I             2         OPT 5330.0251       12 0.086105
no solution.
Clp0000I Optimal - objective value 4585.4768
Optimality Based BT: 31 improved bounds
Probing: 2 improved bounds
NLP Heuristic: no solution.
Cbc0031I 10 added rows had average density of 2
Cbc0013I At root node, 10 cuts changed objective from 4585.4768 to 5170.9508 in 11 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 25 row cuts average 2.0 elements, 12 column cuts (12 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (0.96 seconds)
Optimality Based BT: 40 improved bounds
Optimality Based BT: 39 improved bounds
Optimality Based BT: 28 improved bounds
Optimality Based BT: 28 improved bounds
Optimality Based BT: 31 improved bounds
Optimality Based BT: 29 improved bounds
Optimality Based BT: 27 improved bounds
Optimality Based BT: 27 improved bounds
Cbc0010I After 100 nodes, 37 on tree, 1e+50 best solution, best possible 5330.0242 (10.24 seconds)
Cbc0010I After 200 nodes, 74 on tree, 1e+50 best solution, best possible 5330.0242 (11.19 seconds)
Cbc0010I After 300 nodes, 109 on tree, 1e+50 best solution, best possible 5330.0242 (12.14 seconds)
Cbc0010I After 400 nodes, 144 on tree, 1e+50 best solution, best possible 5330.0243 (12.99 seconds)
Cbc0010I After 500 nodes, 173 on tree, 1e+50 best solution, best possible 5330.0244 (13.92 seconds)
Cbc0010I After 600 nodes, 204 on tree, 1e+50 best solution, best possible 5330.0244 (14.88 seconds)
Cbc0010I After 700 nodes, 232 on tree, 1e+50 best solution, best possible 5330.0245 (15.70 seconds)
Cbc0010I After 800 nodes, 255 on tree, 1e+50 best solution, best possible 5330.0246 (16.48 seconds)
Cbc0010I After 900 nodes, 270 on tree, 1e+50 best solution, best possible 5330.0247 (17.24 seconds)
Cbc0010I After 1000 nodes, 293 on tree, 1e+50 best solution, best possible 5330.0247 (18.01 seconds)
Cbc0010I After 1100 nodes, 317 on tree, 1e+50 best solution, best possible 5330.0248 (18.82 seconds)
Cbc0010I After 1200 nodes, 342 on tree, 1e+50 best solution, best possible 5330.0248 (19.70 seconds)
Cbc0010I After 1300 nodes, 362 on tree, 1e+50 best solution, best possible 5330.0248 (20.51 seconds)
Cbc0010I After 1400 nodes, 380 on tree, 1e+50 best solution, best possible 5330.0249 (21.31 seconds)
Cbc0010I After 1500 nodes, 397 on tree, 1e+50 best solution, best possible 5330.0249 (22.08 seconds)
Cbc0010I After 1600 nodes, 421 on tree, 1e+50 best solution, best possible 5330.025 (22.92 seconds)
Cbc0010I After 1700 nodes, 441 on tree, 1e+50 best solution, best possible 5330.025 (23.74 seconds)
Cbc0010I After 1800 nodes, 457 on tree, 1e+50 best solution, best possible 5330.025 (24.53 seconds)
Cbc0010I After 1900 nodes, 468 on tree, 1e+50 best solution, best possible 5330.0251 (25.28 seconds)
Cbc0010I After 2000 nodes, 485 on tree, 1e+50 best solution, best possible 5330.0251 (26.11 seconds)
Cbc0010I After 2100 nodes, 489 on tree, 1e+50 best solution, best possible 5330.0251 (26.83 seconds)
Cbc0010I After 2200 nodes, 489 on tree, 1e+50 best solution, best possible 5330.0252 (27.57 seconds)
Cbc0010I After 2300 nodes, 486 on tree, 1e+50 best solution, best possible 5330.0252 (28.27 seconds)
Cbc0010I After 2400 nodes, 485 on tree, 1e+50 best solution, best possible 5330.0253 (28.98 seconds)
Cbc0010I After 2500 nodes, 491 on tree, 1e+50 best solution, best possible 5330.0253 (29.70 seconds)
Cbc0010I After 2600 nodes, 491 on tree, 1e+50 best solution, best possible 5330.0254 (30.41 seconds)
Cbc0010I After 2700 nodes, 485 on tree, 1e+50 best solution, best possible 5330.0254 (31.10 seconds)
Cbc0010I After 2800 nodes, 487 on tree, 1e+50 best solution, best possible 5330.0255 (32.05 seconds)
Cbc0010I After 2900 nodes, 499 on tree, 1e+50 best solution, best possible 5330.0255 (32.89 seconds)
Cbc0010I After 3000 nodes, 512 on tree, 1e+50 best solution, best possible 5330.0255 (33.80 seconds)
Cbc0010I After 3100 nodes, 520 on tree, 1e+50 best solution, best possible 5330.0255 (34.57 seconds)
Cbc0010I After 3200 nodes, 525 on tree, 1e+50 best solution, best possible 5330.0255 (35.32 seconds)
Cbc0010I After 3300 nodes, 512 on tree, 1e+50 best solution, best possible 5330.0255 (35.96 seconds)
Cbc0010I After 3400 nodes, 505 on tree, 1e+50 best solution, best possible 5330.0256 (36.65 seconds)
Cbc0010I After 3500 nodes, 497 on tree, 1e+50 best solution, best possible 5330.0256 (37.38 seconds)
Cbc0010I After 3600 nodes, 481 on tree, 1e+50 best solution, best possible 5330.0257 (38.08 seconds)
Cbc0010I After 3700 nodes, 449 on tree, 1e+50 best solution, best possible 5330.0258 (38.65 seconds)
Cbc0010I After 3800 nodes, 399 on tree, 1e+50 best solution, best possible 5330.0259 (39.10 seconds)
Cbc0010I After 3900 nodes, 349 on tree, 1e+50 best solution, best possible 5330.026 (39.53 seconds)
Cbc0010I After 4000 nodes, 299 on tree, 1e+50 best solution, best possible 5330.0261 (39.95 seconds)
Cbc0010I After 4100 nodes, 249 on tree, 1e+50 best solution, best possible 5330.0263 (40.38 seconds)
Cbc0010I After 4200 nodes, 199 on tree, 1e+50 best solution, best possible 5330.0264 (40.80 seconds)
Cbc0010I After 4300 nodes, 149 on tree, 1e+50 best solution, best possible 5330.0266 (41.23 seconds)
Cbc0010I After 4400 nodes, 99 on tree, 1e+50 best solution, best possible 5330.0267 (41.67 seconds)
Cbc0010I After 4500 nodes, 49 on tree, 1e+50 best solution, best possible 5330.0275 (42.10 seconds)
Cbc0001I Search completed - best objective 1e+50, took 9014 iterations and 4598 nodes (42.52 seconds)
Cbc0035I Maximum depth 28, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:        691
Linearization cuts added in total:            691  (separation time: 0.003978s)
Total solve time:                         42.5286s (42.5286s in branch-and-bound)
Lower bound:                              5330.03
Upper bound:                              5330.03  (gap: 0.00%)
Branch-and-bound nodes:                      4598
Stats: /tmp/jl_zWHv29/model.nl  530 [var]   10 [int]  570 [con]  129 [aux]    691 [root]      691 [tot] 0.003978 [sep]  42.5286 [time]  42.5297 [bb]         5.330026e+03 [lower]         5.330026e+03 [upper]    4598 [nodes]
Performance of                           FBBT:	    1.74856s,     2369 runs. fix:          0 shrnk:    2.71537 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    1.19709s,        9 runs. fix:          2 shrnk:    134.871 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
reading holmberg data file /home/ccontard/git/ipwlb/code/instances/uflp/holmberg/p7
