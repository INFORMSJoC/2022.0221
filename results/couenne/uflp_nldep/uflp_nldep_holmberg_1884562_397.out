solving instance uflp nldep holmberg 40 pardivexp
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 6.0 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 7920.0621       56 610.8429
NLP0014I             2         OPT 7921.2939       50 2.886927
Couenne: new cutoff value 7.9212877595e+03 (620.323 seconds)
Loaded instance "/tmp/jl_QzMQPV/model.nl"
Constraints:         4710
Variables:           4590 (30 integer)
Auxiliaries:          359 (0 integer)

Coin0506I Presolve 5099 (-92) rows, 4649 (-300) columns and 23427 (-392) elements
Clp0006I 0  Obj 0 Primal inf 9997.9126 (480)
Clp0006I 176  Obj 4.0582734e-12 Primal inf 1391.813 (242)
Clp0006I 338  Obj 2.7580073e-07 Primal inf 3625412.5 (491)
Clp0006I 514  Obj 7622.3436 Primal inf 33489.788 (341)
Clp0006I 690  Obj 7892.7859 Primal inf 22387.191 (111)
Clp0006I 756  Obj 7903.2035
Clp0000I Optimal - objective value 7903.2035
Clp0032I Optimal objective 7903.203536 - 756 iterations time 0.142, Presolve 0.02
Clp0000I Optimal - objective value 7903.2035
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 7903.2035
Optimality Based BT: 51 improved bounds
Probing: 4 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 44 added rows had average density of 2
Cbc0013I At root node, 44 cuts changed objective from 7903.2035 to 7913.6259 in 11 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 159 row cuts average 2.0 elements, 12 column cuts (12 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (31.70 seconds)
Optimality Based BT: 46 improved bounds
Optimality Based BT: 38 improved bounds
Optimality Based BT: 41 improved bounds
Optimality Based BT: 42 improved bounds
Cbc0010I After 100 nodes, 43 on tree, 1e+50 best solution, best possible 7916.4616 (188.39 seconds)
Cbc0010I After 200 nodes, 91 on tree, 1e+50 best solution, best possible 7916.4616 (199.45 seconds)
Cbc0010I After 300 nodes, 141 on tree, 1e+50 best solution, best possible 7916.4616 (209.72 seconds)
Couenne: new cutoff value 7.9201086186e+03 (836.179 seconds)
Couenne: new cutoff value 7.9201085282e+03 (836.301 seconds)
Cbc0004I Integer solution of 7920.1085 found after 4114 iterations and 360 nodes (215.57 seconds)
Optimality Based BT: 43 improved bounds
Optimality Based BT: 42 improved bounds
Cbc0010I After 400 nodes, 47 on tree, 7920.1085 best solution, best possible 7917.4947 (287.73 seconds)
Optimality Based BT: 38 improved bounds
Cbc0010I After 500 nodes, 78 on tree, 7920.1085 best solution, best possible 7918.2758 (306.01 seconds)
Cbc0010I After 600 nodes, 116 on tree, 7920.1085 best solution, best possible 7918.2758 (315.76 seconds)
Couenne: new cutoff value 7.9200998335e+03 (939.72 seconds)
Cbc0004I Integer solution of 7920.0998 found after 10300 iterations and 633 nodes (318.99 seconds)
Cbc0010I After 700 nodes, 68 on tree, 7920.0998 best solution, best possible 7918.9439 (356.65 seconds)
Cbc0010I After 800 nodes, 79 on tree, 7920.0998 best solution, best possible 7919.1332 (394.82 seconds)
Cbc0010I After 900 nodes, 85 on tree, 7920.0998 best solution, best possible 7919.2552 (410.70 seconds)
Cbc0010I After 1000 nodes, 85 on tree, 7920.0998 best solution, best possible 7919.3846 (425.88 seconds)
Cbc0010I After 1100 nodes, 80 on tree, 7920.0998 best solution, best possible 7919.5201 (439.41 seconds)
Cbc0010I After 1200 nodes, 47 on tree, 7920.0998 best solution, best possible 7919.9027 (451.98 seconds)
Cbc0010I After 1300 nodes, 11 on tree, 7920.0998 best solution, best possible 7920.0981 (460.42 seconds)
Cbc0001I Search completed - best objective 7920.09983349097, took 38044 iterations and 1333 nodes (462.81 seconds)
Cbc0035I Maximum depth 179, 150 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       5191
Linearization cuts added in total:           5191  (separation time: 0.045836s)
Total solve time:                         462.976s (462.976s in branch-and-bound)
Lower bound:                               7920.1
Upper bound:                               7920.1  (gap: 0.00%)
Branch-and-bound nodes:                      1333
Stats: /tmp/jl_QzMQPV/model.nl 4590 [var]   30 [int] 4710 [con]  359 [aux]   5191 [root]     5191 [tot] 0.045836 [sep]  462.976 [time]  462.984 [bb]         7.920100e+03 [lower]         7.920100e+03 [upper]    1333 [nodes]
Performance of                           FBBT:	    17.8597s,     1763 runs. fix:          0 shrnk:    8.03963 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    31.1352s,        8 runs. fix:    1.39073 shrnk:    84.1697 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
reading holmberg data file /home/ccontard/git/ipwlb/code/instances/uflp/holmberg/p40
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
f0 = 0.6175687148559895
