solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-20-40-7.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Couenne: new cutoff value 1.4931610889e+03 (0.197997 seconds)
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 410.64772       40 0.489073
NLP0014I             2         OPT 431.52489       26 0.261036
Loaded instance "/tmp/jl_kxpxzG/model.nl"
Constraints:          880
Variables:            860 (20 integer)
Auxiliaries:           99 (0 integer)

Coin0506I Presolve 1040 (-1) rows, 900 (-59) columns and 4459 (-60) elements
Clp0006I 0  Obj -2745 Primal inf 1792669.7 (60)
Clp0006I 95  Obj -1706.4463 Primal inf 1587211.6 (92)
Clp0006I 190  Obj 54.40421 Primal inf 9581.3095 (46)
Clp0006I 285  Obj 291.28729 Primal inf 11857.32 (10)
Clp0006I 311  Obj 304.79724
Clp0000I Optimal - objective value 304.79724
Clp0000I Optimal - objective value 304.79724
Clp0032I Optimal objective 304.7972375 - 311 iterations time 0.012, Presolve 0.00
Clp0000I Optimal - objective value 304.79724
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 304.79724
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 9 added rows had average density of 2
Cbc0013I At root node, 9 cuts changed objective from 304.79724 to 305.0102 in 11 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 74 row cuts average 2.0 elements, 352 column cuts (352 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (1.29 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 50 on tree, 1e+50 best solution, best possible 369.40012 (13.19 seconds)
Cbc0010I After 200 nodes, 100 on tree, 1e+50 best solution, best possible 369.40012 (14.74 seconds)
Couenne: new cutoff value 4.1107351639e+02 (16.0504 seconds)
Couenne: new cutoff value 4.1106393751e+02 (16.0659 seconds)
Cbc0010I After 300 nodes, 121 on tree, 1e+50 best solution, best possible 373.15543 (16.42 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 400 nodes, 131 on tree, 1e+50 best solution, best possible 390.55222 (22.91 seconds)
Cbc0010I After 500 nodes, 139 on tree, 1e+50 best solution, best possible 395.57676 (24.81 seconds)
Cbc0010I After 600 nodes, 167 on tree, 1e+50 best solution, best possible 395.57676 (26.62 seconds)
Couenne: new cutoff value 4.1065186935e+02 (28.3773 seconds)
Couenne: new cutoff value 4.1064782043e+02 (28.3945 seconds)
Cbc0010I After 700 nodes, 194 on tree, 1e+50 best solution, best possible 396.29295 (28.24 seconds)
Cbc0010I After 800 nodes, 198 on tree, 1e+50 best solution, best possible 397.3822 (29.96 seconds)
Cbc0010I After 900 nodes, 194 on tree, 1e+50 best solution, best possible 401.75791 (31.66 seconds)
Cbc0010I After 1000 nodes, 204 on tree, 1e+50 best solution, best possible 402.37912 (33.44 seconds)
Cbc0010I After 1100 nodes, 209 on tree, 1e+50 best solution, best possible 404.22489 (35.17 seconds)
Cbc0010I After 1200 nodes, 213 on tree, 1e+50 best solution, best possible 404.71498 (36.87 seconds)
Cbc0010I After 1300 nodes, 216 on tree, 1e+50 best solution, best possible 405.46086 (38.63 seconds)
Cbc0010I After 1400 nodes, 214 on tree, 1e+50 best solution, best possible 406.15161 (40.27 seconds)
Cbc0010I After 1500 nodes, 217 on tree, 1e+50 best solution, best possible 406.8221 (42.03 seconds)
Cbc0010I After 1600 nodes, 216 on tree, 1e+50 best solution, best possible 407.21122 (43.78 seconds)
Cbc0010I After 1700 nodes, 204 on tree, 1e+50 best solution, best possible 407.8827 (45.42 seconds)
Cbc0010I After 1800 nodes, 178 on tree, 1e+50 best solution, best possible 409.12254 (46.84 seconds)
Cbc0010I After 1900 nodes, 141 on tree, 1e+50 best solution, best possible 410.33972 (48.04 seconds)
Cbc0010I After 2000 nodes, 98 on tree, 1e+50 best solution, best possible 410.80003 (48.77 seconds)
Cbc0010I After 2100 nodes, 48 on tree, 1e+50 best solution, best possible 411.18636 (49.32 seconds)
Cbc0001I Search completed - best objective 1e+50, took 50294 iterations and 2196 nodes (49.96 seconds)
Cbc0035I Maximum depth 112, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       1041
Linearization cuts added in total:           1041  (separation time: 0.004764s)
Total solve time:                         49.9723s (49.9723s in branch-and-bound)
Lower bound:                              410.648
Upper bound:                              410.648  (gap: 0.00%)
Branch-and-bound nodes:                      2196
Stats: /tmp/jl_kxpxzG/model.nl  860 [var]   20 [int]  880 [con]   99 [aux]   1041 [root]     1041 [tot] 0.004764 [sep]  49.9723 [time]  49.9732 [bb]         4.106478e+02 [lower]         4.106478e+02 [upper]    2196 [nodes]
Performance of                           FBBT:	    2.51039s,     2606 runs. fix: 0.000429718 shrnk:    3.10235 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    3.31176s,        8 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-20-40-7.txt
