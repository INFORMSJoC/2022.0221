solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-8.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 2.6633587607e+03 (2.69216 seconds)
2.7 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 528.49787       50 2.546772
Couenne: new cutoff value 6.1924861284e+02 (5.79529 seconds)
NLP0014I             2         OPT 597.03943       28 1.678121
Couenne: new cutoff value 5.9703959171e+02 (7.47697 seconds)
Loaded instance "/tmp/jl_xKVVGt/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3680 (-1) rows, 3400 (-119) columns and 16919 (-120) elements
Clp0006I 0  Obj -5433.75 Primal inf 8561586.6 (120)
Clp0006I 148  Obj -3567.1263 Primal inf 4267264.1 (183)
Clp0006I 296  Obj -2.587081 Primal inf 15387.845 (97)
Clp0006I 444  Obj 308.57262 Primal inf 17941.286 (73)
Clp0006I 576  Obj 469.62187
Clp0000I Optimal - objective value 469.62187
Clp0000I Optimal - objective value 469.62187
Clp0032I Optimal objective 469.621873 - 576 iterations time 0.042, Presolve 0.01
Clp0000I Optimal - objective value 469.62187
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 469.62187
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 17 added rows had average density of 2
Cbc0013I At root node, 17 cuts changed objective from 469.62187 to 469.6712 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 122 row cuts average 2.0 elements, 498 column cuts (498 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (9.98 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 27 on tree, 1e+50 best solution, best possible 481.51722 (61.93 seconds)
Cbc0010I After 200 nodes, 76 on tree, 1e+50 best solution, best possible 481.51722 (69.13 seconds)
Cbc0010I After 300 nodes, 126 on tree, 1e+50 best solution, best possible 481.51722 (75.81 seconds)
Cbc0010I After 400 nodes, 176 on tree, 1e+50 best solution, best possible 481.51722 (80.97 seconds)
Couenne: new cutoff value 5.4725230198e+02 (89.4928 seconds)
Cbc0010I After 500 nodes, 193 on tree, 1e+50 best solution, best possible 488.81964 (86.92 seconds)
Cbc0010I After 600 nodes, 241 on tree, 1e+50 best solution, best possible 488.81964 (94.15 seconds)
Cbc0010I After 700 nodes, 291 on tree, 1e+50 best solution, best possible 488.81964 (101.28 seconds)
Couenne: new cutoff value 5.3359604655e+02 (112.026 seconds)
Cbc0010I After 800 nodes, 317 on tree, 1e+50 best solution, best possible 513.86226 (107.08 seconds)
Cbc0010I After 900 nodes, 357 on tree, 1e+50 best solution, best possible 513.86226 (114.30 seconds)
Cbc0010I After 1000 nodes, 406 on tree, 1e+50 best solution, best possible 513.86226 (121.83 seconds)
Cbc0010I After 1100 nodes, 456 on tree, 1e+50 best solution, best possible 513.86226 (128.06 seconds)
Couenne: new cutoff value 5.2850893131e+02 (135.849 seconds)
Cbc0010I After 1200 nodes, 469 on tree, 1e+50 best solution, best possible 521.65749 (134.10 seconds)
Cbc0010I After 1300 nodes, 473 on tree, 1e+50 best solution, best possible 524.24381 (140.17 seconds)
Cbc0010I After 1400 nodes, 482 on tree, 1e+50 best solution, best possible 525.3224 (146.47 seconds)
Cbc0010I After 1500 nodes, 499 on tree, 1e+50 best solution, best possible 525.35147 (153.16 seconds)
Cbc0010I After 1600 nodes, 522 on tree, 1e+50 best solution, best possible 525.63865 (160.12 seconds)
Cbc0010I After 1700 nodes, 549 on tree, 1e+50 best solution, best possible 525.71105 (167.17 seconds)
Cbc0010I After 1800 nodes, 572 on tree, 1e+50 best solution, best possible 525.97385 (174.45 seconds)
Cbc0010I After 1900 nodes, 585 on tree, 1e+50 best solution, best possible 526.2759 (181.91 seconds)
Cbc0010I After 2000 nodes, 586 on tree, 1e+50 best solution, best possible 526.81795 (188.80 seconds)
Cbc0010I After 2100 nodes, 590 on tree, 1e+50 best solution, best possible 527.13523 (195.24 seconds)
Cbc0010I After 2200 nodes, 601 on tree, 1e+50 best solution, best possible 527.30577 (202.07 seconds)
Cbc0010I After 2300 nodes, 604 on tree, 1e+50 best solution, best possible 527.49444 (208.80 seconds)
Cbc0010I After 2400 nodes, 603 on tree, 1e+50 best solution, best possible 527.59126 (215.60 seconds)
Cbc0010I After 2500 nodes, 607 on tree, 1e+50 best solution, best possible 527.68335 (222.12 seconds)
Cbc0010I After 2600 nodes, 608 on tree, 1e+50 best solution, best possible 527.70252 (228.46 seconds)
Cbc0010I After 2700 nodes, 624 on tree, 1e+50 best solution, best possible 527.70252 (234.88 seconds)
Couenne: new cutoff value 5.2850782563e+02 (245.036 seconds)
Couenne: new cutoff value 5.2849888174e+02 (245.319 seconds)
Cbc0010I After 2800 nodes, 634 on tree, 1e+50 best solution, best possible 527.72169 (240.79 seconds)
Cbc0010I After 2900 nodes, 631 on tree, 1e+50 best solution, best possible 527.81417 (246.63 seconds)
Cbc0010I After 3000 nodes, 636 on tree, 1e+50 best solution, best possible 527.90805 (252.71 seconds)
Cbc0010I After 3100 nodes, 626 on tree, 1e+50 best solution, best possible 527.94963 (258.48 seconds)
Cbc0010I After 3200 nodes, 621 on tree, 1e+50 best solution, best possible 527.98404 (264.49 seconds)
Cbc0010I After 3300 nodes, 602 on tree, 1e+50 best solution, best possible 528.03347 (270.54 seconds)
Cbc0010I After 3400 nodes, 576 on tree, 1e+50 best solution, best possible 528.1047 (276.09 seconds)
Cbc0010I After 3500 nodes, 560 on tree, 1e+50 best solution, best possible 528.14884 (281.22 seconds)
Cbc0010I After 3600 nodes, 531 on tree, 1e+50 best solution, best possible 528.25394 (285.94 seconds)
Cbc0010I After 3700 nodes, 501 on tree, 1e+50 best solution, best possible 528.4284 (290.64 seconds)
Cbc0010I After 3800 nodes, 503 on tree, 1e+50 best solution, best possible 528.4284 (295.57 seconds)
Couenne: new cutoff value 5.2849876892e+02 (303.98 seconds)
Cbc0010I After 3900 nodes, 501 on tree, 1e+50 best solution, best possible 528.4415 (300.56 seconds)
Couenne: new cutoff value 5.2849845285e+02 (315.87 seconds)
Cbc0010I After 4000 nodes, 496 on tree, 1e+50 best solution, best possible 528.45536 (309.01 seconds)
Cbc0010I After 4100 nodes, 463 on tree, 1e+50 best solution, best possible 528.49957 (312.75 seconds)
Cbc0010I After 4200 nodes, 413 on tree, 1e+50 best solution, best possible 528.51217 (314.95 seconds)
Cbc0010I After 4300 nodes, 363 on tree, 1e+50 best solution, best possible 528.57836 (317.18 seconds)
Cbc0010I After 4400 nodes, 313 on tree, 1e+50 best solution, best possible 530.92644 (319.00 seconds)
Cbc0010I After 4500 nodes, 263 on tree, 1e+50 best solution, best possible 533.60834 (320.81 seconds)
Cbc0010I After 4600 nodes, 213 on tree, 1e+50 best solution, best possible 533.90177 (322.76 seconds)
Cbc0010I After 4700 nodes, 163 on tree, 1e+50 best solution, best possible 546.61101 (324.17 seconds)
Cbc0010I After 4800 nodes, 113 on tree, 1e+50 best solution, best possible 547.26075 (325.44 seconds)
Cbc0010I After 4900 nodes, 63 on tree, 1e+50 best solution, best possible 547.41188 (327.27 seconds)
Cbc0010I After 5000 nodes, 13 on tree, 1e+50 best solution, best possible 563.04284 (329.14 seconds)
Cbc0001I Search completed - best objective 1e+50, took 164315 iterations and 5026 nodes (329.60 seconds)
Cbc0035I Maximum depth 210, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.020916s)
Total solve time:                         329.645s (329.645s in branch-and-bound)
Lower bound:                              528.498
Upper bound:                              528.498  (gap: 0.00%)
Branch-and-bound nodes:                      5026
Stats: /tmp/jl_xKVVGt/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.020916 [sep]  329.645 [time]   329.65 [bb]         5.284985e+02 [lower]         5.284985e+02 [upper]    5026 [nodes]
Performance of                           FBBT:	    23.2352s,     5467 runs. fix:          0 shrnk:    7.08428 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    5.22983s,        3 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-8.txt
