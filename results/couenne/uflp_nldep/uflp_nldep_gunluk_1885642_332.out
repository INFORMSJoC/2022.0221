solving instance uflp nldep gunluk ../../../../../instances/uflp/gunluk/gunluk-40-80-3.txt cubic
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: Couenne: new cutoff value 1.9991271724e+03 (2.80164 seconds)
2.8 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 518.09707       48 2.62584
NLP0014I             2         OPT 579.77714       28 1.753034
Loaded instance "/tmp/jl_o6gnv0/model.nl"
Constraints:         3360
Variables:           3320 (40 integer)
Auxiliaries:          199 (0 integer)

Coin0506I Presolve 3680 (-1) rows, 3400 (-119) columns and 16919 (-120) elements
Clp0006I 0  Obj -6018.75 Primal inf 6818885.8 (120)
Clp0006I 148  Obj -3445.8085 Primal inf 4315053.2 (189)
Clp0006I 296  Obj -16.411128 Primal inf 33193.474 (106)
Clp0006I 444  Obj 287.8913 Primal inf 14729.197 (65)
Clp0006I 592  Obj 435.11796 Primal inf 5313.1137 (8)
Clp0006I 603  Obj 435.45055
Clp0000I Optimal - objective value 435.45055
Clp0000I Optimal - objective value 435.45055
Clp0032I Optimal objective 435.4505462 - 603 iterations time 0.052, Presolve 0.02
Clp0000I Optimal - objective value 435.45055
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 435.45055
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 17 added rows had average density of 2
Cbc0013I At root node, 17 cuts changed objective from 435.45055 to 435.52419 in 8 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 143 row cuts average 2.0 elements, 504 column cuts (504 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (10.57 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 100 nodes, 50 on tree, 1e+50 best solution, best possible 435.74756 (103.74 seconds)
Cbc0010I After 200 nodes, 100 on tree, 1e+50 best solution, best possible 435.74756 (110.77 seconds)
Cbc0010I After 300 nodes, 150 on tree, 1e+50 best solution, best possible 435.74756 (117.12 seconds)
Cbc0010I After 400 nodes, 200 on tree, 1e+50 best solution, best possible 435.74756 (121.97 seconds)
Couenne: new cutoff value 5.4262368493e+02 (129.949 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 500 nodes, 218 on tree, 1e+50 best solution, best possible 456.06615 (165.79 seconds)
Cbc0010I After 600 nodes, 268 on tree, 1e+50 best solution, best possible 456.06615 (174.25 seconds)
Cbc0010I After 700 nodes, 318 on tree, 1e+50 best solution, best possible 456.06615 (181.54 seconds)
Couenne: new cutoff value 5.1888879493e+02 (192.207 seconds)
Cbc0010I After 800 nodes, 341 on tree, 1e+50 best solution, best possible 456.83506 (195.86 seconds)
Cbc0010I After 900 nodes, 347 on tree, 1e+50 best solution, best possible 461.27311 (208.21 seconds)
Cbc0010I After 1000 nodes, 358 on tree, 1e+50 best solution, best possible 464.74396 (215.56 seconds)
Cbc0010I After 1100 nodes, 391 on tree, 1e+50 best solution, best possible 464.74396 (223.82 seconds)
Cbc0010I After 1200 nodes, 441 on tree, 1e+50 best solution, best possible 464.74396 (232.38 seconds)
Couenne: new cutoff value 5.1809762079e+02 (245.383 seconds)
Cbc0010I After 1300 nodes, 476 on tree, 1e+50 best solution, best possible 473.25852 (239.58 seconds)
Cbc0010I After 1400 nodes, 489 on tree, 1e+50 best solution, best possible 476.52805 (247.21 seconds)
Cbc0010I After 1500 nodes, 487 on tree, 1e+50 best solution, best possible 498.10318 (253.74 seconds)
Cbc0010I After 1600 nodes, 489 on tree, 1e+50 best solution, best possible 503.33339 (260.51 seconds)
Cbc0010I After 1700 nodes, 499 on tree, 1e+50 best solution, best possible 509.47718 (268.11 seconds)
Cbc0010I After 1800 nodes, 509 on tree, 1e+50 best solution, best possible 511.11696 (275.77 seconds)
Cbc0010I After 1900 nodes, 514 on tree, 1e+50 best solution, best possible 511.77271 (282.74 seconds)
Cbc0010I After 2000 nodes, 510 on tree, 1e+50 best solution, best possible 512.47075 (289.58 seconds)
Cbc0010I After 2100 nodes, 504 on tree, 1e+50 best solution, best possible 513.69198 (296.20 seconds)
Cbc0010I After 2200 nodes, 503 on tree, 1e+50 best solution, best possible 514.52226 (303.13 seconds)
Cbc0010I After 2300 nodes, 496 on tree, 1e+50 best solution, best possible 515.19001 (310.11 seconds)
Cbc0010I After 2400 nodes, 483 on tree, 1e+50 best solution, best possible 516.39939 (316.74 seconds)
Cbc0010I After 2500 nodes, 471 on tree, 1e+50 best solution, best possible 517.09654 (323.53 seconds)
Cbc0010I After 2600 nodes, 459 on tree, 1e+50 best solution, best possible 517.55 (329.97 seconds)
Cbc0010I After 2700 nodes, 424 on tree, 1e+50 best solution, best possible 518.09799 (335.16 seconds)
Cbc0010I After 2800 nodes, 374 on tree, 1e+50 best solution, best possible 518.14049 (337.57 seconds)
Cbc0010I After 2900 nodes, 324 on tree, 1e+50 best solution, best possible 518.52653 (339.33 seconds)
Cbc0010I After 3000 nodes, 274 on tree, 1e+50 best solution, best possible 518.91103 (341.80 seconds)
Cbc0010I After 3100 nodes, 224 on tree, 1e+50 best solution, best possible 519.08798 (344.18 seconds)
Cbc0010I After 3200 nodes, 174 on tree, 1e+50 best solution, best possible 540.83984 (346.11 seconds)
Cbc0010I After 3300 nodes, 124 on tree, 1e+50 best solution, best possible 542.635 (348.21 seconds)
Cbc0010I After 3400 nodes, 74 on tree, 1e+50 best solution, best possible 542.82338 (349.93 seconds)
Cbc0010I After 3500 nodes, 24 on tree, 1e+50 best solution, best possible 593.85098 (351.89 seconds)
Cbc0001I Search completed - best objective 1e+50, took 118817 iterations and 3548 nodes (353.53 seconds)
Cbc0035I Maximum depth 202, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:       3681
Linearization cuts added in total:           3681  (separation time: 0.019602s)
Total solve time:                         353.578s (353.578s in branch-and-bound)
Lower bound:                              518.098
Upper bound:                              518.098  (gap: 0.00%)
Branch-and-bound nodes:                      3548
Stats: /tmp/jl_o6gnv0/model.nl 3320 [var]   40 [int] 3360 [con]  199 [aux]   3681 [root]     3681 [tot] 0.019602 [sep]  353.578 [time]  353.581 [bb]         5.180976e+02 [lower]         5.180976e+02 [upper]    3548 [nodes]
Performance of                           FBBT:	    18.6743s,     3786 runs. fix:          0 shrnk:    5.68678 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    14.3334s,        7 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nldep(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:783
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nldep/script.jl:15
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-40-80-3.txt
