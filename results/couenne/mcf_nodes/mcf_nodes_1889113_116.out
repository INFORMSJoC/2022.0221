solving instance mcf nodes c25_100_30_V_T_5 3 6 sincos
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 1.4 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 22381.919      816 496.73086
NLP0014I             2      INFEAS 28.202334      202 58.024353
Loaded instance "/tmp/jl_KDRRzh/model.nl"
Constraints:         1025
Variables:           3275 (125 integer)
Auxiliaries:          206 (0 integer)

Coin0506I Presolve 1065 (-231) rows, 3084 (-397) columns and 11747 (-1316) elements
Clp0006I 0  Obj -4323.7297 Primal inf 4632.3491 (138)
Clp0006I 96  Obj -4323.7297 Primal inf 2392.7015 (149)
Clp0006I 192  Obj -4323.7297 Primal inf 8742.9149 (206)
Clp0006I 288  Obj -4323.7297 Primal inf 20805.402 (222)
Clp0006I 362  Obj -4323.7297 Primal inf 38076.559 (241)
Clp0006I 435  Obj -4323.7297 Primal inf 49737.958 (267)
Clp0006I 519  Obj -4323.7297 Primal inf 66845.071 (286)
Clp0006I 592  Obj -4323.7297 Primal inf 60963.812 (283)
Clp0006I 667  Obj -4323.7297 Primal inf 278016.76 (290)
Clp0006I 741  Obj -4323.7297 Primal inf 244457.8 (267)
Clp0006I 814  Obj -4323.7297 Primal inf 415829.49 (254)
Clp0006I 908  Obj 5788.1249 Primal inf 1964.5134 (134)
Clp0006I 1004  Obj 7869.0367 Primal inf 1611.7469 (127)
Clp0006I 1100  Obj 9041.5639 Primal inf 313.65989 (51)
Clp0006I 1184  Obj 9395.8551
Clp0000I Optimal - objective value 9395.8551
Clp0032I Optimal objective 9395.855147 - 1184 iterations time 0.212, Presolve 0.01
Clp0000I Optimal - objective value 9395.8551
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 9395.8551
Optimality Based BT: 23 improved bounds
Probing: 12 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 6 added rows had average density of 2
Cbc0013I At root node, 6 cuts changed objective from 9395.8551 to 10165.653 in 2 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 6 row cuts average 2.0 elements, 2 column cuts (2 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (189.09 seconds)
Optimality Based BT: 3 improved bounds
Optimality Based BT: 1 improved bounds
Optimality Based BT: 1 improved bounds
Optimality Based BT: 3 improved bounds
Cbc0010I After 100 nodes, 36 on tree, 1e+50 best solution, best possible 10256.392 (1618.32 seconds)
Cbc0010I After 200 nodes, 85 on tree, 1e+50 best solution, best possible 10256.392 (1628.12 seconds)
Cbc0010I After 300 nodes, 133 on tree, 1e+50 best solution, best possible 10256.392 (1637.08 seconds)
Cbc0010I After 400 nodes, 181 on tree, 1e+50 best solution, best possible 10256.392 (1644.22 seconds)
Cbc0010I After 500 nodes, 226 on tree, 1e+50 best solution, best possible 10256.392 (1649.99 seconds)
Cbc0010I After 600 nodes, 272 on tree, 1e+50 best solution, best possible 10256.392 (1654.98 seconds)
Cbc0010I After 700 nodes, 314 on tree, 1e+50 best solution, best possible 10256.392 (1660.39 seconds)
Cbc0010I After 800 nodes, 354 on tree, 1e+50 best solution, best possible 10256.392 (1665.13 seconds)
Couenne: new cutoff value 2.2711753708e+04 (2227.63 seconds)
Cbc0010I After 900 nodes, 394 on tree, 1e+50 best solution, best possible 10266.87 (1671.64 seconds)
Cbc0010I After 1000 nodes, 443 on tree, 1e+50 best solution, best possible 10266.87 (1682.34 seconds)
Cbc0010I After 1100 nodes, 489 on tree, 1e+50 best solution, best possible 10266.87 (1694.44 seconds)
Cbc0010I After 1200 nodes, 527 on tree, 1e+50 best solution, best possible 10266.87 (1706.19 seconds)
Cbc0010I After 1300 nodes, 566 on tree, 1e+50 best solution, best possible 10279.007 (1713.74 seconds)
Cbc0010I After 1400 nodes, 615 on tree, 1e+50 best solution, best possible 10279.007 (1725.71 seconds)
Cbc0010I After 1500 nodes, 655 on tree, 1e+50 best solution, best possible 10301.473 (1734.00 seconds)
Cbc0010I After 1600 nodes, 704 on tree, 1e+50 best solution, best possible 10301.473 (1745.09 seconds)
Cbc0010I After 1700 nodes, 744 on tree, 1e+50 best solution, best possible 10308.169 (1755.44 seconds)
Cbc0010I After 1800 nodes, 792 on tree, 1e+50 best solution, best possible 10308.169 (1764.81 seconds)
Cbc0010I After 1900 nodes, 834 on tree, 1e+50 best solution, best possible 10379.297 (1776.91 seconds)
Cbc0010I After 2000 nodes, 883 on tree, 1e+50 best solution, best possible 10379.297 (1785.58 seconds)
Cbc0010I After 2100 nodes, 930 on tree, 1e+50 best solution, best possible 10392.492 (1798.49 seconds)
Cbc0010I After 2200 nodes, 978 on tree, 1e+50 best solution, best possible 10392.492 (1807.80 seconds)
Cbc0010I After 2300 nodes, 1024 on tree, 1e+50 best solution, best possible 10402.659 (1820.70 seconds)
Cbc0010I After 2400 nodes, 1072 on tree, 1e+50 best solution, best possible 10402.659 (1829.59 seconds)
Cbc0010I After 2500 nodes, 1118 on tree, 1e+50 best solution, best possible 10402.659 (1843.04 seconds)
Cbc0010I After 2600 nodes, 1165 on tree, 1e+50 best solution, best possible 10408.319 (1851.43 seconds)
Cbc0010I After 2700 nodes, 1214 on tree, 1e+50 best solution, best possible 10408.319 (1863.80 seconds)
Cbc0010I After 2800 nodes, 1257 on tree, 1e+50 best solution, best possible 10413.307 (1874.13 seconds)
Cbc0010I After 2900 nodes, 1305 on tree, 1e+50 best solution, best possible 10413.307 (1885.25 seconds)
Cbc0010I After 3000 nodes, 1349 on tree, 1e+50 best solution, best possible 10425.725 (1895.88 seconds)
Cbc0010I After 3100 nodes, 1397 on tree, 1e+50 best solution, best possible 10425.725 (1906.06 seconds)
Cbc0010I After 3200 nodes, 1444 on tree, 1e+50 best solution, best possible 10427.43 (1916.50 seconds)
Cbc0010I After 3300 nodes, 1492 on tree, 1e+50 best solution, best possible 10427.43 (1926.87 seconds)
Cbc0010I After 3400 nodes, 1534 on tree, 1e+50 best solution, best possible 10441.362 (1937.50 seconds)
Cbc0010I After 3500 nodes, 1582 on tree, 1e+50 best solution, best possible 10441.362 (1946.80 seconds)
Cbc0010I After 3600 nodes, 1632 on tree, 1e+50 best solution, best possible 10441.362 (1959.69 seconds)
Cbc0010I After 3700 nodes, 1674 on tree, 1e+50 best solution, best possible 10441.362 (1972.31 seconds)
Cbc0010I After 3800 nodes, 1710 on tree, 1e+50 best solution, best possible 10441.362 (1983.63 seconds)
Cbc0010I After 3900 nodes, 1750 on tree, 1e+50 best solution, best possible 10441.362 (1995.92 seconds)
Cbc0010I After 4000 nodes, 1792 on tree, 1e+50 best solution, best possible 10441.362 (2008.28 seconds)
Cbc0010I After 4100 nodes, 1840 on tree, 1e+50 best solution, best possible 10441.362 (2021.65 seconds)
Cbc0010I After 4200 nodes, 1883 on tree, 1e+50 best solution, best possible 10441.362 (2034.67 seconds)
Couenne: new cutoff value 2.2711493890e+04 (2602.78 seconds)
Cbc0004I Integer solution of 22711.494 found after 336256 iterations and 4259 nodes (2040.98 seconds)
Cbc0010I After 4300 nodes, 1728 on tree, 22711.494 best solution, best possible 10441.766 (2044.02 seconds)
Cbc0010I After 4400 nodes, 1776 on tree, 22711.494 best solution, best possible 10441.766 (2054.25 seconds)
Cbc0010I After 4500 nodes, 1815 on tree, 22711.494 best solution, best possible 10445.354 (2065.58 seconds)
Cbc0010I After 4600 nodes, 1864 on tree, 22711.494 best solution, best possible 10445.354 (2073.26 seconds)
Cbc0010I After 4700 nodes, 1912 on tree, 22711.494 best solution, best possible 10445.354 (2084.60 seconds)
Cbc0010I After 4800 nodes, 1957 on tree, 22711.494 best solution, best possible 10453.803 (2094.55 seconds)
Cbc0010I After 4900 nodes, 2006 on tree, 22711.494 best solution, best possible 10453.803 (2106.57 seconds)
Cbc0010I After 5000 nodes, 2053 on tree, 22711.494 best solution, best possible 10455.336 (2115.88 seconds)
Cbc0010I After 5100 nodes, 2096 on tree, 22711.494 best solution, best possible 10455.336 (2128.56 seconds)
Cbc0010I After 5200 nodes, 2143 on tree, 22711.494 best solution, best possible 10457.495 (2137.73 seconds)
Cbc0010I After 5300 nodes, 2189 on tree, 22711.494 best solution, best possible 10461.847 (2149.84 seconds)
Cbc0010I After 5400 nodes, 2237 on tree, 22711.494 best solution, best possible 10461.847 (2159.37 seconds)
Cbc0010I After 5500 nodes, 2284 on tree, 22711.494 best solution, best possible 10472.55 (2170.84 seconds)
Cbc0010I After 5600 nodes, 2332 on tree, 22711.494 best solution, best possible 10472.55 (2181.01 seconds)
Cbc0010I After 5700 nodes, 2380 on tree, 22711.494 best solution, best possible 10472.55 (2193.62 seconds)
Cbc0010I After 5800 nodes, 2420 on tree, 22711.494 best solution, best possible 10473.404 (2202.40 seconds)
Cbc0010I After 5900 nodes, 2468 on tree, 22711.494 best solution, best possible 10473.404 (2213.13 seconds)
Cbc0010I After 6000 nodes, 2512 on tree, 22711.494 best solution, best possible 10473.404 (2224.62 seconds)
Cbc0010I After 6100 nodes, 2558 on tree, 22711.494 best solution, best possible 10475.113 (2233.30 seconds)
Cbc0010I After 6200 nodes, 2604 on tree, 22711.494 best solution, best possible 10475.593 (2245.35 seconds)
Cbc0010I After 6300 nodes, 2652 on tree, 22711.494 best solution, best possible 10475.593 (2254.75 seconds)
Cbc0010I After 6400 nodes, 2698 on tree, 22711.494 best solution, best possible 10476.147 (2266.35 seconds)
Cbc0010I After 6500 nodes, 2745 on tree, 22711.494 best solution, best possible 10476.147 (2276.55 seconds)
Cbc0010I After 6600 nodes, 2793 on tree, 22711.494 best solution, best possible 10476.332 (2287.72 seconds)
Cbc0010I After 6700 nodes, 2841 on tree, 22711.494 best solution, best possible 10476.332 (2298.59 seconds)
Cbc0010I After 6800 nodes, 2889 on tree, 22711.494 best solution, best possible 10476.332 (2308.84 seconds)
Cbc0010I After 6900 nodes, 2936 on tree, 22711.494 best solution, best possible 10476.332 (2319.87 seconds)
Cbc0010I After 7000 nodes, 2983 on tree, 22711.494 best solution, best possible 10479.063 (2330.13 seconds)
Cbc0010I After 7100 nodes, 3031 on tree, 22711.494 best solution, best possible 10479.063 (2341.55 seconds)
Cbc0010I After 7200 nodes, 3078 on tree, 22711.494 best solution, best possible 10480.316 (2349.87 seconds)
Cbc0010I After 7300 nodes, 3126 on tree, 22711.494 best solution, best possible 10480.316 (2362.19 seconds)
Cbc0010I After 7400 nodes, 3170 on tree, 22711.494 best solution, best possible 10487.553 (2370.13 seconds)
Cbc0010I After 7500 nodes, 3219 on tree, 22711.494 best solution, best possible 10487.553 (2382.36 seconds)
Cbc0010I After 7600 nodes, 3262 on tree, 22711.494 best solution, best possible 10490.149 (2392.33 seconds)
Cbc0010I After 7700 nodes, 3311 on tree, 22711.494 best solution, best possible 10490.149 (2475.90 seconds)
Cbc0010I After 7800 nodes, 3353 on tree, 22711.494 best solution, best possible 10490.746 (2484.40 seconds)
Cbc0010I After 7900 nodes, 3402 on tree, 22711.494 best solution, best possible 10490.746 (2496.24 seconds)
Cbc0010I After 8000 nodes, 3448 on tree, 22711.494 best solution, best possible 10496.335 (2506.05 seconds)
Cbc0010I After 8100 nodes, 3497 on tree, 22711.494 best solution, best possible 10496.335 (2518.11 seconds)
Cbc0010I After 8200 nodes, 3541 on tree, 22711.494 best solution, best possible 10498.3 (2527.68 seconds)
Cbc0010I After 8300 nodes, 3590 on tree, 22711.494 best solution, best possible 10498.3 (2539.38 seconds)
Cbc0010I After 8400 nodes, 3636 on tree, 22711.494 best solution, best possible 10498.637 (2548.71 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 22711.494 (best possible 10498.637), took 809665 iterations and 8439 nodes (3050.69 seconds)
Cbc0035I Maximum depth 456, 445 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:       1296
Linearization cuts added in total:           1296  (separation time: 0.030439s)
Total solve time:                         3051.06s (3051.06s in branch-and-bound)
Lower bound:                              10498.6
Upper bound:                              22711.5  (gap: 116.32%)
Branch-and-bound nodes:                      8439
Stats: /tmp/jl_KDRRzh/model.nl 3275 [var]  125 [int] 1025 [con]  206 [aux]   1296 [root]     1296 [tot] 0.030439 [sep]  3051.06 [time]  3051.06 [bb]         1.049864e+04 [lower]         2.271149e+04 [upper]    8439 [nodes]
Performance of                           FBBT:	     146.81s,    12881 runs. fix:  0.0690989 shrnk:   0.178396 ubd:          0 2ubd:         29 infeas:          0
Performance of                           OBBT:	    267.019s,        5 runs. fix:          1 shrnk:    2.12568 ubd:          0 2ubd:         29 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcf(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; restrict_to_commodities::Int64, solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1371
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcf_nodes/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcf_nodes/script.jl:18
