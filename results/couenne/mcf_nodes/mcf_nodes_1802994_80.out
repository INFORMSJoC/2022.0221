solving instance mcf nodes c25_100_10_V_L_5 3 6 square
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 0.2 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 274.28571       67 1.87504
NLP0014I             2      INFEAS 3.07673       74 2.589741
Loaded instance "/tmp/jl_xw9lND/model.nl"
Constraints:          525
Variables:           1275 (125 integer)
Auxiliaries:           36 (0 integer)

Coin0506I Presolve 499 (-154) rows, 1072 (-239) columns and 4107 (-598) elements
Clp0006I 0  Obj 6.1065089 Primal inf 88.00501 (25)
Clp0006I 84  Obj 25.459813 Primal inf 801.4083 (63)
Clp0006I 151  Obj 122.61922 Primal inf 901.54727 (92)
Clp0006I 225  Obj 239.81745 Primal inf 80.813669 (56)
Clp0006I 266  Obj 267.80505
Clp0000I Optimal - objective value 267.80505
Clp0032I Optimal objective 267.8050501 - 266 iterations time 0.022, Presolve 0.01
Clp0000I Optimal - objective value 267.80505
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 267.80505
Optimality Based BT: 74 improved bounds
Probing: 3 improved bounds
NLP Heuristic: no solution.
Cbc0031I 29 added rows had average density of 2
Cbc0013I At root node, 29 cuts changed objective from 267.80505 to 274.28573 in 20 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 304 row cuts average 2.0 elements, 25 column cuts (25 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (25.47 seconds)
Optimality Based BT: 7 improved bounds
Couenne: new cutoff value 2.7428573346e+02 (55.3016 seconds)
Cbc0004I Integer solution of 274.28573 found after 230 iterations and 1 nodes (49.33 seconds)
Cbc0001I Search completed - best objective 274.2857334600599, took 230 iterations and 1 nodes (49.33 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost

 	"Finished"

Linearization cuts added at root node:        653
Linearization cuts added in total:            653  (separation time: 0.007637s)
Total solve time:                         49.3587s (49.3587s in branch-and-bound)
Lower bound:                              274.286
Upper bound:                              274.286  (gap: 0.00%)
Branch-and-bound nodes:                         1
Stats: /tmp/jl_xw9lND/model.nl 1275 [var]  125 [int]  525 [con]   36 [aux]    653 [root]      653 [tot] 0.007637 [sep]  49.3587 [time]  49.3598 [bb]         2.742857e+02 [lower]         2.742857e+02 [upper]       1 [nodes]
Performance of                           FBBT:	   0.057505s,       25 runs. fix:       0.16 shrnk:    2.51157 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    15.8519s,        2 runs. fix:        2.5 shrnk:    21.5374 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_mcf(ptype::String, graph::String, commodities::String, nodes::String, incr::Int64, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; restrict_to_commodities::Int64, solve::Bool, write_nl::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:1332
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcf_nodes/script.jl:18
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/mcf_nodes/script.jl:18
