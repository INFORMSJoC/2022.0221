solving instance uflp nlass gunluk ../../../../../instances/uflp/gunluk/gunluk-20-40-2.txt sinabc1
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 2.3 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 150.05215       39 3.092424
NLP0014I             2         OPT 799.018      112 2.175062
Couenne: new cutoff value 7.9901800431e+02 (25.4462 seconds)
Loaded instance "/tmp/jl_j6Fvgb/model.nl"
Constraints:         2440
Variables:           2420 (820 integer)
Auxiliaries:         3241 (0 integer)

Coin0506I Presolve 9591 (-850) rows, 4771 (-890) columns and 21521 (-1740) elements
Clp0006I 0  Obj 0 Primal inf 64.254177 (40)
Clp0006I 266  Obj 4.5662846e-18 Primal inf 165.79582 (120)
Clp0006I 532  Obj 4.0571937e-18 Primal inf 165.79582 (120)
Clp0006I 798  Obj 0 Primal inf 166.27369 (120)
Clp0006I 1064  Obj 1.9871772e-15 Primal inf 479.57942 (276)
Clp0006I 1330  Obj 3.241817e-14 Primal inf 645.62853 (282)
Clp0006I 1596  Obj 7.9540633e-14 Primal inf 476.29191 (229)
Clp0006I 1862  Obj 1.8221315e-10 Primal inf 914.83062 (306)
Clp0006I 2128  Obj 8.2978032 Primal inf 246.98346 (175)
Clp0006I 2394  Obj 8.2978032 Primal inf 238.5949 (174)
Clp0006I 2660  Obj 8.2978032 Primal inf 210.17697 (174)
Clp0006I 2926  Obj 8.2978032 Primal inf 218.71408 (186)
Clp0006I 3192  Obj 11.940915 Primal inf 158.50745 (169)
Clp0006I 3320  Obj 18.097391
Clp0000I Optimal - objective value 18.097391
Clp0032I Optimal objective 18.09739108 - 3320 iterations time 0.262, Presolve 0.06
Clp0000I Optimal - objective value 18.097391
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 18.097391
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 962 added rows had average density of 2
Cbc0013I At root node, 962 cuts changed objective from 18.097391 to 83.096601 in 20 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 14617 row cuts average 2.0 elements, 889 column cuts (1659 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (86.25 seconds)
Optimality Based BT: 0 improved bounds
Couenne: new cutoff value 7.9901787899e+02 (113.927 seconds)
Optimality Based BT: 1 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 1 improved bounds
Couenne: new cutoff value 6.6775434477e+02 (671.789 seconds)
Cbc0012I Integer solution of 667.75434 found by Couenne Rounding NLP after 16995 iterations and 5 nodes (645.71 seconds)
Cbc0010I After 100 nodes, 50 on tree, 667.75434 best solution, best possible 86.122628 (828.44 seconds)
Cbc0010I After 200 nodes, 100 on tree, 667.75434 best solution, best possible 86.122628 (869.40 seconds)
Cbc0010I After 300 nodes, 150 on tree, 667.75434 best solution, best possible 86.122628 (906.21 seconds)
Cbc0010I After 400 nodes, 200 on tree, 667.75434 best solution, best possible 86.122628 (941.24 seconds)
Cbc0010I After 500 nodes, 250 on tree, 667.75434 best solution, best possible 86.122628 (971.21 seconds)
Cbc0010I After 600 nodes, 300 on tree, 667.75434 best solution, best possible 86.122628 (997.53 seconds)
Cbc0010I After 700 nodes, 350 on tree, 667.75434 best solution, best possible 86.122628 (1020.79 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 800 nodes, 394 on tree, 667.75434 best solution, best possible 86.376107 (1575.63 seconds)
Cbc0010I After 900 nodes, 444 on tree, 667.75434 best solution, best possible 86.376107 (1611.55 seconds)
Cbc0010I After 1000 nodes, 494 on tree, 667.75434 best solution, best possible 86.376107 (1643.68 seconds)
Cbc0010I After 1100 nodes, 544 on tree, 667.75434 best solution, best possible 86.376107 (1672.20 seconds)
Cbc0010I After 1200 nodes, 594 on tree, 667.75434 best solution, best possible 86.376107 (1698.58 seconds)
Cbc0010I After 1300 nodes, 644 on tree, 667.75434 best solution, best possible 86.376107 (1722.81 seconds)
Cbc0010I After 1400 nodes, 694 on tree, 667.75434 best solution, best possible 86.376107 (1745.43 seconds)
Cbc0010I After 1500 nodes, 742 on tree, 667.75434 best solution, best possible 86.542554 (1777.19 seconds)
Cbc0010I After 1600 nodes, 792 on tree, 667.75434 best solution, best possible 86.542554 (1816.48 seconds)
Cbc0010I After 1700 nodes, 842 on tree, 667.75434 best solution, best possible 86.542554 (1856.14 seconds)
Cbc0010I After 1800 nodes, 892 on tree, 667.75434 best solution, best possible 86.542554 (1888.10 seconds)
Cbc0010I After 1900 nodes, 942 on tree, 667.75434 best solution, best possible 86.542554 (1916.91 seconds)
Cbc0010I After 2000 nodes, 992 on tree, 667.75434 best solution, best possible 86.542554 (1943.33 seconds)
Cbc0010I After 2100 nodes, 1042 on tree, 667.75434 best solution, best possible 86.542554 (1966.42 seconds)
Cbc0010I After 2200 nodes, 1090 on tree, 667.75434 best solution, best possible 86.595755 (2015.99 seconds)
Cbc0010I After 2300 nodes, 1140 on tree, 667.75434 best solution, best possible 86.595755 (2078.43 seconds)
Cbc0010I After 2400 nodes, 1190 on tree, 667.75434 best solution, best possible 86.595755 (2118.60 seconds)
Cbc0010I After 2500 nodes, 1240 on tree, 667.75434 best solution, best possible 86.595755 (2154.08 seconds)
Cbc0010I After 2600 nodes, 1290 on tree, 667.75434 best solution, best possible 86.595755 (2184.87 seconds)
Cbc0010I After 2700 nodes, 1340 on tree, 667.75434 best solution, best possible 86.595755 (2212.31 seconds)
Cbc0010I After 2800 nodes, 1390 on tree, 667.75434 best solution, best possible 86.595755 (2238.11 seconds)
Cbc0010I After 2900 nodes, 1440 on tree, 667.75434 best solution, best possible 86.595755 (2261.46 seconds)
Cbc0010I After 3000 nodes, 1487 on tree, 667.75434 best solution, best possible 86.595808 (2432.33 seconds)
Cbc0010I After 3100 nodes, 1537 on tree, 667.75434 best solution, best possible 86.595808 (2473.46 seconds)
Cbc0010I After 3200 nodes, 1587 on tree, 667.75434 best solution, best possible 86.595808 (2508.38 seconds)
Cbc0010I After 3300 nodes, 1637 on tree, 667.75434 best solution, best possible 86.595808 (2537.41 seconds)
Cbc0010I After 3400 nodes, 1687 on tree, 667.75434 best solution, best possible 86.595808 (2563.77 seconds)
Cbc0010I After 3500 nodes, 1737 on tree, 667.75434 best solution, best possible 86.595808 (2588.30 seconds)
Cbc0010I After 3600 nodes, 1787 on tree, 667.75434 best solution, best possible 86.595808 (2610.90 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 3700 nodes, 1833 on tree, 667.75434 best solution, best possible 86.677646 (2942.94 seconds)
Cbc0010I After 3800 nodes, 1883 on tree, 667.75434 best solution, best possible 86.677646 (2977.88 seconds)
Cbc0010I After 3900 nodes, 1933 on tree, 667.75434 best solution, best possible 86.677646 (3006.99 seconds)
Cbc0010I After 4000 nodes, 1983 on tree, 667.75434 best solution, best possible 86.677646 (3033.00 seconds)
Cbc0010I After 4100 nodes, 2033 on tree, 667.75434 best solution, best possible 86.677646 (3055.42 seconds)
Cbc0010I After 4200 nodes, 2083 on tree, 667.75434 best solution, best possible 86.677646 (3076.35 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Cbc0010I After 4300 nodes, 2129 on tree, 667.75434 best solution, best possible 86.933958 (3328.42 seconds)
Cbc0010I After 4400 nodes, 2179 on tree, 667.75434 best solution, best possible 86.933958 (3361.58 seconds)
Cbc0010I After 4500 nodes, 2229 on tree, 667.75434 best solution, best possible 86.933958 (3391.64 seconds)
Cbc0010I After 4600 nodes, 2279 on tree, 667.75434 best solution, best possible 86.933958 (3416.22 seconds)
Cbc0010I After 4700 nodes, 2329 on tree, 667.75434 best solution, best possible 86.933958 (3439.77 seconds)
Cbc0010I After 4800 nodes, 2379 on tree, 667.75434 best solution, best possible 86.933958 (3461.03 seconds)
Cbc0010I After 4900 nodes, 2424 on tree, 667.75434 best solution, best possible 86.942938 (3484.10 seconds)
Cbc0010I After 5000 nodes, 2474 on tree, 667.75434 best solution, best possible 86.942938 (3519.35 seconds)
Cbc0010I After 5100 nodes, 2524 on tree, 667.75434 best solution, best possible 86.942938 (3549.92 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 667.75434 (best possible 86.942938), took 2321332 iterations and 5159 nodes (3578.25 seconds)
Cbc0035I Maximum depth 400, 0 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:      10441
Linearization cuts added in total:          10441  (separation time: 0.062157s)
Total solve time:                         3578.62s (3578.62s in branch-and-bound)
Lower bound:                              86.9429
Upper bound:                              667.754  (gap: 660.44%)
Branch-and-bound nodes:                      5159
Stats: /tmp/jl_j6Fvgb/model.nl 2420 [var]  820 [int] 2440 [con] 3241 [aux]  10441 [root]    10441 [tot] 0.062157 [sep]  3578.62 [time]  3578.64 [bb]         8.694294e+01 [lower]         6.677543e+02 [upper]    5159 [nodes]
Performance of                           FBBT:	    202.549s,    10201 runs. fix:          0 shrnk:    92.4371 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    17.6326s,       12 runs. fix:   0.214286 shrnk:  0.0622915 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nlass(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:885
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nlass/script.jl:14
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nlass/script.jl:14
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-20-40-2.txt
