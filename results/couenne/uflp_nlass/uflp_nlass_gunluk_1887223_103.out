solving instance uflp nlass gunluk ../../../../../instances/uflp/gunluk/gunluk-20-40-10.txt sinabc1
Couenne 0.5.8 -- an Open-Source solver for Mixed Integer Nonlinear Optimization
Mailing list: couenne@list.coin-or.org
Instructions: http://www.coin-or.org/Couenne
couenne: 
ANALYSIS TEST: Reformulating problem: 2.3 seconds
NLP0012I 
              Num      Status      Obj             It       time                 Location
NLP0014I             1         OPT 170.18702       31 2.482016
NLP0014I             2         OPT 1053.8993       44 0.835963
Couenne: new cutoff value 1.0538992829e+03 (23.5251 seconds)
Loaded instance "/tmp/jl_NCLPz9/model.nl"
Constraints:         2440
Variables:           2420 (820 integer)
Auxiliaries:         3241 (0 integer)

Coin0506I Presolve 9591 (-850) rows, 4771 (-890) columns and 21521 (-1740) elements
Clp0006I 0  Obj 0 Primal inf 64.254177 (40)
Clp0006I 266  Obj 1.3821322e-18 Primal inf 165.79582 (120)
Clp0006I 532  Obj 4.2357605e-18 Primal inf 165.79582 (120)
Clp0006I 798  Obj 4.1128172e-18 Primal inf 189.13666 (190)
Clp0006I 1064  Obj 7.4753205e-16 Primal inf 372.51829 (300)
Clp0006I 1330  Obj 2.3580267e-11 Primal inf 611.50876 (271)
Clp0006I 1596  Obj 5.6431121 Primal inf 265.69478 (187)
Clp0006I 1862  Obj 5.6431121 Primal inf 253.37629 (187)
Clp0006I 2128  Obj 5.6431121 Primal inf 260.64053 (189)
Clp0006I 2394  Obj 5.6431121 Primal inf 223.17853 (188)
Clp0006I 2660  Obj 5.6431121 Primal inf 194.08728 (185)
Clp0006I 2926  Obj 5.6431121 Primal inf 154.48474 (176)
Clp0006I 3176  Obj 12.11016
Clp0000I Optimal - objective value 12.11016
Clp0032I Optimal objective 12.11015987 - 3176 iterations time 0.232, Presolve 0.05
Clp0000I Optimal - objective value 12.11016
NLP Heuristic: time limit reached.
Clp0000I Optimal - objective value 12.11016
Optimality Based BT: 0 improved bounds
Probing: 0 improved bounds
NLP Heuristic: time limit reached.
Cbc0031I 992 added rows had average density of 2
Cbc0013I At root node, 992 cuts changed objective from 12.11016 to 95.377157 in 20 passes
Cbc0014I Cut generator 0 (Couenne convexifier cuts) - 14425 row cuts average 2.0 elements, 887 column cuts (1523 active)
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1.7976931e+308 (81.91 seconds)
Optimality Based BT: 0 improved bounds
Optimality Based BT: 0 improved bounds
Couenne: new cutoff value 9.8863775882e+02 (348.908 seconds)
Cbc0012I Integer solution of 988.63776 found by Couenne Rounding NLP after 12204 iterations and 2 nodes (324.79 seconds)
Optimality Based BT: 0 improved bounds
Couenne: new cutoff value 9.6693703154e+02 (452.009 seconds)
Cbc0012I Integer solution of 966.93703 found by Couenne Rounding NLP after 13933 iterations and 3 nodes (427.89 seconds)
Optimality Based BT: 0 improved bounds
Couenne: new cutoff value 9.1173602659e+02 (554.799 seconds)
Cbc0012I Integer solution of 911.73603 found by Couenne Rounding NLP after 14094 iterations and 4 nodes (530.68 seconds)
Cbc0010I After 100 nodes, 50 on tree, 911.73603 best solution, best possible 96.02525 (979.27 seconds)
Cbc0010I After 200 nodes, 100 on tree, 911.73603 best solution, best possible 96.02525 (1007.08 seconds)
Cbc0010I After 300 nodes, 150 on tree, 911.73603 best solution, best possible 96.02525 (1033.76 seconds)
Cbc0010I After 400 nodes, 200 on tree, 911.73603 best solution, best possible 96.02525 (1054.92 seconds)
Cbc0010I After 500 nodes, 250 on tree, 911.73603 best solution, best possible 96.02525 (1073.86 seconds)
Cbc0010I After 600 nodes, 300 on tree, 911.73603 best solution, best possible 96.02525 (1092.31 seconds)
Cbc0010I After 700 nodes, 350 on tree, 911.73603 best solution, best possible 96.02525 (1111.92 seconds)
Cbc0010I After 800 nodes, 400 on tree, 911.73603 best solution, best possible 96.02525 (1132.09 seconds)
Cbc0010I After 900 nodes, 450 on tree, 911.73603 best solution, best possible 96.02525 (1152.16 seconds)
Cbc0010I After 1000 nodes, 500 on tree, 911.73603 best solution, best possible 96.02525 (1171.96 seconds)
Cbc0010I After 1100 nodes, 550 on tree, 911.73603 best solution, best possible 96.02525 (1189.51 seconds)
Cbc0010I After 1200 nodes, 600 on tree, 911.73603 best solution, best possible 96.02525 (1205.97 seconds)
Cbc0010I After 1300 nodes, 650 on tree, 911.73603 best solution, best possible 96.02525 (1221.02 seconds)
Cbc0010I After 1400 nodes, 700 on tree, 911.73603 best solution, best possible 96.02525 (1235.61 seconds)
Cbc0010I After 1500 nodes, 750 on tree, 911.73603 best solution, best possible 96.02525 (1249.92 seconds)
Cbc0010I After 1600 nodes, 800 on tree, 911.73603 best solution, best possible 96.02525 (1264.19 seconds)
Cbc0010I After 1700 nodes, 850 on tree, 911.73603 best solution, best possible 96.02525 (1278.48 seconds)
Cbc0010I After 1800 nodes, 900 on tree, 911.73603 best solution, best possible 96.02525 (1292.91 seconds)
Cbc0010I After 1900 nodes, 950 on tree, 911.73603 best solution, best possible 96.02525 (1307.34 seconds)
Cbc0010I After 2000 nodes, 1000 on tree, 911.73603 best solution, best possible 96.02525 (1321.91 seconds)
Cbc0010I After 2100 nodes, 1050 on tree, 911.73603 best solution, best possible 96.02525 (1336.47 seconds)
Cbc0010I After 2200 nodes, 1100 on tree, 911.73603 best solution, best possible 96.02525 (1351.21 seconds)
Cbc0010I After 2300 nodes, 1150 on tree, 911.73603 best solution, best possible 96.02525 (1365.93 seconds)
Cbc0010I After 2400 nodes, 1200 on tree, 911.73603 best solution, best possible 96.02525 (1380.65 seconds)
Cbc0010I After 2500 nodes, 1250 on tree, 911.73603 best solution, best possible 96.02525 (1395.42 seconds)
Cbc0010I After 2600 nodes, 1300 on tree, 911.73603 best solution, best possible 96.02525 (1410.28 seconds)
Cbc0010I After 2700 nodes, 1350 on tree, 911.73603 best solution, best possible 96.02525 (1425.24 seconds)
Cbc0010I After 2800 nodes, 1400 on tree, 911.73603 best solution, best possible 96.02525 (1440.29 seconds)
Cbc0010I After 2900 nodes, 1450 on tree, 911.73603 best solution, best possible 96.02525 (1455.45 seconds)
Cbc0010I After 3000 nodes, 1500 on tree, 911.73603 best solution, best possible 96.02525 (1470.88 seconds)
Cbc0010I After 3100 nodes, 1550 on tree, 911.73603 best solution, best possible 96.02525 (1486.42 seconds)
Cbc0010I After 3200 nodes, 1600 on tree, 911.73603 best solution, best possible 96.02525 (1501.48 seconds)
Cbc0010I After 3300 nodes, 1649 on tree, 911.73603 best solution, best possible 96.02525 (1515.50 seconds)
Couenne: new cutoff value 6.6122322432e+02 (1553.08 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 3400 nodes, 1690 on tree, 911.73603 best solution, best possible 96.803987 (1531.63 seconds)
Cbc0010I After 3500 nodes, 1740 on tree, 911.73603 best solution, best possible 96.803987 (1590.87 seconds)
Cbc0010I After 3600 nodes, 1790 on tree, 911.73603 best solution, best possible 96.803987 (1615.82 seconds)
Cbc0010I After 3700 nodes, 1840 on tree, 911.73603 best solution, best possible 96.803987 (1641.74 seconds)
Cbc0010I After 3800 nodes, 1890 on tree, 911.73603 best solution, best possible 96.803987 (1660.36 seconds)
Cbc0010I After 3900 nodes, 1940 on tree, 911.73603 best solution, best possible 96.803987 (1677.04 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 4000 nodes, 1987 on tree, 911.73603 best solution, best possible 97.129998 (1936.39 seconds)
Cbc0010I After 4100 nodes, 2037 on tree, 911.73603 best solution, best possible 97.129998 (1965.50 seconds)
Cbc0010I After 4200 nodes, 2087 on tree, 911.73603 best solution, best possible 97.129998 (1997.49 seconds)
Cbc0010I After 4300 nodes, 2137 on tree, 911.73603 best solution, best possible 97.129998 (2022.62 seconds)
Cbc0010I After 4400 nodes, 2187 on tree, 911.73603 best solution, best possible 97.129998 (2045.41 seconds)
Cbc0010I After 4500 nodes, 2237 on tree, 911.73603 best solution, best possible 97.129998 (2066.91 seconds)
Cbc0010I After 4600 nodes, 2283 on tree, 911.73603 best solution, best possible 97.22315 (2268.43 seconds)
Cbc0010I After 4700 nodes, 2333 on tree, 911.73603 best solution, best possible 97.22315 (2323.73 seconds)
Cbc0010I After 4800 nodes, 2383 on tree, 911.73603 best solution, best possible 97.22315 (2353.77 seconds)
Cbc0010I After 4900 nodes, 2433 on tree, 911.73603 best solution, best possible 97.22315 (2381.65 seconds)
Cbc0010I After 5000 nodes, 2483 on tree, 911.73603 best solution, best possible 97.22315 (2403.37 seconds)
Cbc0010I After 5100 nodes, 2533 on tree, 911.73603 best solution, best possible 97.22315 (2425.81 seconds)
Cbc0010I After 5200 nodes, 2583 on tree, 911.73603 best solution, best possible 97.22315 (2448.90 seconds)
Cbc0010I After 5300 nodes, 2633 on tree, 911.73603 best solution, best possible 97.22315 (2472.32 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 5400 nodes, 2680 on tree, 911.73603 best solution, best possible 97.321023 (2543.89 seconds)
Cbc0010I After 5500 nodes, 2730 on tree, 911.73603 best solution, best possible 97.321023 (2575.36 seconds)
Cbc0010I After 5600 nodes, 2780 on tree, 911.73603 best solution, best possible 97.321023 (2604.01 seconds)
Cbc0010I After 5700 nodes, 2830 on tree, 911.73603 best solution, best possible 97.321023 (2628.72 seconds)
Cbc0010I After 5800 nodes, 2880 on tree, 911.73603 best solution, best possible 97.321023 (2648.21 seconds)
Cbc0010I After 5900 nodes, 2930 on tree, 911.73603 best solution, best possible 97.321023 (2665.21 seconds)
Cbc0010I After 6000 nodes, 2980 on tree, 911.73603 best solution, best possible 97.321023 (2684.96 seconds)
Cbc0010I After 6100 nodes, 3026 on tree, 911.73603 best solution, best possible 97.534226 (2708.80 seconds)
Cbc0010I After 6200 nodes, 3076 on tree, 911.73603 best solution, best possible 97.534226 (2740.97 seconds)
Cbc0010I After 6300 nodes, 3126 on tree, 911.73603 best solution, best possible 97.534226 (2773.55 seconds)
Cbc0010I After 6400 nodes, 3176 on tree, 911.73603 best solution, best possible 97.534226 (2803.30 seconds)
Cbc0010I After 6500 nodes, 3226 on tree, 911.73603 best solution, best possible 97.534226 (2827.44 seconds)
Cbc0010I After 6600 nodes, 3276 on tree, 911.73603 best solution, best possible 97.534226 (2849.33 seconds)
Cbc0010I After 6700 nodes, 3326 on tree, 911.73603 best solution, best possible 97.534226 (2867.66 seconds)
Cbc0010I After 6800 nodes, 3376 on tree, 911.73603 best solution, best possible 97.534226 (2887.28 seconds)
Cbc0010I After 6900 nodes, 3423 on tree, 911.73603 best solution, best possible 97.775771 (2921.73 seconds)
Cbc0010I After 7000 nodes, 3473 on tree, 911.73603 best solution, best possible 97.775771 (2953.93 seconds)
Cbc0010I After 7100 nodes, 3523 on tree, 911.73603 best solution, best possible 97.775771 (2981.89 seconds)
Cbc0010I After 7200 nodes, 3573 on tree, 911.73603 best solution, best possible 97.775771 (3004.18 seconds)
Cbc0010I After 7300 nodes, 3623 on tree, 911.73603 best solution, best possible 97.775771 (3019.92 seconds)
Optimality Based BT: 0 improved bounds
Cbc0010I After 7400 nodes, 3670 on tree, 911.73603 best solution, best possible 97.781387 (3053.43 seconds)
Cbc0010I After 7500 nodes, 3720 on tree, 911.73603 best solution, best possible 97.781387 (3081.90 seconds)
Cbc0010I After 7600 nodes, 3770 on tree, 911.73603 best solution, best possible 97.781387 (3101.10 seconds)
Cbc0010I After 7700 nodes, 3820 on tree, 911.73603 best solution, best possible 97.781387 (3118.02 seconds)
Cbc0010I After 7800 nodes, 3870 on tree, 911.73603 best solution, best possible 97.781387 (3134.08 seconds)
Cbc0010I After 7900 nodes, 3920 on tree, 911.73603 best solution, best possible 97.781387 (3151.36 seconds)
Cbc0010I After 8000 nodes, 3965 on tree, 911.73603 best solution, best possible 97.86687 (3178.07 seconds)
Cbc0010I After 8100 nodes, 4015 on tree, 911.73603 best solution, best possible 97.86687 (3210.12 seconds)
Cbc0010I After 8200 nodes, 4065 on tree, 911.73603 best solution, best possible 97.86687 (3237.27 seconds)
Cbc0010I After 8300 nodes, 4115 on tree, 911.73603 best solution, best possible 97.86687 (3261.41 seconds)
Cbc0010I After 8400 nodes, 4165 on tree, 911.73603 best solution, best possible 97.86687 (3283.85 seconds)
Cbc0010I After 8500 nodes, 4215 on tree, 911.73603 best solution, best possible 97.86687 (3302.17 seconds)
Cbc0010I After 8600 nodes, 4265 on tree, 911.73603 best solution, best possible 97.86687 (3320.92 seconds)
Cbc0010I After 8700 nodes, 4315 on tree, 911.73603 best solution, best possible 97.86687 (3340.34 seconds)
Cbc0010I After 8800 nodes, 4365 on tree, 911.73603 best solution, best possible 97.86687 (3360.11 seconds)
Cbc0010I After 8900 nodes, 4408 on tree, 911.73603 best solution, best possible 97.964247 (3384.57 seconds)
Cbc0010I After 9000 nodes, 4458 on tree, 911.73603 best solution, best possible 97.964247 (3414.68 seconds)
Cbc0010I After 9100 nodes, 4508 on tree, 911.73603 best solution, best possible 97.964247 (3441.16 seconds)
Cbc0010I After 9200 nodes, 4558 on tree, 911.73603 best solution, best possible 97.964247 (3462.68 seconds)
Cbc0010I After 9300 nodes, 4608 on tree, 911.73603 best solution, best possible 97.964247 (3481.59 seconds)
Cbc0010I After 9400 nodes, 4658 on tree, 911.73603 best solution, best possible 97.964247 (3499.73 seconds)
Cbc0010I After 9500 nodes, 4708 on tree, 911.73603 best solution, best possible 97.964247 (3517.63 seconds)
Cbc0010I After 9600 nodes, 4758 on tree, 911.73603 best solution, best possible 97.964247 (3536.14 seconds)
Cbc0010I After 9700 nodes, 4808 on tree, 911.73603 best solution, best possible 97.964247 (3558.37 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 911.73603 (best possible 97.964247), took 2373740 iterations and 9755 nodes (3599.11 seconds)
Cbc0035I Maximum depth 1698, 0 variables fixed on reduced cost

 	"Not finished"

Linearization cuts added at root node:      10441
Linearization cuts added in total:          10441  (separation time: 0.059338s)
Total solve time:                         3599.51s (3599.51s in branch-and-bound)
Lower bound:                              97.9642
Upper bound:                              661.223  (gap: 569.15%)
Branch-and-bound nodes:                      9755
Stats: /tmp/jl_NCLPz9/model.nl 2420 [var]  820 [int] 2440 [con] 3241 [aux]  10441 [root]    10441 [tot] 0.059338 [sep]  3599.51 [time]  3599.52 [bb]         9.796425e+01 [lower]         6.612232e+02 [upper]    9755 [nodes]
Performance of                           FBBT:	    329.405s,    16654 runs. fix: 0.000316706 shrnk:    84.0098 ubd:          0 2ubd:          0 infeas:          0
Performance of                           OBBT:	    12.1977s,        9 runs. fix:          0 shrnk:          0 ubd:          0 2ubd:          0 infeas:          0
ERROR: LoadError: MathOptInterface.GetAttributeNotAllowed{MathOptInterface.ObjectiveBound}: Getting attribute MathOptInterface.ObjectiveBound() cannot be performed: AmplNLWriter.Optimizer does not support getting the attribute MathOptInterface.ObjectiveBound(). You may want to use a `CachingOptimizer` in `AUTOMATIC` mode or you may need to call `reset_optimizer` before doing this operation if the `CachingOptimizer` is in `MANUAL` mode.
Stacktrace:
  [1] get_fallback(model::AmplNLWriter.Optimizer, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:409
  [2] get(::AmplNLWriter.Optimizer, ::MathOptInterface.ObjectiveBound)
    @ MathOptInterface ~/.julia/packages/MathOptInterface/gLl4d/src/attributes.jl:390
  [3] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [4] get(model::MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [5] get(b::MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Bridges ~/.julia/packages/MathOptInterface/gLl4d/src/Bridges/bridge_optimizer.jl:889
  [6] _get_model_attribute(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:865
  [7] get(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, attr::MathOptInterface.ObjectiveBound)
    @ MathOptInterface.Utilities ~/.julia/packages/MathOptInterface/gLl4d/src/Utilities/cachingoptimizer.jl:900
  [8] _moi_get_result(model::MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MathOptInterface.Utilities.CachingOptimizer{AmplNLWriter.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.Model{Float64}}}, args::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1053
  [9] get(model::JuMP.Model, attr::MathOptInterface.ObjectiveBound)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/optimizer_interface.jl:1073
 [10] objective_bound(model::JuMP.Model)
    @ JuMP ~/.julia/packages/JuMP/i68GU/src/objective.jl:78
 [11] nl_uflp_nlass(filename::String, cost::Symbol, solver::AmplNLWriter.Optimizer, solver_params::Vector{Any}; solve::Bool, write_nl::Bool, with_cap_constraint::Bool)
    @ IterativePWLB ~/git/ipwlb/code/sources/IterativePWLB/src/nlsolver.jl:885
 [12] top-level scope
    @ ~/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nlass/script.jl:14
in expression starting at /home/ccontard/git/ipwlb/code/sources/IterativePWLB/test/couenne/uflp_nlass/script.jl:14
Generating Gunluk and Lee data file ../../../../../instances/uflp/gunluk/gunluk-20-40-10.txt
